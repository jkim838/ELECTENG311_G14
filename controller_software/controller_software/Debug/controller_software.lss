
controller_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800100  00800100  0000021e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000afa  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000808  00000000  00000000  00000e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f0  00000000  00000000  0000161a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000537  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c7  00000000  00000000  0000211f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000021e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 31       	cpi	r26, 0x12	; 18
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <calculate_length>:
	#else
	return stroke_length;
	
	#endif
	
}
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	70 e0       	ldi	r23, 0x00	; 0
  94:	cb 01       	movw	r24, r22
  96:	08 95       	ret

00000098 <calculate_period>:
	#else
	return period;
	
	#endif
	
}
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	70 e0       	ldi	r23, 0x00	; 0
  9c:	cb 01       	movw	r24, r22
  9e:	08 95       	ret

000000a0 <calculate_flow_rate>:
	#else
	return flow_rate;
	
	#endif

}
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	cb 01       	movw	r24, r22
  a6:	08 95       	ret

000000a8 <calculate_power>:
	#else
	return power;
	
	#endif

  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	cb 01       	movw	r24, r22
  ae:	08 95       	ret

000000b0 <main>:
int main(void){
	
	/*** Run Once Code ***/
	/* PIN I/O Setup */
	// Set all pins to output. Change mode to input when necessary
	DDRB = 0xff;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;
  b4:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xff;
  b6:	8a b9       	out	0x0a, r24	; 10
	
	// Set ADC Input Gates...
	DDRC &= ~(1 << PC0); // ADC Channel 0... left hall effect sensor
  b8:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1 << PC2); // ADC Channel 2... Coil Voltage Shunt
  ba:	3a 98       	cbi	0x07, 2	; 7
	DDRC &= ~(1 << PC3); // ADC Channel 3... Coil Current Shunt
  bc:	3b 98       	cbi	0x07, 3	; 7
	DDRC &= ~(1 << PC5); // ADC Channel 5... Right hall effect sensor
  be:	3d 98       	cbi	0x07, 5	; 7
		
	/* ATMEGA328P Module Initialization */
	// Remove double slashes to activate...
	timer_init();	// Set up Timer and Pulse Width Modulation.
  c0:	0e 94 b3 00 	call	0x166	; 0x166 <timer_init>
	
	sei();
  c4:	78 94       	sei
			double flow_rate = calculate_flow_rate(parameter1, parameter2);
			sei();
		}
		
		#ifdef MAIN_DEBUG_MODE
			PORTB ^= (1 << PB5);
  c6:	c0 e2       	ldi	r28, 0x20	; 32
			uint8_t parameter2;
		#endif
		
		// Check if hall effect sensor voltage array is complete
		// (i.e. left / right hall effect sensor voltages are available)
		if(data_collected == 4){
  c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  cc:	84 30       	cpi	r24, 0x04	; 4
  ce:	11 f5       	brne	.+68     	; 0x114 <main+0x64>
			cli();
  d0:	f8 94       	cli
			data_collected = 0; //reset data collection count
  d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			double stroke_length = calculate_length(hall_voltages);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 48 00 	call	0x90	; 0x90 <calculate_length>
			double stroke_period = calculate_period(hall_voltages);
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	0e 94 4c 00 	call	0x98	; 0x98 <calculate_period>
			double stroke_frequency = 1/stroke_period;
			double power = calculate_power(coil_voltage, coil_current);
  e6:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <coil_current>
  ea:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <coil_current+0x1>
  ee:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <coil_current+0x2>
  f2:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <coil_current+0x3>
  f6:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <coil_voltage>
  fa:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <coil_voltage+0x1>
  fe:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <coil_voltage+0x2>
 102:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <coil_voltage+0x3>
 106:	0e 94 54 00 	call	0xa8	; 0xa8 <calculate_power>
			double flow_rate = calculate_flow_rate(parameter1, parameter2);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 50 00 	call	0xa0	; 0xa0 <calculate_flow_rate>
			sei();
 112:	78 94       	sei
		}
		
		#ifdef MAIN_DEBUG_MODE
			PORTB ^= (1 << PB5);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	8c 27       	eor	r24, r28
 118:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	81 ee       	ldi	r24, 0xE1	; 225
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x70>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x7a>
 12a:	00 00       	nop
 12c:	cd cf       	rjmp	.-102    	; 0xc8 <main+0x18>

0000012e <__vector_16>:
	
	return 0;
}

/*** Interrupt Service Routine Definitions ***/
ISR(TIMER0_OVF_vect){
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
	
	#ifdef TIMER_DEBUG_MODE
	// Debugger Mode...
	PORTB ^= (1 << PB4);
 13c:	95 b1       	in	r25, 0x05	; 5
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	89 27       	eor	r24, r25
 142:	85 b9       	out	0x05, r24	; 5
	#else
	// Normal Operation Mode...
	OCR0A = new_PWM_frequency;
	
	#endif
}
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_21>:

/*** Analog to Digital Conversion Complete Interrupt ***/
ISR(ADC_vect){
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
		ADMUX &= 0xf0;			// Reset to Channel 0. (left hall effect sensor)
	}
	
	#endif
	
}
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <timer_init>:


void timer_init(){
	
	/*** OCR0A: Output Compare Register A ***/
	OCR0A = 64;
 166:	80 e4       	ldi	r24, 0x40	; 64
 168:	87 bd       	out	0x27, r24	; 39

	/*** TCCR0A: Timer/Counter Control Register A ***/
	/*** Compare Match Output A Mode ***/
	TCCR0A |=   (1 << COM0A1);		// Clear Output Compare Pin (OC0A) on Compare Match (non-inverting), Set OC0A at BOTTOM.
 16a:	84 b5       	in	r24, 0x24	; 36
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	84 bd       	out	0x24, r24	; 36
	TCCR0A &=  ~(1 << COM0A0);
 170:	84 b5       	in	r24, 0x24	; 36
 172:	8f 7b       	andi	r24, 0xBF	; 191
 174:	84 bd       	out	0x24, r24	; 36
	
	/*** Waveform Generation Mode ***/
	TCCR0A |=  (1<< WGM02);			// Fast PWM Mode TOP = 0xff, Update OCR0A at BOTTOM, TOV at 0xff
 176:	84 b5       	in	r24, 0x24	; 36
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |=  (1<< WGM01);
 17c:	84 b5       	in	r24, 0x24	; 36
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	84 bd       	out	0x24, r24	; 36
	TCCR0A |=  (1<< WGM00);
 182:	84 b5       	in	r24, 0x24	; 36
 184:	81 60       	ori	r24, 0x01	; 1
 186:	84 bd       	out	0x24, r24	; 36
	/*** Force Output Compare B ***/
	//TCCR0B &= ~(1 << FOC0B);		// Force Output Compare B 'off'.
	
	/*** Clock Select Bits ***/
	// NOTES: CHANGE PRESCALER VALUE IF WE WANT TO PRODUCE SMALLER COUNT
	TCCR0B |= (1 << CS02);			// Pre-scaler 256
 188:	85 b5       	in	r24, 0x25	; 37
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS01);			// 8MHz / 256 = 31.25 KHz
 18e:	85 b5       	in	r24, 0x25	; 37
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS00);
 194:	85 b5       	in	r24, 0x25	; 37
 196:	8e 7f       	andi	r24, 0xFE	; 254
 198:	85 bd       	out	0x25, r24	; 37
	/*** Timer / Counter 0 Output Compare Match A Interrupt ***/
	//TIMSK0 |=  (1 << OCIE0A);						// Interrupt when TCNT0 = OCR0A 'On'
	/*** Timer / Counter 0 Output Compare Match B Interrupt ***/
	//TIMSK0 &= ~(1 << OCIE0B);						// Interrupt when TCNT0 = OCR0B 'Off'
	/*** Timer / Counter 0 Overflow Interrupt Enable ***/
	TIMSK0 |=  (1 << TOIE0);						// Interrupt when Overflow On 
 19a:	ee e6       	ldi	r30, 0x6E	; 110
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	81 60       	ori	r24, 0x01	; 1
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
