
controller_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020c  00800100  00001ae0  00001b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  0080030c  0080030c  00001d80  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ddc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a43  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da0  00000000  00000000  000049df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000149d  00000000  00000000  0000577f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  00006c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a5e  00000000  00000000  000072cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003211  00000000  00000000  00007d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000af3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__vector_7>
      20:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__vector_8>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__vector_18>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__vector_21>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e0 ee       	ldi	r30, 0xE0	; 224
     17e:	fa e1       	ldi	r31, 0x1A	; 26
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ac 30       	cpi	r26, 0x0C	; 12
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	23 e0       	ldi	r18, 0x03	; 3
     18e:	ac e0       	ldi	r26, 0x0C	; 12
     190:	b3 e0       	ldi	r27, 0x03	; 3
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a8 34       	cpi	r26, 0x48	; 72
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <main>
     1a0:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <adc_init>:
/*** Function Definitions ***/
void adc_init(){
	
	/** ADCMUX: ADC Multiplexer Selection Register **/
	/* Voltage Reference Selection */
	ADMUX &= ~(1 << REFS1);			// Use Vcc as reference voltage
     1a8:	ec e7       	ldi	r30, 0x7C	; 124
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8f 77       	andi	r24, 0x7F	; 127
     1b0:	80 83       	st	Z, r24
	ADMUX |=  (1 << REFS0);
     1b2:	80 81       	ld	r24, Z
     1b4:	80 64       	ori	r24, 0x40	; 64
     1b6:	80 83       	st	Z, r24
	/* ADC Left Adjust Result */
	ADMUX &= ~(1 << ADLAR);			// Right adjust ADC reading to ADCH
     1b8:	80 81       	ld	r24, Z
     1ba:	8f 7d       	andi	r24, 0xDF	; 223
     1bc:	80 83       	st	Z, r24
	/* Analog Channel Selection Bits */
	// Change input pin as specified by the data sheet...
	ADMUX &= ~(1 << MUX3);							// Channel 0 (Coil Voltage Sensor): Input pin is PC0
     1be:	80 81       	ld	r24, Z
     1c0:	87 7f       	andi	r24, 0xF7	; 247
     1c2:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX2);
     1c4:	80 81       	ld	r24, Z
     1c6:	8b 7f       	andi	r24, 0xFB	; 251
     1c8:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX1);
     1ca:	80 81       	ld	r24, Z
     1cc:	8d 7f       	andi	r24, 0xFD	; 253
     1ce:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX0);
     1d0:	80 81       	ld	r24, Z
     1d2:	8e 7f       	andi	r24, 0xFE	; 254
     1d4:	80 83       	st	Z, r24
	ADC_next_channel = ADC_COIL_VOLTAGE_CHANNEL;	
     1d6:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <ADC_next_channel>
	// Note: Although it is named ADC_next_channel, in this function specifically this variable signifies 
	// initial state of the ADC Channel.
	
	/** ADCSRA: ADC Control and Status Register A **/
	/* ADC Enable */
	ADCSRA |= (1 << ADEN);			// ADC Power 'On'
     1da:	ea e7       	ldi	r30, 0x7A	; 122
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	80 68       	ori	r24, 0x80	; 128
     1e2:	80 83       	st	Z, r24
	#ifdef ADC_ENABLE_AUTO_TRIGGER
		ADCSRA |= (1 << ADATE);			// Auto Trigger 'On'
	#endif
	/* ADC Interrupt Setting */
	//	ADCSRA &=~(1 << ADIF);
	ADCSRA |= (1 << ADIE);			// Interrupt 'On'
     1e4:	80 81       	ld	r24, Z
     1e6:	88 60       	ori	r24, 0x08	; 8
     1e8:	80 83       	st	Z, r24
	/* Pre-scaler Setup */
	ADCSRA |= (1 << ADPS2);			// Pre-scaler Division factor to 64
     1ea:	80 81       	ld	r24, Z
     1ec:	84 60       	ori	r24, 0x04	; 4
     1ee:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);			// ADC Frequency = 125 KHz @Xplained Mini (F_CPU 16MHz)
     1f0:	80 81       	ld	r24, Z
     1f2:	82 60       	ori	r24, 0x02	; 2
     1f4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0);			// ADC Frequency = 62.5 KHz @PCB (F_CPU 8MHz)
     1f6:	80 81       	ld	r24, Z
     1f8:	81 60       	ori	r24, 0x01	; 1
     1fa:	80 83       	st	Z, r24
		ADCSRB |= (1 << ADTS1);
		ADCSRB |= (1 << ADTS2);
	#endif

	/** ADC Begin **/
	ADCSRA |= (1 << ADSC);			// Start new conversion
     1fc:	80 81       	ld	r24, Z
     1fe:	80 64       	ori	r24, 0x40	; 64
     200:	80 83       	st	Z, r24
     202:	08 95       	ret

00000204 <adc_digitize>:
}

double adc_digitize(uint16_t debug_raw_output){
	
	double digitized_ADC_output = (double) debug_raw_output * ADC_REFERENCE_VOLTAGE / ADC_RESOLUTION;
	return digitized_ADC_output;
     204:	bc 01       	movw	r22, r24
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 f1 06 	call	0xde2	; 0xde2 <__floatunsisf>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 ea       	ldi	r20, 0xA0	; 160
     214:	50 e4       	ldi	r21, 0x40	; 64
     216:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	40 e8       	ldi	r20, 0x80	; 128
     220:	5a e3       	ldi	r21, 0x3A	; 58
     222:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
	
     226:	08 95       	ret

00000228 <calculate_voltage>:

/*** Function Definitions ***/
double calculate_voltage(double raw_ADC_output_PC0){
	static double real_voltage;
	real_voltage = raw_ADC_output_PC0 * (1 + VOLTAGE_SHUNT_A/VOLTAGE_SHUNT_B);	 
	return real_voltage;
     228:	26 e6       	ldi	r18, 0x66	; 102
     22a:	36 e6       	ldi	r19, 0x66	; 102
     22c:	46 e2       	ldi	r20, 0x26	; 38
     22e:	50 e4       	ldi	r21, 0x40	; 64
     230:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
}
     234:	08 95       	ret

00000236 <calculate_current>:

double calculate_current(double raw_ADC_output_PC5){
	static double real_current;
	real_current =  raw_ADC_output_PC5 / CURRENT_RESISTOR_C;
	return real_current;
     236:	2a e9       	ldi	r18, 0x9A	; 154
     238:	39 e9       	ldi	r19, 0x99	; 153
     23a:	49 e1       	ldi	r20, 0x19	; 25
     23c:	5e e3       	ldi	r21, 0x3E	; 62
     23e:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3>
}
     242:	08 95       	ret

00000244 <calculate_power>:

double calculate_power(double coil_voltage, double coil_current, uint8_t PWM_live_time, uint8_t cycle_period){
     244:	8f 92       	push	r8
     246:	9f 92       	push	r9
     248:	af 92       	push	r10
     24a:	bf 92       	push	r11
     24c:	ef 92       	push	r14
     24e:	0f 93       	push	r16
	// convert binary coil voltage into a number
	// Vcc = 5V, ADC Channel is 10 bits, therefore ADC Step Size = 5/2^10 = 4.88mV
	// therefore if raw ADC output is dec 512 (i.e. 0x200 hex), then analog value is 2.5v
	total_power = coil_voltage * coil_current;
	average_power = total_power * PWM_live_time / cycle_period;
	return average_power;
     250:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     254:	4b 01       	movw	r8, r22
     256:	5c 01       	movw	r10, r24
     258:	60 2f       	mov	r22, r16
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatsisf>
     264:	9b 01       	movw	r18, r22
     266:	ac 01       	movw	r20, r24
     268:	c5 01       	movw	r24, r10
     26a:	b4 01       	movw	r22, r8
     26c:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     270:	4b 01       	movw	r8, r22
     272:	5c 01       	movw	r10, r24
     274:	6e 2d       	mov	r22, r14
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatsisf>
     280:	9b 01       	movw	r18, r22
     282:	ac 01       	movw	r20, r24
     284:	c5 01       	movw	r24, r10
     286:	b4 01       	movw	r22, r8
     288:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3>
	
}
     28c:	0f 91       	pop	r16
     28e:	ef 90       	pop	r14
     290:	bf 90       	pop	r11
     292:	af 90       	pop	r10
     294:	9f 90       	pop	r9
     296:	8f 90       	pop	r8
     298:	08 95       	ret

0000029a <usart_init>:
#include "Macro_Definitions.h"

void usart_init(uint16_t UBRR){
	
	// Enable USART Transmitter
	UCSR0B |= (1 << TXEN0);
     29a:	a1 ec       	ldi	r26, 0xC1	; 193
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	2c 91       	ld	r18, X
     2a0:	28 60       	ori	r18, 0x08	; 8
     2a2:	2c 93       	st	X, r18
	// Enable USART Receiver
	UCSR0B |= (1 << RXEN0);
     2a4:	2c 91       	ld	r18, X
     2a6:	20 61       	ori	r18, 0x10	; 16
     2a8:	2c 93       	st	X, r18
	// Enable USART Receive Interrupt
	UCSR0B |= (1 << RXCIE0);
     2aa:	2c 91       	ld	r18, X
     2ac:	20 68       	ori	r18, 0x80	; 128
     2ae:	2c 93       	st	X, r18
		
	// Sets the mode of the USART to be asynchronous.
	UCSR0C &= ~(1 << UMSEL01);
     2b0:	e2 ec       	ldi	r30, 0xC2	; 194
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	20 81       	ld	r18, Z
     2b6:	2f 77       	andi	r18, 0x7F	; 127
     2b8:	20 83       	st	Z, r18
	UCSR0C &= ~(1 << UMSEL00);
     2ba:	20 81       	ld	r18, Z
     2bc:	2f 7b       	andi	r18, 0xBF	; 191
     2be:	20 83       	st	Z, r18
		
	// Disables the parity bit.
	UCSR0C &= ~(1 << UPM01);
     2c0:	20 81       	ld	r18, Z
     2c2:	2f 7d       	andi	r18, 0xDF	; 223
     2c4:	20 83       	st	Z, r18
	UCSR0C &= ~(1 << UPM00);
     2c6:	20 81       	ld	r18, Z
     2c8:	2f 7e       	andi	r18, 0xEF	; 239
     2ca:	20 83       	st	Z, r18
		
	// Sets only one stop bit.
	UCSR0C &= ~(1 << USBS0);
     2cc:	20 81       	ld	r18, Z
     2ce:	27 7f       	andi	r18, 0xF7	; 247
     2d0:	20 83       	st	Z, r18
		
	// Sets the data width to be 8 bits (UCSZ0[2..0] = 011).
	UCSR0B &= ~(1 << UCSZ02);
     2d2:	2c 91       	ld	r18, X
     2d4:	2b 7f       	andi	r18, 0xFB	; 251
     2d6:	2c 93       	st	X, r18
	UCSR0C |= ((1 << UCSZ01) | (1 << UCSZ00));
     2d8:	20 81       	ld	r18, Z
     2da:	26 60       	ori	r18, 0x06	; 6
     2dc:	20 83       	st	Z, r18
	// Sets the UBRR to be 103.
	UBRR0H = (UBRR >> 8);
     2de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRR;
     2e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2e6:	08 95       	ret

000002e8 <usart_transmit>:
	
}

void usart_transmit(uint8_t data){
	
	while (DATA_REG_IS_FULL);		// Waits for the UDR register to be empty.
     2e8:	e0 ec       	ldi	r30, 0xC0	; 192
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	90 81       	ld	r25, Z
     2ee:	95 ff       	sbrs	r25, 5
     2f0:	fd cf       	rjmp	.-6      	; 0x2ec <usart_transmit+0x4>
	UDR0 = data;					// Transmits the data.
     2f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2f6:	08 95       	ret

000002f8 <usart_printf>:
	
}

int usart_printf(char var, FILE *stream){
     2f8:	cf 93       	push	r28
     2fa:	c8 2f       	mov	r28, r24

	if(var == '\n'){
     2fc:	8a 30       	cpi	r24, 0x0A	; 10
     2fe:	19 f4       	brne	.+6      	; 0x306 <usart_printf+0xe>
		usart_transmit('\r');
     300:	8d e0       	ldi	r24, 0x0D	; 13
     302:	0e 94 74 01 	call	0x2e8	; 0x2e8 <usart_transmit>
	}
	usart_transmit(var);
     306:	8c 2f       	mov	r24, r28
     308:	0e 94 74 01 	call	0x2e8	; 0x2e8 <usart_transmit>
	return 0;

}
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <usart_TX_data>:

void usart_TX_data(uint8_t MOTOR_ID, uint8_t Current_FL, uint16_t numerical_req, double frequency, double expected_power, double coil_current, double coil_voltage, bool req_found, bool clear_error, bool error_collision, bool error_jammed){
     314:	2f 92       	push	r2
     316:	3f 92       	push	r3
     318:	4f 92       	push	r4
     31a:	5f 92       	push	r5
     31c:	6f 92       	push	r6
     31e:	7f 92       	push	r7
     320:	8f 92       	push	r8
     322:	9f 92       	push	r9
     324:	af 92       	push	r10
     326:	bf 92       	push	r11
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	00 d0       	rcall	.+0      	; 0x33a <usart_TX_data+0x26>
     33a:	00 d0       	rcall	.+0      	; 0x33c <usart_TX_data+0x28>
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	68 2e       	mov	r6, r24
     342:	76 2e       	mov	r7, r22
     344:	4b 83       	std	Y+3, r20	; 0x03
     346:	5c 83       	std	Y+4, r21	; 0x04
     348:	29 83       	std	Y+1, r18	; 0x01
     34a:	3a 83       	std	Y+2, r19	; 0x02
     34c:	59 8c       	ldd	r5, Y+25	; 0x19
     34e:	4a 8c       	ldd	r4, Y+26	; 0x1a
     350:	3b 8c       	ldd	r3, Y+27	; 0x1b
     352:	2c 8c       	ldd	r2, Y+28	; 0x1c
	
	// Slave to Master Communication
	// Transmit Report...
	printf("{");
     354:	8b e7       	ldi	r24, 0x7B	; 123
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <putchar>
	printf("\"%d\":", MOTOR_ID);
     35c:	1f 92       	push	r1
     35e:	6f 92       	push	r6
     360:	81 e1       	ldi	r24, 0x11	; 17
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	9f 93       	push	r25
     366:	8f 93       	push	r24
     368:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <printf>
	printf("{");
     36c:	8b e7       	ldi	r24, 0x7B	; 123
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <putchar>
	if(req_found){
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     37e:	88 23       	and	r24, r24
     380:	99 f0       	breq	.+38     	; 0x3a8 <usart_TX_data+0x94>
		// If new flow rate command was specified in the master-slave input, then print the following...
		// If current flow rate is lower than 3 digits, add a digit at the front to force three digits...
		printf("\"mfc\":{\"req"":\"%03d\",\"cur\":\"%03d\"},\"ver:\"\"001.003.005"",", numerical_req, Current_FL);
     382:	1f 92       	push	r1
     384:	7f 92       	push	r7
     386:	8c 81       	ldd	r24, Y+4	; 0x04
     388:	8f 93       	push	r24
     38a:	9b 81       	ldd	r25, Y+3	; 0x03
     38c:	9f 93       	push	r25
     38e:	87 e1       	ldi	r24, 0x17	; 23
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	9f 93       	push	r25
     394:	8f 93       	push	r24
     396:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <printf>
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	13 c0       	rjmp	.+38     	; 0x3ce <usart_TX_data+0xba>
	}
	else{
		// If no new flow rate command was specified or overflew in the master-slave input, then flow rate should be "000"...
		printf("\"mfc\":{\"req"":\"%d%d%d\",\"cur\":\"%03d\"},\"ver:\"\"001.003.005"",", 0,0,0, Current_FL);
     3a8:	1f 92       	push	r1
     3aa:	7f 92       	push	r7
     3ac:	1f 92       	push	r1
     3ae:	1f 92       	push	r1
     3b0:	1f 92       	push	r1
     3b2:	1f 92       	push	r1
     3b4:	1f 92       	push	r1
     3b6:	1f 92       	push	r1
     3b8:	8c e4       	ldi	r24, 0x4C	; 76
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	9f 93       	push	r25
     3be:	8f 93       	push	r24
     3c0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <printf>
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
	}
	// Display operating conditions...
	printf("\"param\":{\"pwr\":\"%04.1fW\",\"freq\":\"%03.0fHz\",\"curr\":\"%03.0fA\",\"volt\":\"%05.2fV\"},", expected_power, frequency, coil_current, coil_voltage);
     3ce:	2f 92       	push	r2
     3d0:	3f 92       	push	r3
     3d2:	4f 92       	push	r4
     3d4:	5f 92       	push	r5
     3d6:	bf 92       	push	r11
     3d8:	af 92       	push	r10
     3da:	9f 92       	push	r9
     3dc:	8f 92       	push	r8
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	9f 93       	push	r25
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	8f 93       	push	r24
     3e6:	1f 93       	push	r17
     3e8:	0f 93       	push	r16
     3ea:	ff 92       	push	r15
     3ec:	ef 92       	push	r14
     3ee:	df 92       	push	r13
     3f0:	cf 92       	push	r12
     3f2:	83 e8       	ldi	r24, 0x83	; 131
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	9f 93       	push	r25
     3f8:	8f 93       	push	r24
     3fa:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <printf>
	// if error is not cleared, when there are either of errors present...
	if(!clear_error && (error_collision || error_jammed)){
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	8e 8d       	ldd	r24, Y+30	; 0x1e
     40a:	81 11       	cpse	r24, r1
     40c:	19 c0       	rjmp	.+50     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     40e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     410:	81 11       	cpse	r24, r1
     412:	44 c0       	rjmp	.+136    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     414:	98 a1       	ldd	r25, Y+32	; 0x20
     416:	91 11       	cpse	r25, r1
     418:	30 c0       	rjmp	.+96     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     41a:	12 c0       	rjmp	.+36     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		// display error clearance message...
		printf("\"clr\":\"ew\",");
		// if only collision happend...
		if(!error_jammed && error_collision){
			printf("\"ew\":[\"           \",\"pistonCollision\"]");
     41c:	82 ed       	ldi	r24, 0xD2	; 210
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	9f 93       	push	r25
     422:	8f 93       	push	r24
     424:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <printf>
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	19 c0       	rjmp	.+50     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		else if(error_jammed && !error_collision){
			printf("\"ew\":[\"cmprStalled\",\"               \"]");
		}
		// if both happend...
		else if(error_jammed && error_collision){
			printf("\"ew\":[\"cmprStalled\",\"pistonCollision\"]");
     42e:	89 ef       	ldi	r24, 0xF9	; 249
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	9f 93       	push	r25
     434:	8f 93       	push	r24
     436:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <printf>
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	10 c0       	rjmp	.+32     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		}
	}
	// if error is cleared by the user, OR no errors are present in the system...
	else if(clear_error || (!error_jammed && !error_collision)){
		printf("           "); // eleven spaces
     440:	87 e3       	ldi	r24, 0x37	; 55
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	9f 93       	push	r25
     446:	8f 93       	push	r24
     448:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <printf>
		printf("                                  "); //31 spaces
     44c:	80 e2       	ldi	r24, 0x20	; 32
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	9f 93       	push	r25
     452:	8f 93       	push	r24
     454:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <printf>
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
	}
	printf("}");
     460:	8d e7       	ldi	r24, 0x7D	; 125
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <putchar>
	printf("}");
     468:	8d e7       	ldi	r24, 0x7D	; 125
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <putchar>
	
	// just to make the terminal look nicer...
	printf("\n");
     470:	8a e0       	ldi	r24, 0x0A	; 10
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <putchar>
	
     478:	1d c0       	rjmp	.+58     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
	// Display operating conditions...
	printf("\"param\":{\"pwr\":\"%04.1fW\",\"freq\":\"%03.0fHz\",\"curr\":\"%03.0fA\",\"volt\":\"%05.2fV\"},", expected_power, frequency, coil_current, coil_voltage);
	// if error is not cleared, when there are either of errors present...
	if(!clear_error && (error_collision || error_jammed)){
		// display error clearance message...
		printf("\"clr\":\"ew\",");
     47a:	83 e4       	ldi	r24, 0x43	; 67
     47c:	92 e0       	ldi	r25, 0x02	; 2
     47e:	9f 93       	push	r25
     480:	8f 93       	push	r24
     482:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <printf>
		if(!error_jammed && error_collision){
			printf("\"ew\":[\"           \",\"pistonCollision\"]");
		}
		// if only jam happend...
		else if(error_jammed && !error_collision){
			printf("\"ew\":[\"cmprStalled\",\"               \"]");
     486:	8f e4       	ldi	r24, 0x4F	; 79
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <printf>
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	e2 cf       	rjmp	.-60     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	// Display operating conditions...
	printf("\"param\":{\"pwr\":\"%04.1fW\",\"freq\":\"%03.0fHz\",\"curr\":\"%03.0fA\",\"volt\":\"%05.2fV\"},", expected_power, frequency, coil_current, coil_voltage);
	// if error is not cleared, when there are either of errors present...
	if(!clear_error && (error_collision || error_jammed)){
		// display error clearance message...
		printf("\"clr\":\"ew\",");
     49c:	83 e4       	ldi	r24, 0x43	; 67
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	9f 93       	push	r25
     4a2:	8f 93       	push	r24
     4a4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <printf>
		// if only collision happend...
		if(!error_jammed && error_collision){
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	88 a1       	ldd	r24, Y+32	; 0x20
     4ae:	81 11       	cpse	r24, r1
     4b0:	be cf       	rjmp	.-132    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     4b2:	b4 cf       	rjmp	.-152    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	printf("}");
	
	// just to make the terminal look nicer...
	printf("\n");
	
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	bf 90       	pop	r11
     4ce:	af 90       	pop	r10
     4d0:	9f 90       	pop	r9
     4d2:	8f 90       	pop	r8
     4d4:	7f 90       	pop	r7
     4d6:	6f 90       	pop	r6
     4d8:	5f 90       	pop	r5
     4da:	4f 90       	pop	r4
     4dc:	3f 90       	pop	r3
     4de:	2f 90       	pop	r2
     4e0:	08 95       	ret

000004e2 <main>:
	uint16_t raw_ADC_output_PC0;
	uint16_t raw_ADC_output_PC5;
	volatile uint8_t debug_ADC_channel;
#endif

int main(void){
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	60 97       	sbiw	r28, 0x10	; 16
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	cd bf       	out	0x3d, r28	; 61
	
	/*** Run Once Code ***/
	/* PIN I/O Setup */
	// Set all pins to output. Change mode to input when necessary
	DDRB = 0xff;
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;
     4fa:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xff;
     4fc:	8a b9       	out	0x0a, r24	; 10
	
	// Set ADC Input Gates...
	DDRC &= ~(1 << PC0); // ADC Channel 0... Voltage Shunt Channel
     4fe:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1 << PC5); // ADC Channel 5... Current Shunt Channel
     500:	3d 98       	cbi	0x07, 5	; 7
		
	/* ATMEGA328P Module Initialization */
	// Remove double slashes to activate...
	timer2_init();	// Set up Timer 0 for Pulse Modulation
     502:	0e 94 ca 05 	call	0xb94	; 0xb94 <timer2_init>
	adc_init();		// Set up ADC
     506:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <adc_init>
	#ifdef TRANSMIT_DEBUG_MODE
		uint8_t printf_value;
		stdout = &printf_stdout;
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <__iob+0x3>
     512:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <__iob+0x2>
		usart_init(UBRR_VALUE);
     516:	87 e6       	ldi	r24, 0x67	; 103
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 4d 01 	call	0x29a	; 0x29a <usart_init>
	#else
	#endif
	
	sei();
     51e:	78 94       	sei
				RX_sequence_complete = false;
			}
			else{
				// Wrong MOTOR ID is provided. Print Error Message.
				printf_value = RX_buffer[2];
				printf("VIOLATION: WRONG MOTOR ID '%d'\n", printf_value -'0');
     520:	0f 2e       	mov	r0, r31
     522:	fb ee       	ldi	r31, 0xEB	; 235
     524:	4f 2e       	mov	r4, r31
     526:	f2 e0       	ldi	r31, 0x02	; 2
     528:	5f 2e       	mov	r5, r31
     52a:	f0 2d       	mov	r31, r0
				memset(RX_buffer, 0, sizeof RX_buffer);
     52c:	0f 2e       	mov	r0, r31
     52e:	f6 e2       	ldi	r31, 0x26	; 38
     530:	7f 2e       	mov	r7, r31
     532:	f0 2d       	mov	r31, r0

    /* Main Loop */
    while (1) {
		
		// When buffer is filled with info.
		if(RX_sequence_complete){
     534:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <__data_end>
     538:	88 23       	and	r24, r24
     53a:	09 f4       	brne	.+2      	; 0x53e <main+0x5c>
     53c:	49 c2       	rjmp	.+1170   	; 0x9d0 <__stack+0xd1>
			bool req_found = false;
			bool clear_error = false;
			uint16_t numerical_req;
			uint8_t digitized_req[3];
			//Verify Motor ID...
			if(RX_buffer[1] == '"' && RX_buffer[2] == '3' && RX_buffer[3] == '"'){
     53e:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <RX_buffer+0x1>
     542:	82 32       	cpi	r24, 0x22	; 34
     544:	09 f0       	breq	.+2      	; 0x548 <main+0x66>
     546:	2e c2       	rjmp	.+1116   	; 0x9a4 <__stack+0xa5>
     548:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <RX_buffer+0x2>
     54c:	83 33       	cpi	r24, 0x33	; 51
     54e:	09 f0       	breq	.+2      	; 0x552 <main+0x70>
     550:	29 c2       	rjmp	.+1106   	; 0x9a4 <__stack+0xa5>
     552:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <RX_buffer+0x3>
     556:	82 32       	cpi	r24, 0x22	; 34
     558:	09 f0       	breq	.+2      	; 0x55c <main+0x7a>
     55a:	24 c2       	rjmp	.+1096   	; 0x9a4 <__stack+0xa5>
     55c:	e5 e0       	ldi	r30, 0x05	; 5
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	24 e0       	ldi	r18, 0x04	; 4
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	62 e0       	ldi	r22, 0x02	; 2
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	41 e0       	ldi	r20, 0x01	; 1
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	1c 86       	std	Y+12, r1	; 0x0c
     56e:	61 2c       	mov	r6, r1
							digitized_req[0] = 0;
							digitized_req[1] = 0;
							digitized_req[2] = (RX_buffer[i + 4]);
						}
						else if(RX_buffer[i + 6] == '"'){
							digitized_req[0] = 0;
     570:	d1 2c       	mov	r13, r1
     572:	c9 01       	movw	r24, r18
     574:	04 97       	sbiw	r24, 0x04	; 4
					is set to true. Knowing the position of command value in the fixed JSON structure, the program will
					fetch and store each of its digits into an array "digitized_req".
					*/
						
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
     576:	dc 01       	movw	r26, r24
     578:	a4 5e       	subi	r26, 0xE4	; 228
     57a:	bc 4f       	sbci	r27, 0xFC	; 252
     57c:	ac 91       	ld	r26, X
     57e:	a1 37       	cpi	r26, 0x71	; 113
     580:	09 f0       	breq	.+2      	; 0x584 <main+0xa2>
     582:	58 c0       	rjmp	.+176    	; 0x634 <main+0x152>
     584:	da 01       	movw	r26, r20
     586:	a4 5e       	subi	r26, 0xE4	; 228
     588:	bc 4f       	sbci	r27, 0xFC	; 252
     58a:	ac 91       	ld	r26, X
     58c:	a2 32       	cpi	r26, 0x22	; 34
     58e:	09 f0       	breq	.+2      	; 0x592 <main+0xb0>
     590:	51 c0       	rjmp	.+162    	; 0x634 <main+0x152>
     592:	db 01       	movw	r26, r22
     594:	a4 5e       	subi	r26, 0xE4	; 228
     596:	bc 4f       	sbci	r27, 0xFC	; 252
     598:	ac 91       	ld	r26, X
     59a:	aa 33       	cpi	r26, 0x3A	; 58
     59c:	09 f0       	breq	.+2      	; 0x5a0 <main+0xbe>
     59e:	4a c0       	rjmp	.+148    	; 0x634 <main+0x152>
     5a0:	d9 01       	movw	r26, r18
     5a2:	a5 5e       	subi	r26, 0xE5	; 229
     5a4:	bc 4f       	sbci	r27, 0xFC	; 252
     5a6:	ac 91       	ld	r26, X
     5a8:	a2 32       	cpi	r26, 0x22	; 34
     5aa:	09 f0       	breq	.+2      	; 0x5ae <main+0xcc>
     5ac:	43 c0       	rjmp	.+134    	; 0x634 <main+0x152>
						// req is present
						req_found = true;
						if(RX_buffer[i + 5] == '"'){
     5ae:	df 01       	movw	r26, r30
     5b0:	a4 5e       	subi	r26, 0xE4	; 228
     5b2:	bc 4f       	sbci	r27, 0xFC	; 252
     5b4:	1c 91       	ld	r17, X
     5b6:	12 32       	cpi	r17, 0x22	; 34
     5b8:	51 f4       	brne	.+20     	; 0x5ce <main+0xec>
							digitized_req[0] = 0;
							digitized_req[1] = 0;
							digitized_req[2] = (RX_buffer[i + 4]);
     5ba:	d9 01       	movw	r26, r18
     5bc:	a4 5e       	subi	r26, 0xE4	; 228
     5be:	bc 4f       	sbci	r27, 0xFC	; 252
     5c0:	fc 90       	ld	r15, X
     5c2:	ff 86       	std	Y+15, r15	; 0x0f
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
						if(RX_buffer[i + 5] == '"'){
							digitized_req[0] = 0;
							digitized_req[1] = 0;
     5c4:	de 86       	std	Y+14, r13	; 0x0e
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
						if(RX_buffer[i + 5] == '"'){
							digitized_req[0] = 0;
     5c6:	d8 8a       	std	Y+16, r13	; 0x10
					*/
						
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
     5c8:	66 24       	eor	r6, r6
     5ca:	63 94       	inc	r6
     5cc:	33 c0       	rjmp	.+102    	; 0x634 <main+0x152>
     5ce:	89 01       	movw	r16, r18
     5d0:	0e 5f       	subi	r16, 0xFE	; 254
     5d2:	1f 4f       	sbci	r17, 0xFF	; 255
						if(RX_buffer[i + 5] == '"'){
							digitized_req[0] = 0;
							digitized_req[1] = 0;
							digitized_req[2] = (RX_buffer[i + 4]);
						}
						else if(RX_buffer[i + 6] == '"'){
     5d4:	d8 01       	movw	r26, r16
     5d6:	a4 5e       	subi	r26, 0xE4	; 228
     5d8:	bc 4f       	sbci	r27, 0xFC	; 252
     5da:	fc 90       	ld	r15, X
     5dc:	af 2d       	mov	r26, r15
     5de:	a2 32       	cpi	r26, 0x22	; 34
     5e0:	79 f4       	brne	.+30     	; 0x600 <main+0x11e>
							digitized_req[0] = 0;
							digitized_req[1] = (RX_buffer[i + 4]);
     5e2:	89 01       	movw	r16, r18
     5e4:	04 5e       	subi	r16, 0xE4	; 228
     5e6:	1c 4f       	sbci	r17, 0xFC	; 252
     5e8:	d8 01       	movw	r26, r16
     5ea:	bc 91       	ld	r27, X
     5ec:	be 87       	std	Y+14, r27	; 0x0e
							digitized_req[2] = (RX_buffer[i + 5]);
     5ee:	df 01       	movw	r26, r30
     5f0:	a4 5e       	subi	r26, 0xE4	; 228
     5f2:	bc 4f       	sbci	r27, 0xFC	; 252
     5f4:	fc 90       	ld	r15, X
     5f6:	ff 86       	std	Y+15, r15	; 0x0f
							digitized_req[0] = 0;
							digitized_req[1] = 0;
							digitized_req[2] = (RX_buffer[i + 4]);
						}
						else if(RX_buffer[i + 6] == '"'){
							digitized_req[0] = 0;
     5f8:	d8 8a       	std	Y+16, r13	; 0x10
					*/
						
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
     5fa:	66 24       	eor	r6, r6
     5fc:	63 94       	inc	r6
     5fe:	1a c0       	rjmp	.+52     	; 0x634 <main+0x152>
						else if(RX_buffer[i + 6] == '"'){
							digitized_req[0] = 0;
							digitized_req[1] = (RX_buffer[i + 4]);
							digitized_req[2] = (RX_buffer[i + 5]);
						}
						else if(RX_buffer[i + 7] == '"'){
     600:	d9 01       	movw	r26, r18
     602:	a1 5e       	subi	r26, 0xE1	; 225
     604:	bc 4f       	sbci	r27, 0xFC	; 252
     606:	bc 91       	ld	r27, X
     608:	b2 32       	cpi	r27, 0x22	; 34
     60a:	91 f4       	brne	.+36     	; 0x630 <main+0x14e>
							digitized_req[0] = (RX_buffer[i + 4]);
     60c:	d9 01       	movw	r26, r18
     60e:	a4 5e       	subi	r26, 0xE4	; 228
     610:	bc 4f       	sbci	r27, 0xFC	; 252
     612:	bc 91       	ld	r27, X
     614:	b8 8b       	std	Y+16, r27	; 0x10
							digitized_req[1] = (RX_buffer[i + 5]);
     616:	df 01       	movw	r26, r30
     618:	a4 5e       	subi	r26, 0xE4	; 228
     61a:	bc 4f       	sbci	r27, 0xFC	; 252
     61c:	fc 90       	ld	r15, X
     61e:	fe 86       	std	Y+14, r15	; 0x0e
							digitized_req[2] = (RX_buffer[i + 6]);
     620:	d8 01       	movw	r26, r16
     622:	a4 5e       	subi	r26, 0xE4	; 228
     624:	bc 4f       	sbci	r27, 0xFC	; 252
     626:	1c 91       	ld	r17, X
     628:	1f 87       	std	Y+15, r17	; 0x0f
					*/
						
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
     62a:	66 24       	eor	r6, r6
     62c:	63 94       	inc	r6
     62e:	02 c0       	rjmp	.+4      	; 0x634 <main+0x152>
     630:	66 24       	eor	r6, r6
     632:	63 94       	inc	r6
							digitized_req[1] = (RX_buffer[i + 5]);
							digitized_req[2] = (RX_buffer[i + 6]);
						}
					}
										
					if(RX_buffer[i] == 'r' && (RX_buffer[i + 1] == '"') && (RX_buffer[i + 2] == ':')&&(RX_buffer[i + 4] == 'e')&&(RX_buffer[i + 5] == 'w')){
     634:	dc 01       	movw	r26, r24
     636:	a4 5e       	subi	r26, 0xE4	; 228
     638:	bc 4f       	sbci	r27, 0xFC	; 252
     63a:	8c 91       	ld	r24, X
     63c:	82 37       	cpi	r24, 0x72	; 114
     63e:	d1 f4       	brne	.+52     	; 0x674 <main+0x192>
     640:	da 01       	movw	r26, r20
     642:	a4 5e       	subi	r26, 0xE4	; 228
     644:	bc 4f       	sbci	r27, 0xFC	; 252
     646:	8c 91       	ld	r24, X
     648:	82 32       	cpi	r24, 0x22	; 34
     64a:	a1 f4       	brne	.+40     	; 0x674 <main+0x192>
     64c:	db 01       	movw	r26, r22
     64e:	a4 5e       	subi	r26, 0xE4	; 228
     650:	bc 4f       	sbci	r27, 0xFC	; 252
     652:	8c 91       	ld	r24, X
     654:	8a 33       	cpi	r24, 0x3A	; 58
     656:	71 f4       	brne	.+28     	; 0x674 <main+0x192>
     658:	d9 01       	movw	r26, r18
     65a:	a4 5e       	subi	r26, 0xE4	; 228
     65c:	bc 4f       	sbci	r27, 0xFC	; 252
     65e:	8c 91       	ld	r24, X
     660:	85 36       	cpi	r24, 0x65	; 101
     662:	41 f4       	brne	.+16     	; 0x674 <main+0x192>
     664:	df 01       	movw	r26, r30
     666:	a4 5e       	subi	r26, 0xE4	; 228
     668:	bc 4f       	sbci	r27, 0xFC	; 252
     66a:	8c 91       	ld	r24, X
     66c:	87 37       	cpi	r24, 0x77	; 119
     66e:	11 f4       	brne	.+4      	; 0x674 <main+0x192>
						//clear error warning is present...
						clear_error = true;
     670:	11 e0       	ldi	r17, 0x01	; 1
     672:	1c 87       	std	Y+12, r17	; 0x0c
     674:	4f 5f       	subi	r20, 0xFF	; 255
     676:	5f 4f       	sbci	r21, 0xFF	; 255
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	2f 5f       	subi	r18, 0xFF	; 255
     67e:	3f 4f       	sbci	r19, 0xFF	; 255
     680:	31 96       	adiw	r30, 0x01	; 1
			uint16_t numerical_req;
			uint8_t digitized_req[3];
			//Verify Motor ID...
			if(RX_buffer[1] == '"' && RX_buffer[2] == '3' && RX_buffer[3] == '"'){
				// read through buffer contents
				for(uint8_t i = 0; i < JSON_FIXED_BUFFER_SIZE; i++){
     682:	2a 32       	cpi	r18, 0x2A	; 42
     684:	31 05       	cpc	r19, r1
     686:	09 f0       	breq	.+2      	; 0x68a <main+0x1a8>
     688:	74 cf       	rjmp	.-280    	; 0x572 <main+0x90>
				OVERFLOW MODE: The timed-pulse output changes to overflow mode when the flow rate command does not fall into any 
								of the specified region. The output is set to default mode (10Hz, 50% Duty Cycle).    
				*/
					
				// Finished reading through the buffer...
				numerical_req = (digitized_req[0]-'0') * 100 + (digitized_req[1]-'0') * 10 + (digitized_req[2]-'0');
     68a:	28 89       	ldd	r18, Y+16	; 0x10
     68c:	82 2f       	mov	r24, r18
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	c0 97       	sbiw	r24, 0x30	; 48
     692:	a4 e6       	ldi	r26, 0x64	; 100
     694:	a8 9f       	mul	r26, r24
     696:	10 01       	movw	r2, r0
     698:	a9 9f       	mul	r26, r25
     69a:	30 0c       	add	r3, r0
     69c:	11 24       	eor	r1, r1
     69e:	be 85       	ldd	r27, Y+14	; 0x0e
     6a0:	8b 2f       	mov	r24, r27
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	c0 97       	sbiw	r24, 0x30	; 48
     6a6:	ac 01       	movw	r20, r24
     6a8:	44 0f       	add	r20, r20
     6aa:	55 1f       	adc	r21, r21
     6ac:	9c 01       	movw	r18, r24
     6ae:	22 0f       	add	r18, r18
     6b0:	33 1f       	adc	r19, r19
     6b2:	22 0f       	add	r18, r18
     6b4:	33 1f       	adc	r19, r19
     6b6:	22 0f       	add	r18, r18
     6b8:	33 1f       	adc	r19, r19
     6ba:	ca 01       	movw	r24, r20
     6bc:	82 0f       	add	r24, r18
     6be:	93 1f       	adc	r25, r19
     6c0:	82 0d       	add	r24, r2
     6c2:	93 1d       	adc	r25, r3
     6c4:	ef 85       	ldd	r30, Y+15	; 0x0f
     6c6:	2e 2e       	mov	r2, r30
     6c8:	31 2c       	mov	r3, r1
     6ca:	f0 e3       	ldi	r31, 0x30	; 48
     6cc:	2f 1a       	sub	r2, r31
     6ce:	31 08       	sbc	r3, r1
     6d0:	28 0e       	add	r2, r24
     6d2:	39 1e       	adc	r3, r25
				// Apply new operating condition to the machine
				// Only change stroke frequency when REQ is acquired...
				if(req_found){
     6d4:	66 20       	and	r6, r6
     6d6:	09 f4       	brne	.+2      	; 0x6da <main+0x1f8>
     6d8:	89 c0       	rjmp	.+274    	; 0x7ec <main+0x30a>
					// If command is "MAXIMUM OUTPUT"...
					if(numerical_req == TIMER_MAX){
     6da:	1f ef       	ldi	r17, 0xFF	; 255
     6dc:	21 16       	cp	r2, r17
     6de:	31 04       	cpc	r3, r1
     6e0:	51 f4       	brne	.+20     	; 0x6f6 <main+0x214>
						PULSE_0_REACTIVATE_TIME = 133;
     6e2:	25 e8       	ldi	r18, 0x85	; 133
     6e4:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 67;
     6e8:	83 e4       	ldi	r24, 0x43	; 67
     6ea:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = 34;
     6ee:	92 e2       	ldi	r25, 0x22	; 34
     6f0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <PULSE_KILL_TIME>
     6f4:	7b c0       	rjmp	.+246    	; 0x7ec <main+0x30a>
					}
					// If command is "NO OUTPUT"...
					else if(numerical_req == TIMER_LOW){
     6f6:	21 14       	cp	r2, r1
     6f8:	31 04       	cpc	r3, r1
     6fa:	49 f4       	brne	.+18     	; 0x70e <main+0x22c>
						PULSE_0_REACTIVATE_TIME = 200;
     6fc:	a8 ec       	ldi	r26, 0xC8	; 200
     6fe:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 100;
     702:	b4 e6       	ldi	r27, 0x64	; 100
     704:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = 0;
     708:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <PULSE_KILL_TIME>
     70c:	6f c0       	rjmp	.+222    	; 0x7ec <main+0x30a>
					}
					// If command is between 1 to 177, set frequency to 10Hz, calculate the DUTY CYCLE equivalent...
					else if(numerical_req > TIMER_LOW && numerical_req != TIMER_LOW && numerical_req <= TIMER_LOW_FLOW){
     70e:	c1 01       	movw	r24, r2
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	81 3b       	cpi	r24, 0xB1	; 177
     714:	91 05       	cpc	r25, r1
     716:	60 f5       	brcc	.+88     	; 0x770 <main+0x28e>
						PULSE_0_REACTIVATE_TIME = 200;
     718:	e8 ec       	ldi	r30, 0xC8	; 200
     71a:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 100;
     71e:	f4 e6       	ldi	r31, 0x64	; 100
     720:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = ((double)(0.3 * numerical_req) * PULSE_0_REACTIVATE_TIME)/200;
     724:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     728:	b1 01       	movw	r22, r2
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 f1 06 	call	0xde2	; 0xde2 <__floatunsisf>
     732:	2a e9       	ldi	r18, 0x9A	; 154
     734:	39 e9       	ldi	r19, 0x99	; 153
     736:	49 e9       	ldi	r20, 0x99	; 153
     738:	5e e3       	ldi	r21, 0x3E	; 62
     73a:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     73e:	6b 01       	movw	r12, r22
     740:	7c 01       	movw	r14, r24
     742:	61 2f       	mov	r22, r17
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatsisf>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	c7 01       	movw	r24, r14
     754:	b6 01       	movw	r22, r12
     756:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	48 e4       	ldi	r20, 0x48	; 72
     760:	53 e4       	ldi	r21, 0x43	; 67
     762:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3>
     766:	0e 94 c2 06 	call	0xd84	; 0xd84 <__fixunssfsi>
     76a:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <PULSE_KILL_TIME>
     76e:	3e c0       	rjmp	.+124    	; 0x7ec <main+0x30a>
					}
					// If command is between 178 to 254, set frequency to 15Hz, calculate the DUTY CYCLE equivalent...
					else if(numerical_req < TIMER_MAX && numerical_req != TIMER_MAX && numerical_req >= TIMER_HIGH_FLOW){
     770:	c1 01       	movw	r24, r2
     772:	82 5b       	subi	r24, 0xB2	; 178
     774:	91 09       	sbc	r25, r1
     776:	8d 34       	cpi	r24, 0x4D	; 77
     778:	91 05       	cpc	r25, r1
     77a:	78 f5       	brcc	.+94     	; 0x7da <main+0x2f8>
						PULSE_0_REACTIVATE_TIME = 133;
     77c:	0f 2e       	mov	r0, r31
     77e:	f5 e8       	ldi	r31, 0x85	; 133
     780:	ff 2e       	mov	r15, r31
     782:	f0 2d       	mov	r31, r0
     784:	f0 92 10 01 	sts	0x0110, r15	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 67;
     788:	13 e4       	ldi	r17, 0x43	; 67
     78a:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = ((double)(0.3 * numerical_req) * PULSE_0_REACTIVATE_TIME)/200; //need to update this line... does more duty cycle produce more stroke distance?		
     78e:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     792:	b1 01       	movw	r22, r2
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 f1 06 	call	0xde2	; 0xde2 <__floatunsisf>
     79c:	2a e9       	ldi	r18, 0x9A	; 154
     79e:	39 e9       	ldi	r19, 0x99	; 153
     7a0:	49 e9       	ldi	r20, 0x99	; 153
     7a2:	5e e3       	ldi	r21, 0x3E	; 62
     7a4:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     7a8:	6b 01       	movw	r12, r22
     7aa:	7c 01       	movw	r14, r24
     7ac:	61 2f       	mov	r22, r17
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatsisf>
     7b8:	9b 01       	movw	r18, r22
     7ba:	ac 01       	movw	r20, r24
     7bc:	c7 01       	movw	r24, r14
     7be:	b6 01       	movw	r22, r12
     7c0:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	48 e4       	ldi	r20, 0x48	; 72
     7ca:	53 e4       	ldi	r21, 0x43	; 67
     7cc:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3>
     7d0:	0e 94 c2 06 	call	0xd84	; 0xd84 <__fixunssfsi>
     7d4:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <PULSE_KILL_TIME>
     7d8:	09 c0       	rjmp	.+18     	; 0x7ec <main+0x30a>
					}
					// If command is invalid, reset to default frequency...
					else{
						PULSE_0_REACTIVATE_TIME = 80;
     7da:	20 e5       	ldi	r18, 0x50	; 80
     7dc:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 40;
     7e0:	88 e2       	ldi	r24, 0x28	; 40
     7e2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = 20;
     7e6:	94 e1       	ldi	r25, 0x14	; 20
     7e8:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <PULSE_KILL_TIME>
				
				When no "Req" was defined, or if "Req" was greater than 256 in the master-slave input, the corresponding report 
				will return "000". Otherwise, the program will return   
				*/
				// Analog to Digital conversion on the ADC, and display its output to the PuTTy.
				double coil_voltage = calculate_voltage(adc_digitize(raw_ADC_output_PC0));
     7ec:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <raw_ADC_output_PC0>
     7f0:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <raw_ADC_output_PC0+0x1>
     7f4:	0e 94 02 01 	call	0x204	; 0x204 <adc_digitize>
     7f8:	0e 94 14 01 	call	0x228	; 0x228 <calculate_voltage>
     7fc:	16 2f       	mov	r17, r22
     7fe:	79 87       	std	Y+9, r23	; 0x09
     800:	8a 87       	std	Y+10, r24	; 0x0a
     802:	9b 87       	std	Y+11, r25	; 0x0b
				double coil_current = calculate_current(adc_digitize(raw_ADC_output_PC5));
     804:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <raw_ADC_output_PC5>
     808:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <raw_ADC_output_PC5+0x1>
     80c:	0e 94 02 01 	call	0x204	; 0x204 <adc_digitize>
     810:	0e 94 1b 01 	call	0x236	; 0x236 <calculate_current>
     814:	4b 01       	movw	r8, r22
     816:	5c 01       	movw	r10, r24
				double expected_power = calculate_power(coil_voltage, debug_COIL_CURRENT, PULSE_KILL_TIME, PULSE_2_START_TIME);
     818:	e0 90 0f 01 	lds	r14, 0x010F	; 0x80010f <PULSE_2_START_TIME>
     81c:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	5f e3       	ldi	r21, 0x3F	; 63
     828:	a9 85       	ldd	r26, Y+9	; 0x09
     82a:	fa 85       	ldd	r31, Y+10	; 0x0a
     82c:	eb 85       	ldd	r30, Y+11	; 0x0b
     82e:	61 2f       	mov	r22, r17
     830:	7a 2f       	mov	r23, r26
     832:	8f 2f       	mov	r24, r31
     834:	9e 2f       	mov	r25, r30
     836:	0e 94 22 01 	call	0x244	; 0x244 <calculate_power>
     83a:	6b 01       	movw	r12, r22
     83c:	7c 01       	movw	r14, r24
					bool error_collision = false;
					bool error_jammed = false;
				#endif
				
				// Fetch Motor ID from the buffer...
				uint8_t MOTOR_ID = RX_buffer[2] - '0';
     83e:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <RX_buffer+0x2>
     842:	80 53       	subi	r24, 0x30	; 48
     844:	8d 87       	std	Y+13, r24	; 0x0d
				// Fetch frequency from pulse reactivation time...
				double frequency = (1 / (0.5 * PULSE_0_REACTIVATE_TIME)) * 1000;
     846:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatsisf>
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	5f e3       	ldi	r21, 0x3F	; 63
     85c:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     860:	9b 01       	movw	r18, r22
     862:	ac 01       	movw	r20, r24
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	80 e8       	ldi	r24, 0x80	; 128
     86a:	9f e3       	ldi	r25, 0x3F	; 63
     86c:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3>
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	4a e7       	ldi	r20, 0x7A	; 122
     876:	54 e4       	ldi	r21, 0x44	; 68
     878:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     87c:	69 83       	std	Y+1, r22	; 0x01
     87e:	7a 83       	std	Y+2, r23	; 0x02
     880:	8b 83       	std	Y+3, r24	; 0x03
     882:	9c 83       	std	Y+4, r25	; 0x04
				// Fetch Current Flow Rate from operating conditions...
				uint8_t Current_FL;
				// If the motor is running at low output mode OR no output mode...
				if(frequency <= 10){
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	40 e2       	ldi	r20, 0x20	; 32
     88a:	51 e4       	ldi	r21, 0x41	; 65
     88c:	0e 94 4b 06 	call	0xc96	; 0xc96 <__cmpsf2>
     890:	18 16       	cp	r1, r24
     892:	54 f1       	brlt	.+84     	; 0x8e8 <main+0x406>
					Current_FL = (200 * PULSE_KILL_TIME) / (0.3 * PULSE_0_REACTIVATE_TIME);
     894:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     898:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     89c:	a8 ec       	ldi	r26, 0xC8	; 200
     89e:	a6 9f       	mul	r26, r22
     8a0:	b0 01       	movw	r22, r0
     8a2:	11 24       	eor	r1, r1
     8a4:	07 2e       	mov	r0, r23
     8a6:	00 0c       	add	r0, r0
     8a8:	88 0b       	sbc	r24, r24
     8aa:	99 0b       	sbc	r25, r25
     8ac:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatsisf>
     8b0:	6d 83       	std	Y+5, r22	; 0x05
     8b2:	7e 83       	std	Y+6, r23	; 0x06
     8b4:	8f 83       	std	Y+7, r24	; 0x07
     8b6:	98 87       	std	Y+8, r25	; 0x08
     8b8:	60 2f       	mov	r22, r16
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatsisf>
     8c4:	2a e9       	ldi	r18, 0x9A	; 154
     8c6:	39 e9       	ldi	r19, 0x99	; 153
     8c8:	49 e9       	ldi	r20, 0x99	; 153
     8ca:	5e e3       	ldi	r21, 0x3E	; 62
     8cc:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     8d0:	9b 01       	movw	r18, r22
     8d2:	ac 01       	movw	r20, r24
     8d4:	6d 81       	ldd	r22, Y+5	; 0x05
     8d6:	7e 81       	ldd	r23, Y+6	; 0x06
     8d8:	8f 81       	ldd	r24, Y+7	; 0x07
     8da:	98 85       	ldd	r25, Y+8	; 0x08
     8dc:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3>
     8e0:	0e 94 c2 06 	call	0xd84	; 0xd84 <__fixunssfsi>
     8e4:	6d 83       	std	Y+5, r22	; 0x05
     8e6:	3b c0       	rjmp	.+118    	; 0x95e <__stack+0x5f>
				}
				// If the motor is running at high output mode OR maximum output mode..
				else if(frequency >= 15){
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e7       	ldi	r20, 0x70	; 112
     8ee:	51 e4       	ldi	r21, 0x41	; 65
     8f0:	69 81       	ldd	r22, Y+1	; 0x01
     8f2:	7a 81       	ldd	r23, Y+2	; 0x02
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	9c 81       	ldd	r25, Y+4	; 0x04
     8f8:	0e 94 a3 07 	call	0xf46	; 0xf46 <__gesf2>
     8fc:	88 23       	and	r24, r24
     8fe:	7c f1       	brlt	.+94     	; 0x95e <__stack+0x5f>
					Current_FL = (200 * PULSE_KILL_TIME) / (0.3 * PULSE_0_REACTIVATE_TIME) + 85; // This needs to be updated as equations for HIGH output mode becomes complete...
     900:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     904:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     908:	b8 ec       	ldi	r27, 0xC8	; 200
     90a:	b6 9f       	mul	r27, r22
     90c:	b0 01       	movw	r22, r0
     90e:	11 24       	eor	r1, r1
     910:	07 2e       	mov	r0, r23
     912:	00 0c       	add	r0, r0
     914:	88 0b       	sbc	r24, r24
     916:	99 0b       	sbc	r25, r25
     918:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatsisf>
     91c:	6d 83       	std	Y+5, r22	; 0x05
     91e:	7e 83       	std	Y+6, r23	; 0x06
     920:	8f 83       	std	Y+7, r24	; 0x07
     922:	98 87       	std	Y+8, r25	; 0x08
     924:	60 2f       	mov	r22, r16
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 f3 06 	call	0xde6	; 0xde6 <__floatsisf>
     930:	2a e9       	ldi	r18, 0x9A	; 154
     932:	39 e9       	ldi	r19, 0x99	; 153
     934:	49 e9       	ldi	r20, 0x99	; 153
     936:	5e e3       	ldi	r21, 0x3E	; 62
     938:	0e 94 a8 07 	call	0xf50	; 0xf50 <__mulsf3>
     93c:	9b 01       	movw	r18, r22
     93e:	ac 01       	movw	r20, r24
     940:	6d 81       	ldd	r22, Y+5	; 0x05
     942:	7e 81       	ldd	r23, Y+6	; 0x06
     944:	8f 81       	ldd	r24, Y+7	; 0x07
     946:	98 85       	ldd	r25, Y+8	; 0x08
     948:	0e 94 50 06 	call	0xca0	; 0xca0 <__divsf3>
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	4a ea       	ldi	r20, 0xAA	; 170
     952:	52 e4       	ldi	r21, 0x42	; 66
     954:	0e 94 df 05 	call	0xbbe	; 0xbbe <__addsf3>
     958:	0e 94 c2 06 	call	0xd84	; 0xd84 <__fixunssfsi>
     95c:	6d 83       	std	Y+5, r22	; 0x05
				}
				
				// Transmit Report...
				usart_TX_data(MOTOR_ID, Current_FL, numerical_req, frequency, expected_power, coil_current, coil_voltage, req_found, clear_error, error_collision, error_jammed);
     95e:	1f 92       	push	r1
     960:	1f 92       	push	r1
     962:	ec 85       	ldd	r30, Y+12	; 0x0c
     964:	ef 93       	push	r30
     966:	6f 92       	push	r6
     968:	fb 85       	ldd	r31, Y+11	; 0x0b
     96a:	ff 93       	push	r31
     96c:	2a 85       	ldd	r18, Y+10	; 0x0a
     96e:	2f 93       	push	r18
     970:	89 85       	ldd	r24, Y+9	; 0x09
     972:	8f 93       	push	r24
     974:	1f 93       	push	r17
     976:	09 81       	ldd	r16, Y+1	; 0x01
     978:	1a 81       	ldd	r17, Y+2	; 0x02
     97a:	2b 81       	ldd	r18, Y+3	; 0x03
     97c:	3c 81       	ldd	r19, Y+4	; 0x04
     97e:	a1 01       	movw	r20, r2
     980:	6d 81       	ldd	r22, Y+5	; 0x05
     982:	8d 85       	ldd	r24, Y+13	; 0x0d
     984:	0e 94 8a 01 	call	0x314	; 0x314 <usart_TX_data>
				// When all the procedures with the sequence is complete...
				memset(RX_buffer, 0, sizeof RX_buffer);
     988:	ac e1       	ldi	r26, 0x1C	; 28
     98a:	b3 e0       	ldi	r27, 0x03	; 3
     98c:	e7 2d       	mov	r30, r7
     98e:	1d 92       	st	X+, r1
     990:	ea 95       	dec	r30
     992:	e9 f7       	brne	.-6      	; 0x98e <__stack+0x8f>
				RX_sequence_complete = false;
     994:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <__data_end>
			bool req_found = false;
			bool clear_error = false;
			uint16_t numerical_req;
			uint8_t digitized_req[3];
			//Verify Motor ID...
			if(RX_buffer[1] == '"' && RX_buffer[2] == '3' && RX_buffer[3] == '"'){
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	16 c0       	rjmp	.+44     	; 0x9d0 <__stack+0xd1>
				memset(RX_buffer, 0, sizeof RX_buffer);
				RX_sequence_complete = false;
			}
			else{
				// Wrong MOTOR ID is provided. Print Error Message.
				printf_value = RX_buffer[2];
     9a4:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <RX_buffer+0x2>
				printf("VIOLATION: WRONG MOTOR ID '%d'\n", printf_value -'0');
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	c0 97       	sbiw	r24, 0x30	; 48
     9ac:	9f 93       	push	r25
     9ae:	8f 93       	push	r24
     9b0:	5f 92       	push	r5
     9b2:	4f 92       	push	r4
     9b4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <printf>
				memset(RX_buffer, 0, sizeof RX_buffer);
     9b8:	ac e1       	ldi	r26, 0x1C	; 28
     9ba:	b3 e0       	ldi	r27, 0x03	; 3
     9bc:	e7 2d       	mov	r30, r7
     9be:	1d 92       	st	X+, r1
     9c0:	ea 95       	dec	r30
     9c2:	e9 f7       	brne	.-6      	; 0x9be <__stack+0xbf>
				RX_sequence_complete = false;
     9c4:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <__data_end>
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
			}
		}
		#ifdef XPLAINED_MINI_LED_STROBE
			PORTB ^= (1 << PB5);
     9d0:	95 b1       	in	r25, 0x05	; 5
     9d2:	80 e2       	ldi	r24, 0x20	; 32
     9d4:	89 27       	eor	r24, r25
     9d6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d8:	ff ef       	ldi	r31, 0xFF	; 255
     9da:	11 ee       	ldi	r17, 0xE1	; 225
     9dc:	24 e0       	ldi	r18, 0x04	; 4
     9de:	f1 50       	subi	r31, 0x01	; 1
     9e0:	10 40       	sbci	r17, 0x00	; 0
     9e2:	20 40       	sbci	r18, 0x00	; 0
     9e4:	e1 f7       	brne	.-8      	; 0x9de <__stack+0xdf>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <__stack+0xe9>
     9e8:	00 00       	nop
     9ea:	a4 cd       	rjmp	.-1208   	; 0x534 <main+0x52>

000009ec <__vector_18>:
a. The received data (an ASCII character) is stored in an unsigned character buffer (usartRX).
b. The index counter for the buffer is incremented for the upcoming data.
c. On the 28th count (i.e. one sequence of master-slave communication is complete), reset the index position to overwrite the
	first character of the buffer.
	*/
ISR(USART_RX_vect){
     9ec:	1f 92       	push	r1
     9ee:	0f 92       	push	r0
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	0f 92       	push	r0
     9f4:	11 24       	eor	r1, r1
     9f6:	8f 93       	push	r24
     9f8:	ef 93       	push	r30
     9fa:	ff 93       	push	r31
	// Reception is complete... Need to find a way to extract information.
	if(usart_RX_index != JSON_FIXED_BUFFER_SIZE - 1){			// Starting from index of zero, the buffer will be filled with 
     9fc:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <usart_RX_index>
     a00:	85 32       	cpi	r24, 0x25	; 37
     a02:	71 f0       	breq	.+28     	; 0xa20 <__vector_18+0x34>
		RX_buffer[usart_RX_index] = UDR0;						// transmission up to 37th index.
     a04:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <usart_RX_index>
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a0e:	e4 5e       	subi	r30, 0xE4	; 228
     a10:	fc 4f       	sbci	r31, 0xFC	; 252
     a12:	80 83       	st	Z, r24
		usart_RX_index++;
     a14:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <usart_RX_index>
     a18:	8f 5f       	subi	r24, 0xFF	; 255
     a1a:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <usart_RX_index>
     a1e:	11 c0       	rjmp	.+34     	; 0xa42 <__vector_18+0x56>
	}
	else if (usart_RX_index == JSON_FIXED_BUFFER_SIZE - 1){
     a20:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <usart_RX_index>
     a24:	85 32       	cpi	r24, 0x25	; 37
     a26:	69 f4       	brne	.+26     	; 0xa42 <__vector_18+0x56>
		// If the index counter reaches 38, which is larger than the maximum length of the fixed JSON RX...
		RX_buffer[usart_RX_index] = UDR0;						 // Record the first bit of the RX to the buffer...
     a28:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <usart_RX_index>
     a2c:	f0 e0       	ldi	r31, 0x00	; 0
     a2e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a32:	e4 5e       	subi	r30, 0xE4	; 228
     a34:	fc 4f       	sbci	r31, 0xFC	; 252
     a36:	80 83       	st	Z, r24
		RX_sequence_complete = true;							 // Flag to main loop that one cycle of RX is complete.
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <__data_end>
		usart_RX_index = 0;										 // Reset the Index back to zero (hence allow new sequence of RX)...
     a3e:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <usart_RX_index>
	}
		
}
     a42:	ff 91       	pop	r31
     a44:	ef 91       	pop	r30
     a46:	8f 91       	pop	r24
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	0f 90       	pop	r0
     a4e:	1f 90       	pop	r1
     a50:	18 95       	reti

00000a52 <__vector_7>:
/* The following conditions are critical to correct operation of the system. 
a. When macro ENABLE_PRINTF is defined, Pulse Modulation will behave unexpectedly due to long delay between global interrupt 
	disable and global interrupt enable caused by printf function. To ensure correct functionality of the Pulse Modulation, 
	Macro ENABLE_PRINTF must first be undefined.*/
	
ISR(TIMER2_COMPA_vect){
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	0f 92       	push	r0
     a5a:	11 24       	eor	r1, r1
     a5c:	8f 93       	push	r24
     a5e:	9f 93       	push	r25
	if(MATCH_COUNTER_T2 == PULSE_0_START_TIME){
     a60:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <MATCH_COUNTER_T2>
     a64:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <PULSE_0_START_TIME>
     a68:	98 13       	cpse	r25, r24
     a6a:	03 c0       	rjmp	.+6      	; 0xa72 <__vector_7+0x20>
		PORTB &= ~(1 << PB3);						// Deactivate Output on PB3
     a6c:	2b 98       	cbi	0x05, 3	; 5
		PORTD |= (1 << PD6);						// Activate Output on PD6
     a6e:	5e 9a       	sbi	0x0b, 6	; 11
     a70:	15 c0       	rjmp	.+42     	; 0xa9c <__vector_7+0x4a>
	}
	else if(MATCH_COUNTER_T2 == PULSE_2_START_TIME){
     a72:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <MATCH_COUNTER_T2>
     a76:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <PULSE_2_START_TIME>
     a7a:	98 13       	cpse	r25, r24
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <__vector_7+0x32>
		PORTD &= ~(1 << PD6);						// Deactivate Output on PD6
     a7e:	5e 98       	cbi	0x0b, 6	; 11
		PORTB |= (1 << PB3);						// Activate Output on PB3
     a80:	2b 9a       	sbi	0x05, 3	; 5
     a82:	0c c0       	rjmp	.+24     	; 0xa9c <__vector_7+0x4a>
	}
	else if(MATCH_COUNTER_T2 == PULSE_0_REACTIVATE_TIME){
     a84:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <MATCH_COUNTER_T2>
     a88:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     a8c:	98 13       	cpse	r25, r24
     a8e:	06 c0       	rjmp	.+12     	; 0xa9c <__vector_7+0x4a>
		PORTB &= ~(1 << PB3);						// Deactivate Output on PB3
     a90:	2b 98       	cbi	0x05, 3	; 5
		PORTD |=  (1 << PD6);						// Activate Output on PD6
     a92:	5e 9a       	sbi	0x0b, 6	; 11
		MATCH_COUNTER_T2 = PULSE_0_START_TIME;		// Reset counter to zero
     a94:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <PULSE_0_START_TIME>
     a98:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <MATCH_COUNTER_T2>
	}
}
     a9c:	9f 91       	pop	r25
     a9e:	8f 91       	pop	r24
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	0f 90       	pop	r0
     aa6:	1f 90       	pop	r1
     aa8:	18 95       	reti

00000aaa <__vector_8>:

ISR(TIMER2_COMPB_vect){
     aaa:	1f 92       	push	r1
     aac:	0f 92       	push	r0
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	0f 92       	push	r0
     ab2:	11 24       	eor	r1, r1
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	8f 93       	push	r24
     abc:	9f 93       	push	r25
	if(MATCH_COUNTER_T2 == PULSE_KILL_TIME){
     abe:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <MATCH_COUNTER_T2>
     ac2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     ac6:	98 13       	cpse	r25, r24
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <__vector_8+0x22>
		PORTD &= ~(1 << PD6);						// Deactivate Output PD6
     aca:	5e 98       	cbi	0x0b, 6	; 11
	}
	if(MATCH_COUNTER_T2 == PULSE_KILL_TIME + PULSE_2_START_TIME){
     acc:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <MATCH_COUNTER_T2>
     ad0:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     ad4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <PULSE_2_START_TIME>
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	84 0f       	add	r24, r20
     ade:	91 1d       	adc	r25, r1
     ae0:	28 17       	cp	r18, r24
     ae2:	39 07       	cpc	r19, r25
     ae4:	09 f4       	brne	.+2      	; 0xae8 <__vector_8+0x3e>
		PORTB &= ~(1 << PB3);
     ae6:	2b 98       	cbi	0x05, 3	; 5
	}
	MATCH_COUNTER_T2++;
     ae8:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <MATCH_COUNTER_T2>
     aec:	8f 5f       	subi	r24, 0xFF	; 255
     aee:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <MATCH_COUNTER_T2>
}
     af2:	9f 91       	pop	r25
     af4:	8f 91       	pop	r24
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <__vector_21>:
	
/*** Analog to Digital Conversion Complete Interrupt ***/
ISR(ADC_vect){
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	8f 93       	push	r24
     b12:	9f 93       	push	r25
     b14:	ef 93       	push	r30
     b16:	ff 93       	push	r31
	/*** WARNING ***/
	/* The following conditions are critical to correct operation of the system.
	a. As of 27.09.18. the feature to sample 24 points across the input waveform is not yet tested. */
	#ifdef ADC_DEBUG_MODE
	// Debugger Mode...
		if (ADC_next_channel == ADC_COIL_VOLTAGE_CHANNEL){
     b18:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <ADC_next_channel>
     b1c:	81 11       	cpse	r24, r1
     b1e:	16 c0       	rjmp	.+44     	; 0xb4c <__vector_21+0x46>
			raw_ADC_output_PC0 = ADC;
     b20:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     b24:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     b28:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <raw_ADC_output_PC0+0x1>
     b2c:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <raw_ADC_output_PC0>
			debug_ADC_channel = ADC_next_channel;
     b30:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <debug_ADC_channel>
			ADC_next_channel = ADC_COIL_CURRENT_CHANNEL;	// Next conversion is coil current shunt
     b34:	85 e0       	ldi	r24, 0x05	; 5
     b36:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <ADC_next_channel>
			ADMUX &= 0xf0;									// Reset to Channel 0
     b3a:	ec e7       	ldi	r30, 0x7C	; 124
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	80 7f       	andi	r24, 0xF0	; 240
     b42:	80 83       	st	Z, r24
			ADMUX |= 0x05;									// Set to Channel 5. (coil current shunt)
     b44:	80 81       	ld	r24, Z
     b46:	85 60       	ori	r24, 0x05	; 5
     b48:	80 83       	st	Z, r24
     b4a:	16 c0       	rjmp	.+44     	; 0xb78 <__vector_21+0x72>
		}
		else if(ADC_next_channel == ADC_COIL_CURRENT_CHANNEL){
     b4c:	85 30       	cpi	r24, 0x05	; 5
     b4e:	a1 f4       	brne	.+40     	; 0xb78 <__vector_21+0x72>
			raw_ADC_output_PC5 = ADC;
     b50:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     b54:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     b58:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <raw_ADC_output_PC5+0x1>
     b5c:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <raw_ADC_output_PC5>
			debug_ADC_channel = ADC_next_channel;
     b60:	85 e0       	ldi	r24, 0x05	; 5
     b62:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <debug_ADC_channel>
			ADC_next_channel = ADC_COIL_VOLTAGE_CHANNEL;	// Next conversion is back to coil voltage shunt
     b66:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <ADC_next_channel>
			ADMUX &= 0xf0;									// Reset to Channel 0.
     b6a:	ec e7       	ldi	r30, 0x7C	; 124
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	80 7f       	andi	r24, 0xF0	; 240
     b72:	80 83       	st	Z, r24
			ADMUX |= 0x00;									// Set to Channel 0. (coil voltage shunt)
     b74:	80 81       	ld	r24, Z
     b76:	80 83       	st	Z, r24
		}
		ADCSRA |= (1 << ADSC);								// Start a new conversion...
     b78:	ea e7       	ldi	r30, 0x7A	; 122
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 64       	ori	r24, 0x40	; 64
     b80:	80 83       	st	Z, r24
			ADMUX |= 0x05;									// Set to Channel 5. (coil current shunt)
		}
		ADCSRA |= (1 << ADSC);								// Start a new conversion...
	#endif
	
}
     b82:	ff 91       	pop	r31
     b84:	ef 91       	pop	r30
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	0f 90       	pop	r0
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	0f 90       	pop	r0
     b90:	1f 90       	pop	r1
     b92:	18 95       	reti

00000b94 <timer2_init>:
	// Operate at Normal Timer Mode...
	/*** TCCR2B: TC2 Control Register B ***/
	/** Prescaler Selection **/
	#ifdef XPLAINED_MINI_MODE
	// The program is being tested on a Xplained Mini Board, and it is running at 16MHz.
		TCCR2B |=  (1 << CS22);			// Set prescaler to 64
     b94:	e1 eb       	ldi	r30, 0xB1	; 177
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	84 60       	ori	r24, 0x04	; 4
     b9c:	80 83       	st	Z, r24
		TCCR2B &= ~(1 << CS21);			// @F_CPU 16 MHz... F(Timer) = 250KHz
     b9e:	80 81       	ld	r24, Z
     ba0:	8d 7f       	andi	r24, 0xFD	; 253
     ba2:	80 83       	st	Z, r24
		TCCR2B &= ~(1 << CS20);			
     ba4:	80 81       	ld	r24, Z
     ba6:	8e 7f       	andi	r24, 0xFE	; 254
     ba8:	80 83       	st	Z, r24
		TCCR2B &= ~(1 << CS22);			// Set prescaler to 32
		TCCR2B |=  (1 << CS21);			// @F_CPU 8 MHz... F(Timer) = 250KHz
		TCCR2B |=  (1 << CS20);		    
	#endif
	/*** TIMSK0: TC0 Interrupt Mask Register ***/
	TIMSK2 |= (1 << OCIE2A);		// Timer/Counter2 Output Compare A Match Interrupt Enabled
     baa:	e0 e7       	ldi	r30, 0x70	; 112
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	82 60       	ori	r24, 0x02	; 2
     bb2:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2B);		// Timer/Counter2 Output Compare B Match Interrupt Enabled
     bb4:	80 81       	ld	r24, Z
     bb6:	84 60       	ori	r24, 0x04	; 4
     bb8:	80 83       	st	Z, r24
     bba:	08 95       	ret

00000bbc <__subsf3>:
     bbc:	50 58       	subi	r21, 0x80	; 128

00000bbe <__addsf3>:
     bbe:	bb 27       	eor	r27, r27
     bc0:	aa 27       	eor	r26, r26
     bc2:	0e 94 f6 05 	call	0xbec	; 0xbec <__addsf3x>
     bc6:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_round>
     bca:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_pscA>
     bce:	38 f0       	brcs	.+14     	; 0xbde <__addsf3+0x20>
     bd0:	0e 94 62 07 	call	0xec4	; 0xec4 <__fp_pscB>
     bd4:	20 f0       	brcs	.+8      	; 0xbde <__addsf3+0x20>
     bd6:	39 f4       	brne	.+14     	; 0xbe6 <__addsf3+0x28>
     bd8:	9f 3f       	cpi	r25, 0xFF	; 255
     bda:	19 f4       	brne	.+6      	; 0xbe2 <__addsf3+0x24>
     bdc:	26 f4       	brtc	.+8      	; 0xbe6 <__addsf3+0x28>
     bde:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_nan>
     be2:	0e f4       	brtc	.+2      	; 0xbe6 <__addsf3+0x28>
     be4:	e0 95       	com	r30
     be6:	e7 fb       	bst	r30, 7
     be8:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_inf>

00000bec <__addsf3x>:
     bec:	e9 2f       	mov	r30, r25
     bee:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_split3>
     bf2:	58 f3       	brcs	.-42     	; 0xbca <__addsf3+0xc>
     bf4:	ba 17       	cp	r27, r26
     bf6:	62 07       	cpc	r22, r18
     bf8:	73 07       	cpc	r23, r19
     bfa:	84 07       	cpc	r24, r20
     bfc:	95 07       	cpc	r25, r21
     bfe:	20 f0       	brcs	.+8      	; 0xc08 <__addsf3x+0x1c>
     c00:	79 f4       	brne	.+30     	; 0xc20 <__addsf3x+0x34>
     c02:	a6 f5       	brtc	.+104    	; 0xc6c <__addsf3x+0x80>
     c04:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__fp_zero>
     c08:	0e f4       	brtc	.+2      	; 0xc0c <__addsf3x+0x20>
     c0a:	e0 95       	com	r30
     c0c:	0b 2e       	mov	r0, r27
     c0e:	ba 2f       	mov	r27, r26
     c10:	a0 2d       	mov	r26, r0
     c12:	0b 01       	movw	r0, r22
     c14:	b9 01       	movw	r22, r18
     c16:	90 01       	movw	r18, r0
     c18:	0c 01       	movw	r0, r24
     c1a:	ca 01       	movw	r24, r20
     c1c:	a0 01       	movw	r20, r0
     c1e:	11 24       	eor	r1, r1
     c20:	ff 27       	eor	r31, r31
     c22:	59 1b       	sub	r21, r25
     c24:	99 f0       	breq	.+38     	; 0xc4c <__addsf3x+0x60>
     c26:	59 3f       	cpi	r21, 0xF9	; 249
     c28:	50 f4       	brcc	.+20     	; 0xc3e <__addsf3x+0x52>
     c2a:	50 3e       	cpi	r21, 0xE0	; 224
     c2c:	68 f1       	brcs	.+90     	; 0xc88 <__addsf3x+0x9c>
     c2e:	1a 16       	cp	r1, r26
     c30:	f0 40       	sbci	r31, 0x00	; 0
     c32:	a2 2f       	mov	r26, r18
     c34:	23 2f       	mov	r18, r19
     c36:	34 2f       	mov	r19, r20
     c38:	44 27       	eor	r20, r20
     c3a:	58 5f       	subi	r21, 0xF8	; 248
     c3c:	f3 cf       	rjmp	.-26     	; 0xc24 <__addsf3x+0x38>
     c3e:	46 95       	lsr	r20
     c40:	37 95       	ror	r19
     c42:	27 95       	ror	r18
     c44:	a7 95       	ror	r26
     c46:	f0 40       	sbci	r31, 0x00	; 0
     c48:	53 95       	inc	r21
     c4a:	c9 f7       	brne	.-14     	; 0xc3e <__addsf3x+0x52>
     c4c:	7e f4       	brtc	.+30     	; 0xc6c <__addsf3x+0x80>
     c4e:	1f 16       	cp	r1, r31
     c50:	ba 0b       	sbc	r27, r26
     c52:	62 0b       	sbc	r22, r18
     c54:	73 0b       	sbc	r23, r19
     c56:	84 0b       	sbc	r24, r20
     c58:	ba f0       	brmi	.+46     	; 0xc88 <__addsf3x+0x9c>
     c5a:	91 50       	subi	r25, 0x01	; 1
     c5c:	a1 f0       	breq	.+40     	; 0xc86 <__addsf3x+0x9a>
     c5e:	ff 0f       	add	r31, r31
     c60:	bb 1f       	adc	r27, r27
     c62:	66 1f       	adc	r22, r22
     c64:	77 1f       	adc	r23, r23
     c66:	88 1f       	adc	r24, r24
     c68:	c2 f7       	brpl	.-16     	; 0xc5a <__addsf3x+0x6e>
     c6a:	0e c0       	rjmp	.+28     	; 0xc88 <__addsf3x+0x9c>
     c6c:	ba 0f       	add	r27, r26
     c6e:	62 1f       	adc	r22, r18
     c70:	73 1f       	adc	r23, r19
     c72:	84 1f       	adc	r24, r20
     c74:	48 f4       	brcc	.+18     	; 0xc88 <__addsf3x+0x9c>
     c76:	87 95       	ror	r24
     c78:	77 95       	ror	r23
     c7a:	67 95       	ror	r22
     c7c:	b7 95       	ror	r27
     c7e:	f7 95       	ror	r31
     c80:	9e 3f       	cpi	r25, 0xFE	; 254
     c82:	08 f0       	brcs	.+2      	; 0xc86 <__addsf3x+0x9a>
     c84:	b0 cf       	rjmp	.-160    	; 0xbe6 <__addsf3+0x28>
     c86:	93 95       	inc	r25
     c88:	88 0f       	add	r24, r24
     c8a:	08 f0       	brcs	.+2      	; 0xc8e <__addsf3x+0xa2>
     c8c:	99 27       	eor	r25, r25
     c8e:	ee 0f       	add	r30, r30
     c90:	97 95       	ror	r25
     c92:	87 95       	ror	r24
     c94:	08 95       	ret

00000c96 <__cmpsf2>:
     c96:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__fp_cmp>
     c9a:	08 f4       	brcc	.+2      	; 0xc9e <__cmpsf2+0x8>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	08 95       	ret

00000ca0 <__divsf3>:
     ca0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__divsf3x>
     ca4:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_round>
     ca8:	0e 94 62 07 	call	0xec4	; 0xec4 <__fp_pscB>
     cac:	58 f0       	brcs	.+22     	; 0xcc4 <__divsf3+0x24>
     cae:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_pscA>
     cb2:	40 f0       	brcs	.+16     	; 0xcc4 <__divsf3+0x24>
     cb4:	29 f4       	brne	.+10     	; 0xcc0 <__divsf3+0x20>
     cb6:	5f 3f       	cpi	r21, 0xFF	; 255
     cb8:	29 f0       	breq	.+10     	; 0xcc4 <__divsf3+0x24>
     cba:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_inf>
     cbe:	51 11       	cpse	r21, r1
     cc0:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_szero>
     cc4:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_nan>

00000cc8 <__divsf3x>:
     cc8:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_split3>
     ccc:	68 f3       	brcs	.-38     	; 0xca8 <__divsf3+0x8>

00000cce <__divsf3_pse>:
     cce:	99 23       	and	r25, r25
     cd0:	b1 f3       	breq	.-20     	; 0xcbe <__divsf3+0x1e>
     cd2:	55 23       	and	r21, r21
     cd4:	91 f3       	breq	.-28     	; 0xcba <__divsf3+0x1a>
     cd6:	95 1b       	sub	r25, r21
     cd8:	55 0b       	sbc	r21, r21
     cda:	bb 27       	eor	r27, r27
     cdc:	aa 27       	eor	r26, r26
     cde:	62 17       	cp	r22, r18
     ce0:	73 07       	cpc	r23, r19
     ce2:	84 07       	cpc	r24, r20
     ce4:	38 f0       	brcs	.+14     	; 0xcf4 <__divsf3_pse+0x26>
     ce6:	9f 5f       	subi	r25, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	22 0f       	add	r18, r18
     cec:	33 1f       	adc	r19, r19
     cee:	44 1f       	adc	r20, r20
     cf0:	aa 1f       	adc	r26, r26
     cf2:	a9 f3       	breq	.-22     	; 0xcde <__divsf3_pse+0x10>
     cf4:	35 d0       	rcall	.+106    	; 0xd60 <__divsf3_pse+0x92>
     cf6:	0e 2e       	mov	r0, r30
     cf8:	3a f0       	brmi	.+14     	; 0xd08 <__divsf3_pse+0x3a>
     cfa:	e0 e8       	ldi	r30, 0x80	; 128
     cfc:	32 d0       	rcall	.+100    	; 0xd62 <__divsf3_pse+0x94>
     cfe:	91 50       	subi	r25, 0x01	; 1
     d00:	50 40       	sbci	r21, 0x00	; 0
     d02:	e6 95       	lsr	r30
     d04:	00 1c       	adc	r0, r0
     d06:	ca f7       	brpl	.-14     	; 0xcfa <__divsf3_pse+0x2c>
     d08:	2b d0       	rcall	.+86     	; 0xd60 <__divsf3_pse+0x92>
     d0a:	fe 2f       	mov	r31, r30
     d0c:	29 d0       	rcall	.+82     	; 0xd60 <__divsf3_pse+0x92>
     d0e:	66 0f       	add	r22, r22
     d10:	77 1f       	adc	r23, r23
     d12:	88 1f       	adc	r24, r24
     d14:	bb 1f       	adc	r27, r27
     d16:	26 17       	cp	r18, r22
     d18:	37 07       	cpc	r19, r23
     d1a:	48 07       	cpc	r20, r24
     d1c:	ab 07       	cpc	r26, r27
     d1e:	b0 e8       	ldi	r27, 0x80	; 128
     d20:	09 f0       	breq	.+2      	; 0xd24 <__divsf3_pse+0x56>
     d22:	bb 0b       	sbc	r27, r27
     d24:	80 2d       	mov	r24, r0
     d26:	bf 01       	movw	r22, r30
     d28:	ff 27       	eor	r31, r31
     d2a:	93 58       	subi	r25, 0x83	; 131
     d2c:	5f 4f       	sbci	r21, 0xFF	; 255
     d2e:	3a f0       	brmi	.+14     	; 0xd3e <__divsf3_pse+0x70>
     d30:	9e 3f       	cpi	r25, 0xFE	; 254
     d32:	51 05       	cpc	r21, r1
     d34:	78 f0       	brcs	.+30     	; 0xd54 <__divsf3_pse+0x86>
     d36:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_inf>
     d3a:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_szero>
     d3e:	5f 3f       	cpi	r21, 0xFF	; 255
     d40:	e4 f3       	brlt	.-8      	; 0xd3a <__divsf3_pse+0x6c>
     d42:	98 3e       	cpi	r25, 0xE8	; 232
     d44:	d4 f3       	brlt	.-12     	; 0xd3a <__divsf3_pse+0x6c>
     d46:	86 95       	lsr	r24
     d48:	77 95       	ror	r23
     d4a:	67 95       	ror	r22
     d4c:	b7 95       	ror	r27
     d4e:	f7 95       	ror	r31
     d50:	9f 5f       	subi	r25, 0xFF	; 255
     d52:	c9 f7       	brne	.-14     	; 0xd46 <__divsf3_pse+0x78>
     d54:	88 0f       	add	r24, r24
     d56:	91 1d       	adc	r25, r1
     d58:	96 95       	lsr	r25
     d5a:	87 95       	ror	r24
     d5c:	97 f9       	bld	r25, 7
     d5e:	08 95       	ret
     d60:	e1 e0       	ldi	r30, 0x01	; 1
     d62:	66 0f       	add	r22, r22
     d64:	77 1f       	adc	r23, r23
     d66:	88 1f       	adc	r24, r24
     d68:	bb 1f       	adc	r27, r27
     d6a:	62 17       	cp	r22, r18
     d6c:	73 07       	cpc	r23, r19
     d6e:	84 07       	cpc	r24, r20
     d70:	ba 07       	cpc	r27, r26
     d72:	20 f0       	brcs	.+8      	; 0xd7c <__divsf3_pse+0xae>
     d74:	62 1b       	sub	r22, r18
     d76:	73 0b       	sbc	r23, r19
     d78:	84 0b       	sbc	r24, r20
     d7a:	ba 0b       	sbc	r27, r26
     d7c:	ee 1f       	adc	r30, r30
     d7e:	88 f7       	brcc	.-30     	; 0xd62 <__divsf3_pse+0x94>
     d80:	e0 95       	com	r30
     d82:	08 95       	ret

00000d84 <__fixunssfsi>:
     d84:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_splitA>
     d88:	88 f0       	brcs	.+34     	; 0xdac <__fixunssfsi+0x28>
     d8a:	9f 57       	subi	r25, 0x7F	; 127
     d8c:	98 f0       	brcs	.+38     	; 0xdb4 <__fixunssfsi+0x30>
     d8e:	b9 2f       	mov	r27, r25
     d90:	99 27       	eor	r25, r25
     d92:	b7 51       	subi	r27, 0x17	; 23
     d94:	b0 f0       	brcs	.+44     	; 0xdc2 <__fixunssfsi+0x3e>
     d96:	e1 f0       	breq	.+56     	; 0xdd0 <__fixunssfsi+0x4c>
     d98:	66 0f       	add	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	88 1f       	adc	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	1a f0       	brmi	.+6      	; 0xda8 <__fixunssfsi+0x24>
     da2:	ba 95       	dec	r27
     da4:	c9 f7       	brne	.-14     	; 0xd98 <__fixunssfsi+0x14>
     da6:	14 c0       	rjmp	.+40     	; 0xdd0 <__fixunssfsi+0x4c>
     da8:	b1 30       	cpi	r27, 0x01	; 1
     daa:	91 f0       	breq	.+36     	; 0xdd0 <__fixunssfsi+0x4c>
     dac:	0e 94 9c 07 	call	0xf38	; 0xf38 <__fp_zero>
     db0:	b1 e0       	ldi	r27, 0x01	; 1
     db2:	08 95       	ret
     db4:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__fp_zero>
     db8:	67 2f       	mov	r22, r23
     dba:	78 2f       	mov	r23, r24
     dbc:	88 27       	eor	r24, r24
     dbe:	b8 5f       	subi	r27, 0xF8	; 248
     dc0:	39 f0       	breq	.+14     	; 0xdd0 <__fixunssfsi+0x4c>
     dc2:	b9 3f       	cpi	r27, 0xF9	; 249
     dc4:	cc f3       	brlt	.-14     	; 0xdb8 <__fixunssfsi+0x34>
     dc6:	86 95       	lsr	r24
     dc8:	77 95       	ror	r23
     dca:	67 95       	ror	r22
     dcc:	b3 95       	inc	r27
     dce:	d9 f7       	brne	.-10     	; 0xdc6 <__fixunssfsi+0x42>
     dd0:	3e f4       	brtc	.+14     	; 0xde0 <__fixunssfsi+0x5c>
     dd2:	90 95       	com	r25
     dd4:	80 95       	com	r24
     dd6:	70 95       	com	r23
     dd8:	61 95       	neg	r22
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	8f 4f       	sbci	r24, 0xFF	; 255
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	08 95       	ret

00000de2 <__floatunsisf>:
     de2:	e8 94       	clt
     de4:	09 c0       	rjmp	.+18     	; 0xdf8 <__floatsisf+0x12>

00000de6 <__floatsisf>:
     de6:	97 fb       	bst	r25, 7
     de8:	3e f4       	brtc	.+14     	; 0xdf8 <__floatsisf+0x12>
     dea:	90 95       	com	r25
     dec:	80 95       	com	r24
     dee:	70 95       	com	r23
     df0:	61 95       	neg	r22
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	8f 4f       	sbci	r24, 0xFF	; 255
     df6:	9f 4f       	sbci	r25, 0xFF	; 255
     df8:	99 23       	and	r25, r25
     dfa:	a9 f0       	breq	.+42     	; 0xe26 <__floatsisf+0x40>
     dfc:	f9 2f       	mov	r31, r25
     dfe:	96 e9       	ldi	r25, 0x96	; 150
     e00:	bb 27       	eor	r27, r27
     e02:	93 95       	inc	r25
     e04:	f6 95       	lsr	r31
     e06:	87 95       	ror	r24
     e08:	77 95       	ror	r23
     e0a:	67 95       	ror	r22
     e0c:	b7 95       	ror	r27
     e0e:	f1 11       	cpse	r31, r1
     e10:	f8 cf       	rjmp	.-16     	; 0xe02 <__floatsisf+0x1c>
     e12:	fa f4       	brpl	.+62     	; 0xe52 <__floatsisf+0x6c>
     e14:	bb 0f       	add	r27, r27
     e16:	11 f4       	brne	.+4      	; 0xe1c <__floatsisf+0x36>
     e18:	60 ff       	sbrs	r22, 0
     e1a:	1b c0       	rjmp	.+54     	; 0xe52 <__floatsisf+0x6c>
     e1c:	6f 5f       	subi	r22, 0xFF	; 255
     e1e:	7f 4f       	sbci	r23, 0xFF	; 255
     e20:	8f 4f       	sbci	r24, 0xFF	; 255
     e22:	9f 4f       	sbci	r25, 0xFF	; 255
     e24:	16 c0       	rjmp	.+44     	; 0xe52 <__floatsisf+0x6c>
     e26:	88 23       	and	r24, r24
     e28:	11 f0       	breq	.+4      	; 0xe2e <__floatsisf+0x48>
     e2a:	96 e9       	ldi	r25, 0x96	; 150
     e2c:	11 c0       	rjmp	.+34     	; 0xe50 <__floatsisf+0x6a>
     e2e:	77 23       	and	r23, r23
     e30:	21 f0       	breq	.+8      	; 0xe3a <__floatsisf+0x54>
     e32:	9e e8       	ldi	r25, 0x8E	; 142
     e34:	87 2f       	mov	r24, r23
     e36:	76 2f       	mov	r23, r22
     e38:	05 c0       	rjmp	.+10     	; 0xe44 <__floatsisf+0x5e>
     e3a:	66 23       	and	r22, r22
     e3c:	71 f0       	breq	.+28     	; 0xe5a <__floatsisf+0x74>
     e3e:	96 e8       	ldi	r25, 0x86	; 134
     e40:	86 2f       	mov	r24, r22
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	2a f0       	brmi	.+10     	; 0xe52 <__floatsisf+0x6c>
     e48:	9a 95       	dec	r25
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	88 1f       	adc	r24, r24
     e50:	da f7       	brpl	.-10     	; 0xe48 <__floatsisf+0x62>
     e52:	88 0f       	add	r24, r24
     e54:	96 95       	lsr	r25
     e56:	87 95       	ror	r24
     e58:	97 f9       	bld	r25, 7
     e5a:	08 95       	ret

00000e5c <__fp_cmp>:
     e5c:	99 0f       	add	r25, r25
     e5e:	00 08       	sbc	r0, r0
     e60:	55 0f       	add	r21, r21
     e62:	aa 0b       	sbc	r26, r26
     e64:	e0 e8       	ldi	r30, 0x80	; 128
     e66:	fe ef       	ldi	r31, 0xFE	; 254
     e68:	16 16       	cp	r1, r22
     e6a:	17 06       	cpc	r1, r23
     e6c:	e8 07       	cpc	r30, r24
     e6e:	f9 07       	cpc	r31, r25
     e70:	c0 f0       	brcs	.+48     	; 0xea2 <__fp_cmp+0x46>
     e72:	12 16       	cp	r1, r18
     e74:	13 06       	cpc	r1, r19
     e76:	e4 07       	cpc	r30, r20
     e78:	f5 07       	cpc	r31, r21
     e7a:	98 f0       	brcs	.+38     	; 0xea2 <__fp_cmp+0x46>
     e7c:	62 1b       	sub	r22, r18
     e7e:	73 0b       	sbc	r23, r19
     e80:	84 0b       	sbc	r24, r20
     e82:	95 0b       	sbc	r25, r21
     e84:	39 f4       	brne	.+14     	; 0xe94 <__fp_cmp+0x38>
     e86:	0a 26       	eor	r0, r26
     e88:	61 f0       	breq	.+24     	; 0xea2 <__fp_cmp+0x46>
     e8a:	23 2b       	or	r18, r19
     e8c:	24 2b       	or	r18, r20
     e8e:	25 2b       	or	r18, r21
     e90:	21 f4       	brne	.+8      	; 0xe9a <__fp_cmp+0x3e>
     e92:	08 95       	ret
     e94:	0a 26       	eor	r0, r26
     e96:	09 f4       	brne	.+2      	; 0xe9a <__fp_cmp+0x3e>
     e98:	a1 40       	sbci	r26, 0x01	; 1
     e9a:	a6 95       	lsr	r26
     e9c:	8f ef       	ldi	r24, 0xFF	; 255
     e9e:	81 1d       	adc	r24, r1
     ea0:	81 1d       	adc	r24, r1
     ea2:	08 95       	ret

00000ea4 <__fp_inf>:
     ea4:	97 f9       	bld	r25, 7
     ea6:	9f 67       	ori	r25, 0x7F	; 127
     ea8:	80 e8       	ldi	r24, 0x80	; 128
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	08 95       	ret

00000eb0 <__fp_nan>:
     eb0:	9f ef       	ldi	r25, 0xFF	; 255
     eb2:	80 ec       	ldi	r24, 0xC0	; 192
     eb4:	08 95       	ret

00000eb6 <__fp_pscA>:
     eb6:	00 24       	eor	r0, r0
     eb8:	0a 94       	dec	r0
     eba:	16 16       	cp	r1, r22
     ebc:	17 06       	cpc	r1, r23
     ebe:	18 06       	cpc	r1, r24
     ec0:	09 06       	cpc	r0, r25
     ec2:	08 95       	ret

00000ec4 <__fp_pscB>:
     ec4:	00 24       	eor	r0, r0
     ec6:	0a 94       	dec	r0
     ec8:	12 16       	cp	r1, r18
     eca:	13 06       	cpc	r1, r19
     ecc:	14 06       	cpc	r1, r20
     ece:	05 06       	cpc	r0, r21
     ed0:	08 95       	ret

00000ed2 <__fp_round>:
     ed2:	09 2e       	mov	r0, r25
     ed4:	03 94       	inc	r0
     ed6:	00 0c       	add	r0, r0
     ed8:	11 f4       	brne	.+4      	; 0xede <__fp_round+0xc>
     eda:	88 23       	and	r24, r24
     edc:	52 f0       	brmi	.+20     	; 0xef2 <__fp_round+0x20>
     ede:	bb 0f       	add	r27, r27
     ee0:	40 f4       	brcc	.+16     	; 0xef2 <__fp_round+0x20>
     ee2:	bf 2b       	or	r27, r31
     ee4:	11 f4       	brne	.+4      	; 0xeea <__fp_round+0x18>
     ee6:	60 ff       	sbrs	r22, 0
     ee8:	04 c0       	rjmp	.+8      	; 0xef2 <__fp_round+0x20>
     eea:	6f 5f       	subi	r22, 0xFF	; 255
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	8f 4f       	sbci	r24, 0xFF	; 255
     ef0:	9f 4f       	sbci	r25, 0xFF	; 255
     ef2:	08 95       	ret

00000ef4 <__fp_split3>:
     ef4:	57 fd       	sbrc	r21, 7
     ef6:	90 58       	subi	r25, 0x80	; 128
     ef8:	44 0f       	add	r20, r20
     efa:	55 1f       	adc	r21, r21
     efc:	59 f0       	breq	.+22     	; 0xf14 <__fp_splitA+0x10>
     efe:	5f 3f       	cpi	r21, 0xFF	; 255
     f00:	71 f0       	breq	.+28     	; 0xf1e <__fp_splitA+0x1a>
     f02:	47 95       	ror	r20

00000f04 <__fp_splitA>:
     f04:	88 0f       	add	r24, r24
     f06:	97 fb       	bst	r25, 7
     f08:	99 1f       	adc	r25, r25
     f0a:	61 f0       	breq	.+24     	; 0xf24 <__fp_splitA+0x20>
     f0c:	9f 3f       	cpi	r25, 0xFF	; 255
     f0e:	79 f0       	breq	.+30     	; 0xf2e <__fp_splitA+0x2a>
     f10:	87 95       	ror	r24
     f12:	08 95       	ret
     f14:	12 16       	cp	r1, r18
     f16:	13 06       	cpc	r1, r19
     f18:	14 06       	cpc	r1, r20
     f1a:	55 1f       	adc	r21, r21
     f1c:	f2 cf       	rjmp	.-28     	; 0xf02 <__fp_split3+0xe>
     f1e:	46 95       	lsr	r20
     f20:	f1 df       	rcall	.-30     	; 0xf04 <__fp_splitA>
     f22:	08 c0       	rjmp	.+16     	; 0xf34 <__fp_splitA+0x30>
     f24:	16 16       	cp	r1, r22
     f26:	17 06       	cpc	r1, r23
     f28:	18 06       	cpc	r1, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	f1 cf       	rjmp	.-30     	; 0xf10 <__fp_splitA+0xc>
     f2e:	86 95       	lsr	r24
     f30:	71 05       	cpc	r23, r1
     f32:	61 05       	cpc	r22, r1
     f34:	08 94       	sec
     f36:	08 95       	ret

00000f38 <__fp_zero>:
     f38:	e8 94       	clt

00000f3a <__fp_szero>:
     f3a:	bb 27       	eor	r27, r27
     f3c:	66 27       	eor	r22, r22
     f3e:	77 27       	eor	r23, r23
     f40:	cb 01       	movw	r24, r22
     f42:	97 f9       	bld	r25, 7
     f44:	08 95       	ret

00000f46 <__gesf2>:
     f46:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__fp_cmp>
     f4a:	08 f4       	brcc	.+2      	; 0xf4e <__gesf2+0x8>
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	08 95       	ret

00000f50 <__mulsf3>:
     f50:	0e 94 bb 07 	call	0xf76	; 0xf76 <__mulsf3x>
     f54:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__fp_round>
     f58:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__fp_pscA>
     f5c:	38 f0       	brcs	.+14     	; 0xf6c <__mulsf3+0x1c>
     f5e:	0e 94 62 07 	call	0xec4	; 0xec4 <__fp_pscB>
     f62:	20 f0       	brcs	.+8      	; 0xf6c <__mulsf3+0x1c>
     f64:	95 23       	and	r25, r21
     f66:	11 f0       	breq	.+4      	; 0xf6c <__mulsf3+0x1c>
     f68:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_inf>
     f6c:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_nan>
     f70:	11 24       	eor	r1, r1
     f72:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_szero>

00000f76 <__mulsf3x>:
     f76:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fp_split3>
     f7a:	70 f3       	brcs	.-36     	; 0xf58 <__mulsf3+0x8>

00000f7c <__mulsf3_pse>:
     f7c:	95 9f       	mul	r25, r21
     f7e:	c1 f3       	breq	.-16     	; 0xf70 <__mulsf3+0x20>
     f80:	95 0f       	add	r25, r21
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	55 1f       	adc	r21, r21
     f86:	62 9f       	mul	r22, r18
     f88:	f0 01       	movw	r30, r0
     f8a:	72 9f       	mul	r23, r18
     f8c:	bb 27       	eor	r27, r27
     f8e:	f0 0d       	add	r31, r0
     f90:	b1 1d       	adc	r27, r1
     f92:	63 9f       	mul	r22, r19
     f94:	aa 27       	eor	r26, r26
     f96:	f0 0d       	add	r31, r0
     f98:	b1 1d       	adc	r27, r1
     f9a:	aa 1f       	adc	r26, r26
     f9c:	64 9f       	mul	r22, r20
     f9e:	66 27       	eor	r22, r22
     fa0:	b0 0d       	add	r27, r0
     fa2:	a1 1d       	adc	r26, r1
     fa4:	66 1f       	adc	r22, r22
     fa6:	82 9f       	mul	r24, r18
     fa8:	22 27       	eor	r18, r18
     faa:	b0 0d       	add	r27, r0
     fac:	a1 1d       	adc	r26, r1
     fae:	62 1f       	adc	r22, r18
     fb0:	73 9f       	mul	r23, r19
     fb2:	b0 0d       	add	r27, r0
     fb4:	a1 1d       	adc	r26, r1
     fb6:	62 1f       	adc	r22, r18
     fb8:	83 9f       	mul	r24, r19
     fba:	a0 0d       	add	r26, r0
     fbc:	61 1d       	adc	r22, r1
     fbe:	22 1f       	adc	r18, r18
     fc0:	74 9f       	mul	r23, r20
     fc2:	33 27       	eor	r19, r19
     fc4:	a0 0d       	add	r26, r0
     fc6:	61 1d       	adc	r22, r1
     fc8:	23 1f       	adc	r18, r19
     fca:	84 9f       	mul	r24, r20
     fcc:	60 0d       	add	r22, r0
     fce:	21 1d       	adc	r18, r1
     fd0:	82 2f       	mov	r24, r18
     fd2:	76 2f       	mov	r23, r22
     fd4:	6a 2f       	mov	r22, r26
     fd6:	11 24       	eor	r1, r1
     fd8:	9f 57       	subi	r25, 0x7F	; 127
     fda:	50 40       	sbci	r21, 0x00	; 0
     fdc:	9a f0       	brmi	.+38     	; 0x1004 <__mulsf3_pse+0x88>
     fde:	f1 f0       	breq	.+60     	; 0x101c <__mulsf3_pse+0xa0>
     fe0:	88 23       	and	r24, r24
     fe2:	4a f0       	brmi	.+18     	; 0xff6 <__mulsf3_pse+0x7a>
     fe4:	ee 0f       	add	r30, r30
     fe6:	ff 1f       	adc	r31, r31
     fe8:	bb 1f       	adc	r27, r27
     fea:	66 1f       	adc	r22, r22
     fec:	77 1f       	adc	r23, r23
     fee:	88 1f       	adc	r24, r24
     ff0:	91 50       	subi	r25, 0x01	; 1
     ff2:	50 40       	sbci	r21, 0x00	; 0
     ff4:	a9 f7       	brne	.-22     	; 0xfe0 <__mulsf3_pse+0x64>
     ff6:	9e 3f       	cpi	r25, 0xFE	; 254
     ff8:	51 05       	cpc	r21, r1
     ffa:	80 f0       	brcs	.+32     	; 0x101c <__mulsf3_pse+0xa0>
     ffc:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__fp_inf>
    1000:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_szero>
    1004:	5f 3f       	cpi	r21, 0xFF	; 255
    1006:	e4 f3       	brlt	.-8      	; 0x1000 <__mulsf3_pse+0x84>
    1008:	98 3e       	cpi	r25, 0xE8	; 232
    100a:	d4 f3       	brlt	.-12     	; 0x1000 <__mulsf3_pse+0x84>
    100c:	86 95       	lsr	r24
    100e:	77 95       	ror	r23
    1010:	67 95       	ror	r22
    1012:	b7 95       	ror	r27
    1014:	f7 95       	ror	r31
    1016:	e7 95       	ror	r30
    1018:	9f 5f       	subi	r25, 0xFF	; 255
    101a:	c1 f7       	brne	.-16     	; 0x100c <__mulsf3_pse+0x90>
    101c:	fe 2b       	or	r31, r30
    101e:	88 0f       	add	r24, r24
    1020:	91 1d       	adc	r25, r1
    1022:	96 95       	lsr	r25
    1024:	87 95       	ror	r24
    1026:	97 f9       	bld	r25, 7
    1028:	08 95       	ret

0000102a <vfprintf>:
    102a:	a0 e1       	ldi	r26, 0x10	; 16
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	eb e1       	ldi	r30, 0x1B	; 27
    1030:	f8 e0       	ldi	r31, 0x08	; 8
    1032:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <__prologue_saves__>
    1036:	7c 01       	movw	r14, r24
    1038:	1b 01       	movw	r2, r22
    103a:	6a 01       	movw	r12, r20
    103c:	fc 01       	movw	r30, r24
    103e:	17 82       	std	Z+7, r1	; 0x07
    1040:	16 82       	std	Z+6, r1	; 0x06
    1042:	83 81       	ldd	r24, Z+3	; 0x03
    1044:	81 ff       	sbrs	r24, 1
    1046:	44 c3       	rjmp	.+1672   	; 0x16d0 <vfprintf+0x6a6>
    1048:	9e 01       	movw	r18, r28
    104a:	2f 5f       	subi	r18, 0xFF	; 255
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	39 01       	movw	r6, r18
    1050:	f7 01       	movw	r30, r14
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	f1 01       	movw	r30, r2
    1056:	93 fd       	sbrc	r25, 3
    1058:	85 91       	lpm	r24, Z+
    105a:	93 ff       	sbrs	r25, 3
    105c:	81 91       	ld	r24, Z+
    105e:	1f 01       	movw	r2, r30
    1060:	88 23       	and	r24, r24
    1062:	09 f4       	brne	.+2      	; 0x1066 <vfprintf+0x3c>
    1064:	31 c3       	rjmp	.+1634   	; 0x16c8 <vfprintf+0x69e>
    1066:	85 32       	cpi	r24, 0x25	; 37
    1068:	39 f4       	brne	.+14     	; 0x1078 <vfprintf+0x4e>
    106a:	93 fd       	sbrc	r25, 3
    106c:	85 91       	lpm	r24, Z+
    106e:	93 ff       	sbrs	r25, 3
    1070:	81 91       	ld	r24, Z+
    1072:	1f 01       	movw	r2, r30
    1074:	85 32       	cpi	r24, 0x25	; 37
    1076:	39 f4       	brne	.+14     	; 0x1086 <vfprintf+0x5c>
    1078:	b7 01       	movw	r22, r14
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    1080:	56 01       	movw	r10, r12
    1082:	65 01       	movw	r12, r10
    1084:	e5 cf       	rjmp	.-54     	; 0x1050 <vfprintf+0x26>
    1086:	10 e0       	ldi	r17, 0x00	; 0
    1088:	51 2c       	mov	r5, r1
    108a:	91 2c       	mov	r9, r1
    108c:	ff e1       	ldi	r31, 0x1F	; 31
    108e:	f9 15       	cp	r31, r9
    1090:	d8 f0       	brcs	.+54     	; 0x10c8 <vfprintf+0x9e>
    1092:	8b 32       	cpi	r24, 0x2B	; 43
    1094:	79 f0       	breq	.+30     	; 0x10b4 <vfprintf+0x8a>
    1096:	38 f4       	brcc	.+14     	; 0x10a6 <vfprintf+0x7c>
    1098:	80 32       	cpi	r24, 0x20	; 32
    109a:	79 f0       	breq	.+30     	; 0x10ba <vfprintf+0x90>
    109c:	83 32       	cpi	r24, 0x23	; 35
    109e:	a1 f4       	brne	.+40     	; 0x10c8 <vfprintf+0x9e>
    10a0:	f9 2d       	mov	r31, r9
    10a2:	f0 61       	ori	r31, 0x10	; 16
    10a4:	2e c0       	rjmp	.+92     	; 0x1102 <vfprintf+0xd8>
    10a6:	8d 32       	cpi	r24, 0x2D	; 45
    10a8:	61 f0       	breq	.+24     	; 0x10c2 <vfprintf+0x98>
    10aa:	80 33       	cpi	r24, 0x30	; 48
    10ac:	69 f4       	brne	.+26     	; 0x10c8 <vfprintf+0x9e>
    10ae:	29 2d       	mov	r18, r9
    10b0:	21 60       	ori	r18, 0x01	; 1
    10b2:	2d c0       	rjmp	.+90     	; 0x110e <vfprintf+0xe4>
    10b4:	39 2d       	mov	r19, r9
    10b6:	32 60       	ori	r19, 0x02	; 2
    10b8:	93 2e       	mov	r9, r19
    10ba:	89 2d       	mov	r24, r9
    10bc:	84 60       	ori	r24, 0x04	; 4
    10be:	98 2e       	mov	r9, r24
    10c0:	2a c0       	rjmp	.+84     	; 0x1116 <vfprintf+0xec>
    10c2:	e9 2d       	mov	r30, r9
    10c4:	e8 60       	ori	r30, 0x08	; 8
    10c6:	15 c0       	rjmp	.+42     	; 0x10f2 <vfprintf+0xc8>
    10c8:	97 fc       	sbrc	r9, 7
    10ca:	2d c0       	rjmp	.+90     	; 0x1126 <vfprintf+0xfc>
    10cc:	20 ed       	ldi	r18, 0xD0	; 208
    10ce:	28 0f       	add	r18, r24
    10d0:	2a 30       	cpi	r18, 0x0A	; 10
    10d2:	88 f4       	brcc	.+34     	; 0x10f6 <vfprintf+0xcc>
    10d4:	96 fe       	sbrs	r9, 6
    10d6:	06 c0       	rjmp	.+12     	; 0x10e4 <vfprintf+0xba>
    10d8:	3a e0       	ldi	r19, 0x0A	; 10
    10da:	13 9f       	mul	r17, r19
    10dc:	20 0d       	add	r18, r0
    10de:	11 24       	eor	r1, r1
    10e0:	12 2f       	mov	r17, r18
    10e2:	19 c0       	rjmp	.+50     	; 0x1116 <vfprintf+0xec>
    10e4:	8a e0       	ldi	r24, 0x0A	; 10
    10e6:	58 9e       	mul	r5, r24
    10e8:	20 0d       	add	r18, r0
    10ea:	11 24       	eor	r1, r1
    10ec:	52 2e       	mov	r5, r18
    10ee:	e9 2d       	mov	r30, r9
    10f0:	e0 62       	ori	r30, 0x20	; 32
    10f2:	9e 2e       	mov	r9, r30
    10f4:	10 c0       	rjmp	.+32     	; 0x1116 <vfprintf+0xec>
    10f6:	8e 32       	cpi	r24, 0x2E	; 46
    10f8:	31 f4       	brne	.+12     	; 0x1106 <vfprintf+0xdc>
    10fa:	96 fc       	sbrc	r9, 6
    10fc:	e5 c2       	rjmp	.+1482   	; 0x16c8 <vfprintf+0x69e>
    10fe:	f9 2d       	mov	r31, r9
    1100:	f0 64       	ori	r31, 0x40	; 64
    1102:	9f 2e       	mov	r9, r31
    1104:	08 c0       	rjmp	.+16     	; 0x1116 <vfprintf+0xec>
    1106:	8c 36       	cpi	r24, 0x6C	; 108
    1108:	21 f4       	brne	.+8      	; 0x1112 <vfprintf+0xe8>
    110a:	29 2d       	mov	r18, r9
    110c:	20 68       	ori	r18, 0x80	; 128
    110e:	92 2e       	mov	r9, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <vfprintf+0xec>
    1112:	88 36       	cpi	r24, 0x68	; 104
    1114:	41 f4       	brne	.+16     	; 0x1126 <vfprintf+0xfc>
    1116:	f1 01       	movw	r30, r2
    1118:	93 fd       	sbrc	r25, 3
    111a:	85 91       	lpm	r24, Z+
    111c:	93 ff       	sbrs	r25, 3
    111e:	81 91       	ld	r24, Z+
    1120:	1f 01       	movw	r2, r30
    1122:	81 11       	cpse	r24, r1
    1124:	b3 cf       	rjmp	.-154    	; 0x108c <vfprintf+0x62>
    1126:	9b eb       	ldi	r25, 0xBB	; 187
    1128:	98 0f       	add	r25, r24
    112a:	93 30       	cpi	r25, 0x03	; 3
    112c:	20 f4       	brcc	.+8      	; 0x1136 <vfprintf+0x10c>
    112e:	99 2d       	mov	r25, r9
    1130:	90 61       	ori	r25, 0x10	; 16
    1132:	80 5e       	subi	r24, 0xE0	; 224
    1134:	07 c0       	rjmp	.+14     	; 0x1144 <vfprintf+0x11a>
    1136:	9b e9       	ldi	r25, 0x9B	; 155
    1138:	98 0f       	add	r25, r24
    113a:	93 30       	cpi	r25, 0x03	; 3
    113c:	08 f0       	brcs	.+2      	; 0x1140 <vfprintf+0x116>
    113e:	66 c1       	rjmp	.+716    	; 0x140c <vfprintf+0x3e2>
    1140:	99 2d       	mov	r25, r9
    1142:	9f 7e       	andi	r25, 0xEF	; 239
    1144:	96 ff       	sbrs	r25, 6
    1146:	16 e0       	ldi	r17, 0x06	; 6
    1148:	9f 73       	andi	r25, 0x3F	; 63
    114a:	99 2e       	mov	r9, r25
    114c:	85 36       	cpi	r24, 0x65	; 101
    114e:	19 f4       	brne	.+6      	; 0x1156 <vfprintf+0x12c>
    1150:	90 64       	ori	r25, 0x40	; 64
    1152:	99 2e       	mov	r9, r25
    1154:	08 c0       	rjmp	.+16     	; 0x1166 <vfprintf+0x13c>
    1156:	86 36       	cpi	r24, 0x66	; 102
    1158:	21 f4       	brne	.+8      	; 0x1162 <vfprintf+0x138>
    115a:	39 2f       	mov	r19, r25
    115c:	30 68       	ori	r19, 0x80	; 128
    115e:	93 2e       	mov	r9, r19
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <vfprintf+0x13c>
    1162:	11 11       	cpse	r17, r1
    1164:	11 50       	subi	r17, 0x01	; 1
    1166:	97 fe       	sbrs	r9, 7
    1168:	07 c0       	rjmp	.+14     	; 0x1178 <vfprintf+0x14e>
    116a:	1c 33       	cpi	r17, 0x3C	; 60
    116c:	50 f4       	brcc	.+20     	; 0x1182 <vfprintf+0x158>
    116e:	44 24       	eor	r4, r4
    1170:	43 94       	inc	r4
    1172:	41 0e       	add	r4, r17
    1174:	27 e0       	ldi	r18, 0x07	; 7
    1176:	0b c0       	rjmp	.+22     	; 0x118e <vfprintf+0x164>
    1178:	18 30       	cpi	r17, 0x08	; 8
    117a:	38 f0       	brcs	.+14     	; 0x118a <vfprintf+0x160>
    117c:	27 e0       	ldi	r18, 0x07	; 7
    117e:	17 e0       	ldi	r17, 0x07	; 7
    1180:	05 c0       	rjmp	.+10     	; 0x118c <vfprintf+0x162>
    1182:	27 e0       	ldi	r18, 0x07	; 7
    1184:	9c e3       	ldi	r25, 0x3C	; 60
    1186:	49 2e       	mov	r4, r25
    1188:	02 c0       	rjmp	.+4      	; 0x118e <vfprintf+0x164>
    118a:	21 2f       	mov	r18, r17
    118c:	41 2c       	mov	r4, r1
    118e:	56 01       	movw	r10, r12
    1190:	84 e0       	ldi	r24, 0x04	; 4
    1192:	a8 0e       	add	r10, r24
    1194:	b1 1c       	adc	r11, r1
    1196:	f6 01       	movw	r30, r12
    1198:	60 81       	ld	r22, Z
    119a:	71 81       	ldd	r23, Z+1	; 0x01
    119c:	82 81       	ldd	r24, Z+2	; 0x02
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	04 2d       	mov	r16, r4
    11a2:	a3 01       	movw	r20, r6
    11a4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__ftoa_engine>
    11a8:	6c 01       	movw	r12, r24
    11aa:	f9 81       	ldd	r31, Y+1	; 0x01
    11ac:	fc 87       	std	Y+12, r31	; 0x0c
    11ae:	f0 ff       	sbrs	r31, 0
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <vfprintf+0x18c>
    11b2:	f3 ff       	sbrs	r31, 3
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <vfprintf+0x198>
    11b6:	91 fc       	sbrc	r9, 1
    11b8:	06 c0       	rjmp	.+12     	; 0x11c6 <vfprintf+0x19c>
    11ba:	92 fe       	sbrs	r9, 2
    11bc:	06 c0       	rjmp	.+12     	; 0x11ca <vfprintf+0x1a0>
    11be:	00 e2       	ldi	r16, 0x20	; 32
    11c0:	05 c0       	rjmp	.+10     	; 0x11cc <vfprintf+0x1a2>
    11c2:	0d e2       	ldi	r16, 0x2D	; 45
    11c4:	03 c0       	rjmp	.+6      	; 0x11cc <vfprintf+0x1a2>
    11c6:	0b e2       	ldi	r16, 0x2B	; 43
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <vfprintf+0x1a2>
    11ca:	00 e0       	ldi	r16, 0x00	; 0
    11cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ce:	8c 70       	andi	r24, 0x0C	; 12
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <vfprintf+0x1ae>
    11d2:	01 11       	cpse	r16, r1
    11d4:	5a c2       	rjmp	.+1204   	; 0x168a <vfprintf+0x660>
    11d6:	9b c2       	rjmp	.+1334   	; 0x170e <vfprintf+0x6e4>
    11d8:	97 fe       	sbrs	r9, 7
    11da:	10 c0       	rjmp	.+32     	; 0x11fc <vfprintf+0x1d2>
    11dc:	4c 0c       	add	r4, r12
    11de:	fc 85       	ldd	r31, Y+12	; 0x0c
    11e0:	f4 ff       	sbrs	r31, 4
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <vfprintf+0x1c2>
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	81 33       	cpi	r24, 0x31	; 49
    11e8:	09 f4       	brne	.+2      	; 0x11ec <vfprintf+0x1c2>
    11ea:	4a 94       	dec	r4
    11ec:	14 14       	cp	r1, r4
    11ee:	74 f5       	brge	.+92     	; 0x124c <vfprintf+0x222>
    11f0:	28 e0       	ldi	r18, 0x08	; 8
    11f2:	24 15       	cp	r18, r4
    11f4:	78 f5       	brcc	.+94     	; 0x1254 <vfprintf+0x22a>
    11f6:	88 e0       	ldi	r24, 0x08	; 8
    11f8:	48 2e       	mov	r4, r24
    11fa:	2c c0       	rjmp	.+88     	; 0x1254 <vfprintf+0x22a>
    11fc:	96 fc       	sbrc	r9, 6
    11fe:	2a c0       	rjmp	.+84     	; 0x1254 <vfprintf+0x22a>
    1200:	81 2f       	mov	r24, r17
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	8c 15       	cp	r24, r12
    1206:	9d 05       	cpc	r25, r13
    1208:	9c f0       	brlt	.+38     	; 0x1230 <vfprintf+0x206>
    120a:	3c ef       	ldi	r19, 0xFC	; 252
    120c:	c3 16       	cp	r12, r19
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	d3 06       	cpc	r13, r19
    1212:	74 f0       	brlt	.+28     	; 0x1230 <vfprintf+0x206>
    1214:	89 2d       	mov	r24, r9
    1216:	80 68       	ori	r24, 0x80	; 128
    1218:	98 2e       	mov	r9, r24
    121a:	0a c0       	rjmp	.+20     	; 0x1230 <vfprintf+0x206>
    121c:	e2 e0       	ldi	r30, 0x02	; 2
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	ec 0f       	add	r30, r28
    1222:	fd 1f       	adc	r31, r29
    1224:	e1 0f       	add	r30, r17
    1226:	f1 1d       	adc	r31, r1
    1228:	80 81       	ld	r24, Z
    122a:	80 33       	cpi	r24, 0x30	; 48
    122c:	19 f4       	brne	.+6      	; 0x1234 <vfprintf+0x20a>
    122e:	11 50       	subi	r17, 0x01	; 1
    1230:	11 11       	cpse	r17, r1
    1232:	f4 cf       	rjmp	.-24     	; 0x121c <vfprintf+0x1f2>
    1234:	97 fe       	sbrs	r9, 7
    1236:	0e c0       	rjmp	.+28     	; 0x1254 <vfprintf+0x22a>
    1238:	44 24       	eor	r4, r4
    123a:	43 94       	inc	r4
    123c:	41 0e       	add	r4, r17
    123e:	81 2f       	mov	r24, r17
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	c8 16       	cp	r12, r24
    1244:	d9 06       	cpc	r13, r25
    1246:	2c f4       	brge	.+10     	; 0x1252 <vfprintf+0x228>
    1248:	1c 19       	sub	r17, r12
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <vfprintf+0x22a>
    124c:	44 24       	eor	r4, r4
    124e:	43 94       	inc	r4
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <vfprintf+0x22a>
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	97 fe       	sbrs	r9, 7
    1256:	06 c0       	rjmp	.+12     	; 0x1264 <vfprintf+0x23a>
    1258:	1c 14       	cp	r1, r12
    125a:	1d 04       	cpc	r1, r13
    125c:	34 f4       	brge	.+12     	; 0x126a <vfprintf+0x240>
    125e:	c6 01       	movw	r24, r12
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	05 c0       	rjmp	.+10     	; 0x126e <vfprintf+0x244>
    1264:	85 e0       	ldi	r24, 0x05	; 5
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 c0       	rjmp	.+4      	; 0x126e <vfprintf+0x244>
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	01 11       	cpse	r16, r1
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	11 23       	and	r17, r17
    1274:	31 f0       	breq	.+12     	; 0x1282 <vfprintf+0x258>
    1276:	21 2f       	mov	r18, r17
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	2f 5f       	subi	r18, 0xFF	; 255
    127c:	3f 4f       	sbci	r19, 0xFF	; 255
    127e:	82 0f       	add	r24, r18
    1280:	93 1f       	adc	r25, r19
    1282:	25 2d       	mov	r18, r5
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	82 17       	cp	r24, r18
    1288:	93 07       	cpc	r25, r19
    128a:	14 f4       	brge	.+4      	; 0x1290 <vfprintf+0x266>
    128c:	58 1a       	sub	r5, r24
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <vfprintf+0x268>
    1290:	51 2c       	mov	r5, r1
    1292:	89 2d       	mov	r24, r9
    1294:	89 70       	andi	r24, 0x09	; 9
    1296:	49 f4       	brne	.+18     	; 0x12aa <vfprintf+0x280>
    1298:	55 20       	and	r5, r5
    129a:	39 f0       	breq	.+14     	; 0x12aa <vfprintf+0x280>
    129c:	b7 01       	movw	r22, r14
    129e:	80 e2       	ldi	r24, 0x20	; 32
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    12a6:	5a 94       	dec	r5
    12a8:	f7 cf       	rjmp	.-18     	; 0x1298 <vfprintf+0x26e>
    12aa:	00 23       	and	r16, r16
    12ac:	29 f0       	breq	.+10     	; 0x12b8 <vfprintf+0x28e>
    12ae:	b7 01       	movw	r22, r14
    12b0:	80 2f       	mov	r24, r16
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    12b8:	93 fc       	sbrc	r9, 3
    12ba:	09 c0       	rjmp	.+18     	; 0x12ce <vfprintf+0x2a4>
    12bc:	55 20       	and	r5, r5
    12be:	39 f0       	breq	.+14     	; 0x12ce <vfprintf+0x2a4>
    12c0:	b7 01       	movw	r22, r14
    12c2:	80 e3       	ldi	r24, 0x30	; 48
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    12ca:	5a 94       	dec	r5
    12cc:	f7 cf       	rjmp	.-18     	; 0x12bc <vfprintf+0x292>
    12ce:	97 fe       	sbrs	r9, 7
    12d0:	4c c0       	rjmp	.+152    	; 0x136a <vfprintf+0x340>
    12d2:	46 01       	movw	r8, r12
    12d4:	d7 fe       	sbrs	r13, 7
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <vfprintf+0x2b2>
    12d8:	81 2c       	mov	r8, r1
    12da:	91 2c       	mov	r9, r1
    12dc:	c6 01       	movw	r24, r12
    12de:	88 19       	sub	r24, r8
    12e0:	99 09       	sbc	r25, r9
    12e2:	f3 01       	movw	r30, r6
    12e4:	e8 0f       	add	r30, r24
    12e6:	f9 1f       	adc	r31, r25
    12e8:	fe 87       	std	Y+14, r31	; 0x0e
    12ea:	ed 87       	std	Y+13, r30	; 0x0d
    12ec:	96 01       	movw	r18, r12
    12ee:	24 19       	sub	r18, r4
    12f0:	31 09       	sbc	r19, r1
    12f2:	38 8b       	std	Y+16, r19	; 0x10
    12f4:	2f 87       	std	Y+15, r18	; 0x0f
    12f6:	01 2f       	mov	r16, r17
    12f8:	10 e0       	ldi	r17, 0x00	; 0
    12fa:	11 95       	neg	r17
    12fc:	01 95       	neg	r16
    12fe:	11 09       	sbc	r17, r1
    1300:	3f ef       	ldi	r19, 0xFF	; 255
    1302:	83 16       	cp	r8, r19
    1304:	93 06       	cpc	r9, r19
    1306:	29 f4       	brne	.+10     	; 0x1312 <vfprintf+0x2e8>
    1308:	b7 01       	movw	r22, r14
    130a:	8e e2       	ldi	r24, 0x2E	; 46
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    1312:	c8 14       	cp	r12, r8
    1314:	d9 04       	cpc	r13, r9
    1316:	4c f0       	brlt	.+18     	; 0x132a <vfprintf+0x300>
    1318:	8f 85       	ldd	r24, Y+15	; 0x0f
    131a:	98 89       	ldd	r25, Y+16	; 0x10
    131c:	88 15       	cp	r24, r8
    131e:	99 05       	cpc	r25, r9
    1320:	24 f4       	brge	.+8      	; 0x132a <vfprintf+0x300>
    1322:	ed 85       	ldd	r30, Y+13	; 0x0d
    1324:	fe 85       	ldd	r31, Y+14	; 0x0e
    1326:	81 81       	ldd	r24, Z+1	; 0x01
    1328:	01 c0       	rjmp	.+2      	; 0x132c <vfprintf+0x302>
    132a:	80 e3       	ldi	r24, 0x30	; 48
    132c:	f1 e0       	ldi	r31, 0x01	; 1
    132e:	8f 1a       	sub	r8, r31
    1330:	91 08       	sbc	r9, r1
    1332:	2d 85       	ldd	r18, Y+13	; 0x0d
    1334:	3e 85       	ldd	r19, Y+14	; 0x0e
    1336:	2f 5f       	subi	r18, 0xFF	; 255
    1338:	3f 4f       	sbci	r19, 0xFF	; 255
    133a:	3e 87       	std	Y+14, r19	; 0x0e
    133c:	2d 87       	std	Y+13, r18	; 0x0d
    133e:	80 16       	cp	r8, r16
    1340:	91 06       	cpc	r9, r17
    1342:	2c f0       	brlt	.+10     	; 0x134e <vfprintf+0x324>
    1344:	b7 01       	movw	r22, r14
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    134c:	d9 cf       	rjmp	.-78     	; 0x1300 <vfprintf+0x2d6>
    134e:	c8 14       	cp	r12, r8
    1350:	d9 04       	cpc	r13, r9
    1352:	41 f4       	brne	.+16     	; 0x1364 <vfprintf+0x33a>
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
    1356:	96 33       	cpi	r25, 0x36	; 54
    1358:	20 f4       	brcc	.+8      	; 0x1362 <vfprintf+0x338>
    135a:	95 33       	cpi	r25, 0x35	; 53
    135c:	19 f4       	brne	.+6      	; 0x1364 <vfprintf+0x33a>
    135e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1360:	34 ff       	sbrs	r19, 4
    1362:	81 e3       	ldi	r24, 0x31	; 49
    1364:	b7 01       	movw	r22, r14
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	4e c0       	rjmp	.+156    	; 0x1406 <vfprintf+0x3dc>
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	81 33       	cpi	r24, 0x31	; 49
    136e:	19 f0       	breq	.+6      	; 0x1376 <vfprintf+0x34c>
    1370:	9c 85       	ldd	r25, Y+12	; 0x0c
    1372:	9f 7e       	andi	r25, 0xEF	; 239
    1374:	9c 87       	std	Y+12, r25	; 0x0c
    1376:	b7 01       	movw	r22, r14
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    137e:	11 11       	cpse	r17, r1
    1380:	05 c0       	rjmp	.+10     	; 0x138c <vfprintf+0x362>
    1382:	94 fc       	sbrc	r9, 4
    1384:	18 c0       	rjmp	.+48     	; 0x13b6 <vfprintf+0x38c>
    1386:	85 e6       	ldi	r24, 0x65	; 101
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	17 c0       	rjmp	.+46     	; 0x13ba <vfprintf+0x390>
    138c:	b7 01       	movw	r22, r14
    138e:	8e e2       	ldi	r24, 0x2E	; 46
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    1396:	1e 5f       	subi	r17, 0xFE	; 254
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	01 e0       	ldi	r16, 0x01	; 1
    139c:	08 0f       	add	r16, r24
    139e:	f3 01       	movw	r30, r6
    13a0:	e8 0f       	add	r30, r24
    13a2:	f1 1d       	adc	r31, r1
    13a4:	80 81       	ld	r24, Z
    13a6:	b7 01       	movw	r22, r14
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    13ae:	80 2f       	mov	r24, r16
    13b0:	01 13       	cpse	r16, r17
    13b2:	f3 cf       	rjmp	.-26     	; 0x139a <vfprintf+0x370>
    13b4:	e6 cf       	rjmp	.-52     	; 0x1382 <vfprintf+0x358>
    13b6:	85 e4       	ldi	r24, 0x45	; 69
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	b7 01       	movw	r22, r14
    13bc:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    13c0:	d7 fc       	sbrc	r13, 7
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <vfprintf+0x3a6>
    13c4:	c1 14       	cp	r12, r1
    13c6:	d1 04       	cpc	r13, r1
    13c8:	41 f4       	brne	.+16     	; 0x13da <vfprintf+0x3b0>
    13ca:	ec 85       	ldd	r30, Y+12	; 0x0c
    13cc:	e4 ff       	sbrs	r30, 4
    13ce:	05 c0       	rjmp	.+10     	; 0x13da <vfprintf+0x3b0>
    13d0:	d1 94       	neg	r13
    13d2:	c1 94       	neg	r12
    13d4:	d1 08       	sbc	r13, r1
    13d6:	8d e2       	ldi	r24, 0x2D	; 45
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <vfprintf+0x3b2>
    13da:	8b e2       	ldi	r24, 0x2B	; 43
    13dc:	b7 01       	movw	r22, r14
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    13e4:	80 e3       	ldi	r24, 0x30	; 48
    13e6:	2a e0       	ldi	r18, 0x0A	; 10
    13e8:	c2 16       	cp	r12, r18
    13ea:	d1 04       	cpc	r13, r1
    13ec:	2c f0       	brlt	.+10     	; 0x13f8 <vfprintf+0x3ce>
    13ee:	8f 5f       	subi	r24, 0xFF	; 255
    13f0:	fa e0       	ldi	r31, 0x0A	; 10
    13f2:	cf 1a       	sub	r12, r31
    13f4:	d1 08       	sbc	r13, r1
    13f6:	f7 cf       	rjmp	.-18     	; 0x13e6 <vfprintf+0x3bc>
    13f8:	b7 01       	movw	r22, r14
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    1400:	b7 01       	movw	r22, r14
    1402:	c6 01       	movw	r24, r12
    1404:	c0 96       	adiw	r24, 0x30	; 48
    1406:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    140a:	54 c1       	rjmp	.+680    	; 0x16b4 <vfprintf+0x68a>
    140c:	83 36       	cpi	r24, 0x63	; 99
    140e:	31 f0       	breq	.+12     	; 0x141c <vfprintf+0x3f2>
    1410:	83 37       	cpi	r24, 0x73	; 115
    1412:	79 f0       	breq	.+30     	; 0x1432 <vfprintf+0x408>
    1414:	83 35       	cpi	r24, 0x53	; 83
    1416:	09 f0       	breq	.+2      	; 0x141a <vfprintf+0x3f0>
    1418:	56 c0       	rjmp	.+172    	; 0x14c6 <vfprintf+0x49c>
    141a:	20 c0       	rjmp	.+64     	; 0x145c <vfprintf+0x432>
    141c:	56 01       	movw	r10, r12
    141e:	32 e0       	ldi	r19, 0x02	; 2
    1420:	a3 0e       	add	r10, r19
    1422:	b1 1c       	adc	r11, r1
    1424:	f6 01       	movw	r30, r12
    1426:	80 81       	ld	r24, Z
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	01 e0       	ldi	r16, 0x01	; 1
    142c:	10 e0       	ldi	r17, 0x00	; 0
    142e:	63 01       	movw	r12, r6
    1430:	12 c0       	rjmp	.+36     	; 0x1456 <vfprintf+0x42c>
    1432:	56 01       	movw	r10, r12
    1434:	f2 e0       	ldi	r31, 0x02	; 2
    1436:	af 0e       	add	r10, r31
    1438:	b1 1c       	adc	r11, r1
    143a:	f6 01       	movw	r30, r12
    143c:	c0 80       	ld	r12, Z
    143e:	d1 80       	ldd	r13, Z+1	; 0x01
    1440:	96 fe       	sbrs	r9, 6
    1442:	03 c0       	rjmp	.+6      	; 0x144a <vfprintf+0x420>
    1444:	61 2f       	mov	r22, r17
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	02 c0       	rjmp	.+4      	; 0x144e <vfprintf+0x424>
    144a:	6f ef       	ldi	r22, 0xFF	; 255
    144c:	7f ef       	ldi	r23, 0xFF	; 255
    144e:	c6 01       	movw	r24, r12
    1450:	0e 94 ac 0c 	call	0x1958	; 0x1958 <strnlen>
    1454:	8c 01       	movw	r16, r24
    1456:	f9 2d       	mov	r31, r9
    1458:	ff 77       	andi	r31, 0x7F	; 127
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <vfprintf+0x45a>
    145c:	56 01       	movw	r10, r12
    145e:	22 e0       	ldi	r18, 0x02	; 2
    1460:	a2 0e       	add	r10, r18
    1462:	b1 1c       	adc	r11, r1
    1464:	f6 01       	movw	r30, r12
    1466:	c0 80       	ld	r12, Z
    1468:	d1 80       	ldd	r13, Z+1	; 0x01
    146a:	96 fe       	sbrs	r9, 6
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <vfprintf+0x44a>
    146e:	61 2f       	mov	r22, r17
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <vfprintf+0x44e>
    1474:	6f ef       	ldi	r22, 0xFF	; 255
    1476:	7f ef       	ldi	r23, 0xFF	; 255
    1478:	c6 01       	movw	r24, r12
    147a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <strnlen_P>
    147e:	8c 01       	movw	r16, r24
    1480:	f9 2d       	mov	r31, r9
    1482:	f0 68       	ori	r31, 0x80	; 128
    1484:	9f 2e       	mov	r9, r31
    1486:	f3 fd       	sbrc	r31, 3
    1488:	1a c0       	rjmp	.+52     	; 0x14be <vfprintf+0x494>
    148a:	85 2d       	mov	r24, r5
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	08 17       	cp	r16, r24
    1490:	19 07       	cpc	r17, r25
    1492:	a8 f4       	brcc	.+42     	; 0x14be <vfprintf+0x494>
    1494:	b7 01       	movw	r22, r14
    1496:	80 e2       	ldi	r24, 0x20	; 32
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    149e:	5a 94       	dec	r5
    14a0:	f4 cf       	rjmp	.-24     	; 0x148a <vfprintf+0x460>
    14a2:	f6 01       	movw	r30, r12
    14a4:	97 fc       	sbrc	r9, 7
    14a6:	85 91       	lpm	r24, Z+
    14a8:	97 fe       	sbrs	r9, 7
    14aa:	81 91       	ld	r24, Z+
    14ac:	6f 01       	movw	r12, r30
    14ae:	b7 01       	movw	r22, r14
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    14b6:	51 10       	cpse	r5, r1
    14b8:	5a 94       	dec	r5
    14ba:	01 50       	subi	r16, 0x01	; 1
    14bc:	11 09       	sbc	r17, r1
    14be:	01 15       	cp	r16, r1
    14c0:	11 05       	cpc	r17, r1
    14c2:	79 f7       	brne	.-34     	; 0x14a2 <vfprintf+0x478>
    14c4:	f7 c0       	rjmp	.+494    	; 0x16b4 <vfprintf+0x68a>
    14c6:	84 36       	cpi	r24, 0x64	; 100
    14c8:	11 f0       	breq	.+4      	; 0x14ce <vfprintf+0x4a4>
    14ca:	89 36       	cpi	r24, 0x69	; 105
    14cc:	61 f5       	brne	.+88     	; 0x1526 <vfprintf+0x4fc>
    14ce:	56 01       	movw	r10, r12
    14d0:	97 fe       	sbrs	r9, 7
    14d2:	09 c0       	rjmp	.+18     	; 0x14e6 <vfprintf+0x4bc>
    14d4:	24 e0       	ldi	r18, 0x04	; 4
    14d6:	a2 0e       	add	r10, r18
    14d8:	b1 1c       	adc	r11, r1
    14da:	f6 01       	movw	r30, r12
    14dc:	60 81       	ld	r22, Z
    14de:	71 81       	ldd	r23, Z+1	; 0x01
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	0a c0       	rjmp	.+20     	; 0x14fa <vfprintf+0x4d0>
    14e6:	f2 e0       	ldi	r31, 0x02	; 2
    14e8:	af 0e       	add	r10, r31
    14ea:	b1 1c       	adc	r11, r1
    14ec:	f6 01       	movw	r30, r12
    14ee:	60 81       	ld	r22, Z
    14f0:	71 81       	ldd	r23, Z+1	; 0x01
    14f2:	07 2e       	mov	r0, r23
    14f4:	00 0c       	add	r0, r0
    14f6:	88 0b       	sbc	r24, r24
    14f8:	99 0b       	sbc	r25, r25
    14fa:	f9 2d       	mov	r31, r9
    14fc:	ff 76       	andi	r31, 0x6F	; 111
    14fe:	9f 2e       	mov	r9, r31
    1500:	97 ff       	sbrs	r25, 7
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <vfprintf+0x4ec>
    1504:	90 95       	com	r25
    1506:	80 95       	com	r24
    1508:	70 95       	com	r23
    150a:	61 95       	neg	r22
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	8f 4f       	sbci	r24, 0xFF	; 255
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	f0 68       	ori	r31, 0x80	; 128
    1514:	9f 2e       	mov	r9, r31
    1516:	2a e0       	ldi	r18, 0x0A	; 10
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	a3 01       	movw	r20, r6
    151c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__ultoa_invert>
    1520:	c8 2e       	mov	r12, r24
    1522:	c6 18       	sub	r12, r6
    1524:	3f c0       	rjmp	.+126    	; 0x15a4 <vfprintf+0x57a>
    1526:	09 2d       	mov	r16, r9
    1528:	85 37       	cpi	r24, 0x75	; 117
    152a:	21 f4       	brne	.+8      	; 0x1534 <vfprintf+0x50a>
    152c:	0f 7e       	andi	r16, 0xEF	; 239
    152e:	2a e0       	ldi	r18, 0x0A	; 10
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	1d c0       	rjmp	.+58     	; 0x156e <vfprintf+0x544>
    1534:	09 7f       	andi	r16, 0xF9	; 249
    1536:	8f 36       	cpi	r24, 0x6F	; 111
    1538:	91 f0       	breq	.+36     	; 0x155e <vfprintf+0x534>
    153a:	18 f4       	brcc	.+6      	; 0x1542 <vfprintf+0x518>
    153c:	88 35       	cpi	r24, 0x58	; 88
    153e:	59 f0       	breq	.+22     	; 0x1556 <vfprintf+0x52c>
    1540:	c3 c0       	rjmp	.+390    	; 0x16c8 <vfprintf+0x69e>
    1542:	80 37       	cpi	r24, 0x70	; 112
    1544:	19 f0       	breq	.+6      	; 0x154c <vfprintf+0x522>
    1546:	88 37       	cpi	r24, 0x78	; 120
    1548:	11 f0       	breq	.+4      	; 0x154e <vfprintf+0x524>
    154a:	be c0       	rjmp	.+380    	; 0x16c8 <vfprintf+0x69e>
    154c:	00 61       	ori	r16, 0x10	; 16
    154e:	04 ff       	sbrs	r16, 4
    1550:	09 c0       	rjmp	.+18     	; 0x1564 <vfprintf+0x53a>
    1552:	04 60       	ori	r16, 0x04	; 4
    1554:	07 c0       	rjmp	.+14     	; 0x1564 <vfprintf+0x53a>
    1556:	94 fe       	sbrs	r9, 4
    1558:	08 c0       	rjmp	.+16     	; 0x156a <vfprintf+0x540>
    155a:	06 60       	ori	r16, 0x06	; 6
    155c:	06 c0       	rjmp	.+12     	; 0x156a <vfprintf+0x540>
    155e:	28 e0       	ldi	r18, 0x08	; 8
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	05 c0       	rjmp	.+10     	; 0x156e <vfprintf+0x544>
    1564:	20 e1       	ldi	r18, 0x10	; 16
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	02 c0       	rjmp	.+4      	; 0x156e <vfprintf+0x544>
    156a:	20 e1       	ldi	r18, 0x10	; 16
    156c:	32 e0       	ldi	r19, 0x02	; 2
    156e:	56 01       	movw	r10, r12
    1570:	07 ff       	sbrs	r16, 7
    1572:	09 c0       	rjmp	.+18     	; 0x1586 <vfprintf+0x55c>
    1574:	84 e0       	ldi	r24, 0x04	; 4
    1576:	a8 0e       	add	r10, r24
    1578:	b1 1c       	adc	r11, r1
    157a:	f6 01       	movw	r30, r12
    157c:	60 81       	ld	r22, Z
    157e:	71 81       	ldd	r23, Z+1	; 0x01
    1580:	82 81       	ldd	r24, Z+2	; 0x02
    1582:	93 81       	ldd	r25, Z+3	; 0x03
    1584:	08 c0       	rjmp	.+16     	; 0x1596 <vfprintf+0x56c>
    1586:	f2 e0       	ldi	r31, 0x02	; 2
    1588:	af 0e       	add	r10, r31
    158a:	b1 1c       	adc	r11, r1
    158c:	f6 01       	movw	r30, r12
    158e:	60 81       	ld	r22, Z
    1590:	71 81       	ldd	r23, Z+1	; 0x01
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a3 01       	movw	r20, r6
    1598:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__ultoa_invert>
    159c:	c8 2e       	mov	r12, r24
    159e:	c6 18       	sub	r12, r6
    15a0:	0f 77       	andi	r16, 0x7F	; 127
    15a2:	90 2e       	mov	r9, r16
    15a4:	96 fe       	sbrs	r9, 6
    15a6:	0b c0       	rjmp	.+22     	; 0x15be <vfprintf+0x594>
    15a8:	09 2d       	mov	r16, r9
    15aa:	0e 7f       	andi	r16, 0xFE	; 254
    15ac:	c1 16       	cp	r12, r17
    15ae:	50 f4       	brcc	.+20     	; 0x15c4 <vfprintf+0x59a>
    15b0:	94 fe       	sbrs	r9, 4
    15b2:	0a c0       	rjmp	.+20     	; 0x15c8 <vfprintf+0x59e>
    15b4:	92 fc       	sbrc	r9, 2
    15b6:	08 c0       	rjmp	.+16     	; 0x15c8 <vfprintf+0x59e>
    15b8:	09 2d       	mov	r16, r9
    15ba:	0e 7e       	andi	r16, 0xEE	; 238
    15bc:	05 c0       	rjmp	.+10     	; 0x15c8 <vfprintf+0x59e>
    15be:	dc 2c       	mov	r13, r12
    15c0:	09 2d       	mov	r16, r9
    15c2:	03 c0       	rjmp	.+6      	; 0x15ca <vfprintf+0x5a0>
    15c4:	dc 2c       	mov	r13, r12
    15c6:	01 c0       	rjmp	.+2      	; 0x15ca <vfprintf+0x5a0>
    15c8:	d1 2e       	mov	r13, r17
    15ca:	04 ff       	sbrs	r16, 4
    15cc:	0d c0       	rjmp	.+26     	; 0x15e8 <vfprintf+0x5be>
    15ce:	fe 01       	movw	r30, r28
    15d0:	ec 0d       	add	r30, r12
    15d2:	f1 1d       	adc	r31, r1
    15d4:	80 81       	ld	r24, Z
    15d6:	80 33       	cpi	r24, 0x30	; 48
    15d8:	11 f4       	brne	.+4      	; 0x15de <vfprintf+0x5b4>
    15da:	09 7e       	andi	r16, 0xE9	; 233
    15dc:	09 c0       	rjmp	.+18     	; 0x15f0 <vfprintf+0x5c6>
    15de:	02 ff       	sbrs	r16, 2
    15e0:	06 c0       	rjmp	.+12     	; 0x15ee <vfprintf+0x5c4>
    15e2:	d3 94       	inc	r13
    15e4:	d3 94       	inc	r13
    15e6:	04 c0       	rjmp	.+8      	; 0x15f0 <vfprintf+0x5c6>
    15e8:	80 2f       	mov	r24, r16
    15ea:	86 78       	andi	r24, 0x86	; 134
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <vfprintf+0x5c6>
    15ee:	d3 94       	inc	r13
    15f0:	03 fd       	sbrc	r16, 3
    15f2:	11 c0       	rjmp	.+34     	; 0x1616 <vfprintf+0x5ec>
    15f4:	00 ff       	sbrs	r16, 0
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <vfprintf+0x5da>
    15f8:	1c 2d       	mov	r17, r12
    15fa:	d5 14       	cp	r13, r5
    15fc:	80 f4       	brcc	.+32     	; 0x161e <vfprintf+0x5f4>
    15fe:	15 0d       	add	r17, r5
    1600:	1d 19       	sub	r17, r13
    1602:	0d c0       	rjmp	.+26     	; 0x161e <vfprintf+0x5f4>
    1604:	d5 14       	cp	r13, r5
    1606:	58 f4       	brcc	.+22     	; 0x161e <vfprintf+0x5f4>
    1608:	b7 01       	movw	r22, r14
    160a:	80 e2       	ldi	r24, 0x20	; 32
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    1612:	d3 94       	inc	r13
    1614:	f7 cf       	rjmp	.-18     	; 0x1604 <vfprintf+0x5da>
    1616:	d5 14       	cp	r13, r5
    1618:	10 f4       	brcc	.+4      	; 0x161e <vfprintf+0x5f4>
    161a:	5d 18       	sub	r5, r13
    161c:	01 c0       	rjmp	.+2      	; 0x1620 <vfprintf+0x5f6>
    161e:	51 2c       	mov	r5, r1
    1620:	04 ff       	sbrs	r16, 4
    1622:	10 c0       	rjmp	.+32     	; 0x1644 <vfprintf+0x61a>
    1624:	b7 01       	movw	r22, r14
    1626:	80 e3       	ldi	r24, 0x30	; 48
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    162e:	02 ff       	sbrs	r16, 2
    1630:	17 c0       	rjmp	.+46     	; 0x1660 <vfprintf+0x636>
    1632:	01 fd       	sbrc	r16, 1
    1634:	03 c0       	rjmp	.+6      	; 0x163c <vfprintf+0x612>
    1636:	88 e7       	ldi	r24, 0x78	; 120
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <vfprintf+0x616>
    163c:	88 e5       	ldi	r24, 0x58	; 88
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	b7 01       	movw	r22, r14
    1642:	0c c0       	rjmp	.+24     	; 0x165c <vfprintf+0x632>
    1644:	80 2f       	mov	r24, r16
    1646:	86 78       	andi	r24, 0x86	; 134
    1648:	59 f0       	breq	.+22     	; 0x1660 <vfprintf+0x636>
    164a:	01 ff       	sbrs	r16, 1
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <vfprintf+0x628>
    164e:	8b e2       	ldi	r24, 0x2B	; 43
    1650:	01 c0       	rjmp	.+2      	; 0x1654 <vfprintf+0x62a>
    1652:	80 e2       	ldi	r24, 0x20	; 32
    1654:	07 fd       	sbrc	r16, 7
    1656:	8d e2       	ldi	r24, 0x2D	; 45
    1658:	b7 01       	movw	r22, r14
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    1660:	c1 16       	cp	r12, r17
    1662:	38 f4       	brcc	.+14     	; 0x1672 <vfprintf+0x648>
    1664:	b7 01       	movw	r22, r14
    1666:	80 e3       	ldi	r24, 0x30	; 48
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    166e:	11 50       	subi	r17, 0x01	; 1
    1670:	f7 cf       	rjmp	.-18     	; 0x1660 <vfprintf+0x636>
    1672:	ca 94       	dec	r12
    1674:	f3 01       	movw	r30, r6
    1676:	ec 0d       	add	r30, r12
    1678:	f1 1d       	adc	r31, r1
    167a:	80 81       	ld	r24, Z
    167c:	b7 01       	movw	r22, r14
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    1684:	c1 10       	cpse	r12, r1
    1686:	f5 cf       	rjmp	.-22     	; 0x1672 <vfprintf+0x648>
    1688:	15 c0       	rjmp	.+42     	; 0x16b4 <vfprintf+0x68a>
    168a:	f4 e0       	ldi	r31, 0x04	; 4
    168c:	f5 15       	cp	r31, r5
    168e:	60 f5       	brcc	.+88     	; 0x16e8 <vfprintf+0x6be>
    1690:	84 e0       	ldi	r24, 0x04	; 4
    1692:	58 1a       	sub	r5, r24
    1694:	93 fe       	sbrs	r9, 3
    1696:	1f c0       	rjmp	.+62     	; 0x16d6 <vfprintf+0x6ac>
    1698:	01 11       	cpse	r16, r1
    169a:	27 c0       	rjmp	.+78     	; 0x16ea <vfprintf+0x6c0>
    169c:	2c 85       	ldd	r18, Y+12	; 0x0c
    169e:	23 ff       	sbrs	r18, 3
    16a0:	2a c0       	rjmp	.+84     	; 0x16f6 <vfprintf+0x6cc>
    16a2:	08 e6       	ldi	r16, 0x68	; 104
    16a4:	10 e0       	ldi	r17, 0x00	; 0
    16a6:	39 2d       	mov	r19, r9
    16a8:	30 71       	andi	r19, 0x10	; 16
    16aa:	93 2e       	mov	r9, r19
    16ac:	f8 01       	movw	r30, r16
    16ae:	84 91       	lpm	r24, Z
    16b0:	81 11       	cpse	r24, r1
    16b2:	24 c0       	rjmp	.+72     	; 0x16fc <vfprintf+0x6d2>
    16b4:	55 20       	and	r5, r5
    16b6:	09 f4       	brne	.+2      	; 0x16ba <vfprintf+0x690>
    16b8:	e4 cc       	rjmp	.-1592   	; 0x1082 <vfprintf+0x58>
    16ba:	b7 01       	movw	r22, r14
    16bc:	80 e2       	ldi	r24, 0x20	; 32
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    16c4:	5a 94       	dec	r5
    16c6:	f6 cf       	rjmp	.-20     	; 0x16b4 <vfprintf+0x68a>
    16c8:	f7 01       	movw	r30, r14
    16ca:	86 81       	ldd	r24, Z+6	; 0x06
    16cc:	97 81       	ldd	r25, Z+7	; 0x07
    16ce:	26 c0       	rjmp	.+76     	; 0x171c <vfprintf+0x6f2>
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	9f ef       	ldi	r25, 0xFF	; 255
    16d4:	23 c0       	rjmp	.+70     	; 0x171c <vfprintf+0x6f2>
    16d6:	b7 01       	movw	r22, r14
    16d8:	80 e2       	ldi	r24, 0x20	; 32
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    16e0:	5a 94       	dec	r5
    16e2:	51 10       	cpse	r5, r1
    16e4:	f8 cf       	rjmp	.-16     	; 0x16d6 <vfprintf+0x6ac>
    16e6:	d8 cf       	rjmp	.-80     	; 0x1698 <vfprintf+0x66e>
    16e8:	51 2c       	mov	r5, r1
    16ea:	b7 01       	movw	r22, r14
    16ec:	80 2f       	mov	r24, r16
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    16f4:	d3 cf       	rjmp	.-90     	; 0x169c <vfprintf+0x672>
    16f6:	0c e6       	ldi	r16, 0x6C	; 108
    16f8:	10 e0       	ldi	r17, 0x00	; 0
    16fa:	d5 cf       	rjmp	.-86     	; 0x16a6 <vfprintf+0x67c>
    16fc:	91 10       	cpse	r9, r1
    16fe:	80 52       	subi	r24, 0x20	; 32
    1700:	b7 01       	movw	r22, r14
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    1708:	0f 5f       	subi	r16, 0xFF	; 255
    170a:	1f 4f       	sbci	r17, 0xFF	; 255
    170c:	cf cf       	rjmp	.-98     	; 0x16ac <vfprintf+0x682>
    170e:	23 e0       	ldi	r18, 0x03	; 3
    1710:	25 15       	cp	r18, r5
    1712:	10 f4       	brcc	.+4      	; 0x1718 <vfprintf+0x6ee>
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	bd cf       	rjmp	.-134    	; 0x1692 <vfprintf+0x668>
    1718:	51 2c       	mov	r5, r1
    171a:	c0 cf       	rjmp	.-128    	; 0x169c <vfprintf+0x672>
    171c:	60 96       	adiw	r28, 0x10	; 16
    171e:	e2 e1       	ldi	r30, 0x12	; 18
    1720:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__epilogue_restores__>

00001724 <__prologue_saves__>:
    1724:	2f 92       	push	r2
    1726:	3f 92       	push	r3
    1728:	4f 92       	push	r4
    172a:	5f 92       	push	r5
    172c:	6f 92       	push	r6
    172e:	7f 92       	push	r7
    1730:	8f 92       	push	r8
    1732:	9f 92       	push	r9
    1734:	af 92       	push	r10
    1736:	bf 92       	push	r11
    1738:	cf 92       	push	r12
    173a:	df 92       	push	r13
    173c:	ef 92       	push	r14
    173e:	ff 92       	push	r15
    1740:	0f 93       	push	r16
    1742:	1f 93       	push	r17
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	ca 1b       	sub	r28, r26
    174e:	db 0b       	sbc	r29, r27
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	09 94       	ijmp

0000175c <__epilogue_restores__>:
    175c:	2a 88       	ldd	r2, Y+18	; 0x12
    175e:	39 88       	ldd	r3, Y+17	; 0x11
    1760:	48 88       	ldd	r4, Y+16	; 0x10
    1762:	5f 84       	ldd	r5, Y+15	; 0x0f
    1764:	6e 84       	ldd	r6, Y+14	; 0x0e
    1766:	7d 84       	ldd	r7, Y+13	; 0x0d
    1768:	8c 84       	ldd	r8, Y+12	; 0x0c
    176a:	9b 84       	ldd	r9, Y+11	; 0x0b
    176c:	aa 84       	ldd	r10, Y+10	; 0x0a
    176e:	b9 84       	ldd	r11, Y+9	; 0x09
    1770:	c8 84       	ldd	r12, Y+8	; 0x08
    1772:	df 80       	ldd	r13, Y+7	; 0x07
    1774:	ee 80       	ldd	r14, Y+6	; 0x06
    1776:	fd 80       	ldd	r15, Y+5	; 0x05
    1778:	0c 81       	ldd	r16, Y+4	; 0x04
    177a:	1b 81       	ldd	r17, Y+3	; 0x03
    177c:	aa 81       	ldd	r26, Y+2	; 0x02
    177e:	b9 81       	ldd	r27, Y+1	; 0x01
    1780:	ce 0f       	add	r28, r30
    1782:	d1 1d       	adc	r29, r1
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	ed 01       	movw	r28, r26
    1790:	08 95       	ret

00001792 <__ftoa_engine>:
    1792:	28 30       	cpi	r18, 0x08	; 8
    1794:	08 f0       	brcs	.+2      	; 0x1798 <__ftoa_engine+0x6>
    1796:	27 e0       	ldi	r18, 0x07	; 7
    1798:	33 27       	eor	r19, r19
    179a:	da 01       	movw	r26, r20
    179c:	99 0f       	add	r25, r25
    179e:	31 1d       	adc	r19, r1
    17a0:	87 fd       	sbrc	r24, 7
    17a2:	91 60       	ori	r25, 0x01	; 1
    17a4:	00 96       	adiw	r24, 0x00	; 0
    17a6:	61 05       	cpc	r22, r1
    17a8:	71 05       	cpc	r23, r1
    17aa:	39 f4       	brne	.+14     	; 0x17ba <__ftoa_engine+0x28>
    17ac:	32 60       	ori	r19, 0x02	; 2
    17ae:	2e 5f       	subi	r18, 0xFE	; 254
    17b0:	3d 93       	st	X+, r19
    17b2:	30 e3       	ldi	r19, 0x30	; 48
    17b4:	2a 95       	dec	r18
    17b6:	e1 f7       	brne	.-8      	; 0x17b0 <__ftoa_engine+0x1e>
    17b8:	08 95       	ret
    17ba:	9f 3f       	cpi	r25, 0xFF	; 255
    17bc:	30 f0       	brcs	.+12     	; 0x17ca <__ftoa_engine+0x38>
    17be:	80 38       	cpi	r24, 0x80	; 128
    17c0:	71 05       	cpc	r23, r1
    17c2:	61 05       	cpc	r22, r1
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <__ftoa_engine+0x36>
    17c6:	3c 5f       	subi	r19, 0xFC	; 252
    17c8:	3c 5f       	subi	r19, 0xFC	; 252
    17ca:	3d 93       	st	X+, r19
    17cc:	91 30       	cpi	r25, 0x01	; 1
    17ce:	08 f0       	brcs	.+2      	; 0x17d2 <__ftoa_engine+0x40>
    17d0:	80 68       	ori	r24, 0x80	; 128
    17d2:	91 1d       	adc	r25, r1
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	1f 93       	push	r17
    17da:	0f 93       	push	r16
    17dc:	ff 92       	push	r15
    17de:	ef 92       	push	r14
    17e0:	19 2f       	mov	r17, r25
    17e2:	98 7f       	andi	r25, 0xF8	; 248
    17e4:	96 95       	lsr	r25
    17e6:	e9 2f       	mov	r30, r25
    17e8:	96 95       	lsr	r25
    17ea:	96 95       	lsr	r25
    17ec:	e9 0f       	add	r30, r25
    17ee:	ff 27       	eor	r31, r31
    17f0:	e6 53       	subi	r30, 0x36	; 54
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	99 27       	eor	r25, r25
    17f6:	33 27       	eor	r19, r19
    17f8:	ee 24       	eor	r14, r14
    17fa:	ff 24       	eor	r15, r15
    17fc:	a7 01       	movw	r20, r14
    17fe:	e7 01       	movw	r28, r14
    1800:	05 90       	lpm	r0, Z+
    1802:	08 94       	sec
    1804:	07 94       	ror	r0
    1806:	28 f4       	brcc	.+10     	; 0x1812 <__ftoa_engine+0x80>
    1808:	36 0f       	add	r19, r22
    180a:	e7 1e       	adc	r14, r23
    180c:	f8 1e       	adc	r15, r24
    180e:	49 1f       	adc	r20, r25
    1810:	51 1d       	adc	r21, r1
    1812:	66 0f       	add	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	88 1f       	adc	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	06 94       	lsr	r0
    181c:	a1 f7       	brne	.-24     	; 0x1806 <__ftoa_engine+0x74>
    181e:	05 90       	lpm	r0, Z+
    1820:	07 94       	ror	r0
    1822:	28 f4       	brcc	.+10     	; 0x182e <__ftoa_engine+0x9c>
    1824:	e7 0e       	add	r14, r23
    1826:	f8 1e       	adc	r15, r24
    1828:	49 1f       	adc	r20, r25
    182a:	56 1f       	adc	r21, r22
    182c:	c1 1d       	adc	r28, r1
    182e:	77 0f       	add	r23, r23
    1830:	88 1f       	adc	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	66 1f       	adc	r22, r22
    1836:	06 94       	lsr	r0
    1838:	a1 f7       	brne	.-24     	; 0x1822 <__ftoa_engine+0x90>
    183a:	05 90       	lpm	r0, Z+
    183c:	07 94       	ror	r0
    183e:	28 f4       	brcc	.+10     	; 0x184a <__ftoa_engine+0xb8>
    1840:	f8 0e       	add	r15, r24
    1842:	49 1f       	adc	r20, r25
    1844:	56 1f       	adc	r21, r22
    1846:	c7 1f       	adc	r28, r23
    1848:	d1 1d       	adc	r29, r1
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	66 1f       	adc	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	06 94       	lsr	r0
    1854:	a1 f7       	brne	.-24     	; 0x183e <__ftoa_engine+0xac>
    1856:	05 90       	lpm	r0, Z+
    1858:	07 94       	ror	r0
    185a:	20 f4       	brcc	.+8      	; 0x1864 <__ftoa_engine+0xd2>
    185c:	49 0f       	add	r20, r25
    185e:	56 1f       	adc	r21, r22
    1860:	c7 1f       	adc	r28, r23
    1862:	d8 1f       	adc	r29, r24
    1864:	99 0f       	add	r25, r25
    1866:	66 1f       	adc	r22, r22
    1868:	77 1f       	adc	r23, r23
    186a:	88 1f       	adc	r24, r24
    186c:	06 94       	lsr	r0
    186e:	a9 f7       	brne	.-22     	; 0x185a <__ftoa_engine+0xc8>
    1870:	84 91       	lpm	r24, Z
    1872:	10 95       	com	r17
    1874:	17 70       	andi	r17, 0x07	; 7
    1876:	41 f0       	breq	.+16     	; 0x1888 <__ftoa_engine+0xf6>
    1878:	d6 95       	lsr	r29
    187a:	c7 95       	ror	r28
    187c:	57 95       	ror	r21
    187e:	47 95       	ror	r20
    1880:	f7 94       	ror	r15
    1882:	e7 94       	ror	r14
    1884:	1a 95       	dec	r17
    1886:	c1 f7       	brne	.-16     	; 0x1878 <__ftoa_engine+0xe6>
    1888:	e0 e7       	ldi	r30, 0x70	; 112
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	68 94       	set
    188e:	15 90       	lpm	r1, Z+
    1890:	15 91       	lpm	r17, Z+
    1892:	35 91       	lpm	r19, Z+
    1894:	65 91       	lpm	r22, Z+
    1896:	95 91       	lpm	r25, Z+
    1898:	05 90       	lpm	r0, Z+
    189a:	7f e2       	ldi	r23, 0x2F	; 47
    189c:	73 95       	inc	r23
    189e:	e1 18       	sub	r14, r1
    18a0:	f1 0a       	sbc	r15, r17
    18a2:	43 0b       	sbc	r20, r19
    18a4:	56 0b       	sbc	r21, r22
    18a6:	c9 0b       	sbc	r28, r25
    18a8:	d0 09       	sbc	r29, r0
    18aa:	c0 f7       	brcc	.-16     	; 0x189c <__ftoa_engine+0x10a>
    18ac:	e1 0c       	add	r14, r1
    18ae:	f1 1e       	adc	r15, r17
    18b0:	43 1f       	adc	r20, r19
    18b2:	56 1f       	adc	r21, r22
    18b4:	c9 1f       	adc	r28, r25
    18b6:	d0 1d       	adc	r29, r0
    18b8:	7e f4       	brtc	.+30     	; 0x18d8 <__ftoa_engine+0x146>
    18ba:	70 33       	cpi	r23, 0x30	; 48
    18bc:	11 f4       	brne	.+4      	; 0x18c2 <__ftoa_engine+0x130>
    18be:	8a 95       	dec	r24
    18c0:	e6 cf       	rjmp	.-52     	; 0x188e <__ftoa_engine+0xfc>
    18c2:	e8 94       	clt
    18c4:	01 50       	subi	r16, 0x01	; 1
    18c6:	30 f0       	brcs	.+12     	; 0x18d4 <__ftoa_engine+0x142>
    18c8:	08 0f       	add	r16, r24
    18ca:	0a f4       	brpl	.+2      	; 0x18ce <__ftoa_engine+0x13c>
    18cc:	00 27       	eor	r16, r16
    18ce:	02 17       	cp	r16, r18
    18d0:	08 f4       	brcc	.+2      	; 0x18d4 <__ftoa_engine+0x142>
    18d2:	20 2f       	mov	r18, r16
    18d4:	23 95       	inc	r18
    18d6:	02 2f       	mov	r16, r18
    18d8:	7a 33       	cpi	r23, 0x3A	; 58
    18da:	28 f0       	brcs	.+10     	; 0x18e6 <__ftoa_engine+0x154>
    18dc:	79 e3       	ldi	r23, 0x39	; 57
    18de:	7d 93       	st	X+, r23
    18e0:	2a 95       	dec	r18
    18e2:	e9 f7       	brne	.-6      	; 0x18de <__ftoa_engine+0x14c>
    18e4:	10 c0       	rjmp	.+32     	; 0x1906 <__ftoa_engine+0x174>
    18e6:	7d 93       	st	X+, r23
    18e8:	2a 95       	dec	r18
    18ea:	89 f6       	brne	.-94     	; 0x188e <__ftoa_engine+0xfc>
    18ec:	06 94       	lsr	r0
    18ee:	97 95       	ror	r25
    18f0:	67 95       	ror	r22
    18f2:	37 95       	ror	r19
    18f4:	17 95       	ror	r17
    18f6:	17 94       	ror	r1
    18f8:	e1 18       	sub	r14, r1
    18fa:	f1 0a       	sbc	r15, r17
    18fc:	43 0b       	sbc	r20, r19
    18fe:	56 0b       	sbc	r21, r22
    1900:	c9 0b       	sbc	r28, r25
    1902:	d0 09       	sbc	r29, r0
    1904:	98 f0       	brcs	.+38     	; 0x192c <__ftoa_engine+0x19a>
    1906:	23 95       	inc	r18
    1908:	7e 91       	ld	r23, -X
    190a:	73 95       	inc	r23
    190c:	7a 33       	cpi	r23, 0x3A	; 58
    190e:	08 f0       	brcs	.+2      	; 0x1912 <__ftoa_engine+0x180>
    1910:	70 e3       	ldi	r23, 0x30	; 48
    1912:	7c 93       	st	X, r23
    1914:	20 13       	cpse	r18, r16
    1916:	b8 f7       	brcc	.-18     	; 0x1906 <__ftoa_engine+0x174>
    1918:	7e 91       	ld	r23, -X
    191a:	70 61       	ori	r23, 0x10	; 16
    191c:	7d 93       	st	X+, r23
    191e:	30 f0       	brcs	.+12     	; 0x192c <__ftoa_engine+0x19a>
    1920:	83 95       	inc	r24
    1922:	71 e3       	ldi	r23, 0x31	; 49
    1924:	7d 93       	st	X+, r23
    1926:	70 e3       	ldi	r23, 0x30	; 48
    1928:	2a 95       	dec	r18
    192a:	e1 f7       	brne	.-8      	; 0x1924 <__ftoa_engine+0x192>
    192c:	11 24       	eor	r1, r1
    192e:	ef 90       	pop	r14
    1930:	ff 90       	pop	r15
    1932:	0f 91       	pop	r16
    1934:	1f 91       	pop	r17
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	99 27       	eor	r25, r25
    193c:	87 fd       	sbrc	r24, 7
    193e:	90 95       	com	r25
    1940:	08 95       	ret

00001942 <strnlen_P>:
    1942:	fc 01       	movw	r30, r24
    1944:	05 90       	lpm	r0, Z+
    1946:	61 50       	subi	r22, 0x01	; 1
    1948:	70 40       	sbci	r23, 0x00	; 0
    194a:	01 10       	cpse	r0, r1
    194c:	d8 f7       	brcc	.-10     	; 0x1944 <strnlen_P+0x2>
    194e:	80 95       	com	r24
    1950:	90 95       	com	r25
    1952:	8e 0f       	add	r24, r30
    1954:	9f 1f       	adc	r25, r31
    1956:	08 95       	ret

00001958 <strnlen>:
    1958:	fc 01       	movw	r30, r24
    195a:	61 50       	subi	r22, 0x01	; 1
    195c:	70 40       	sbci	r23, 0x00	; 0
    195e:	01 90       	ld	r0, Z+
    1960:	01 10       	cpse	r0, r1
    1962:	d8 f7       	brcc	.-10     	; 0x195a <strnlen+0x2>
    1964:	80 95       	com	r24
    1966:	90 95       	com	r25
    1968:	8e 0f       	add	r24, r30
    196a:	9f 1f       	adc	r25, r31
    196c:	08 95       	ret

0000196e <fputc>:
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	fb 01       	movw	r30, r22
    1978:	23 81       	ldd	r18, Z+3	; 0x03
    197a:	21 fd       	sbrc	r18, 1
    197c:	03 c0       	rjmp	.+6      	; 0x1984 <fputc+0x16>
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	9f ef       	ldi	r25, 0xFF	; 255
    1982:	2c c0       	rjmp	.+88     	; 0x19dc <fputc+0x6e>
    1984:	22 ff       	sbrs	r18, 2
    1986:	16 c0       	rjmp	.+44     	; 0x19b4 <fputc+0x46>
    1988:	46 81       	ldd	r20, Z+6	; 0x06
    198a:	57 81       	ldd	r21, Z+7	; 0x07
    198c:	24 81       	ldd	r18, Z+4	; 0x04
    198e:	35 81       	ldd	r19, Z+5	; 0x05
    1990:	42 17       	cp	r20, r18
    1992:	53 07       	cpc	r21, r19
    1994:	44 f4       	brge	.+16     	; 0x19a6 <fputc+0x38>
    1996:	a0 81       	ld	r26, Z
    1998:	b1 81       	ldd	r27, Z+1	; 0x01
    199a:	9d 01       	movw	r18, r26
    199c:	2f 5f       	subi	r18, 0xFF	; 255
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	31 83       	std	Z+1, r19	; 0x01
    19a2:	20 83       	st	Z, r18
    19a4:	8c 93       	st	X, r24
    19a6:	26 81       	ldd	r18, Z+6	; 0x06
    19a8:	37 81       	ldd	r19, Z+7	; 0x07
    19aa:	2f 5f       	subi	r18, 0xFF	; 255
    19ac:	3f 4f       	sbci	r19, 0xFF	; 255
    19ae:	37 83       	std	Z+7, r19	; 0x07
    19b0:	26 83       	std	Z+6, r18	; 0x06
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <fputc+0x6e>
    19b4:	8b 01       	movw	r16, r22
    19b6:	ec 01       	movw	r28, r24
    19b8:	fb 01       	movw	r30, r22
    19ba:	00 84       	ldd	r0, Z+8	; 0x08
    19bc:	f1 85       	ldd	r31, Z+9	; 0x09
    19be:	e0 2d       	mov	r30, r0
    19c0:	09 95       	icall
    19c2:	89 2b       	or	r24, r25
    19c4:	e1 f6       	brne	.-72     	; 0x197e <fputc+0x10>
    19c6:	d8 01       	movw	r26, r16
    19c8:	16 96       	adiw	r26, 0x06	; 6
    19ca:	8d 91       	ld	r24, X+
    19cc:	9c 91       	ld	r25, X
    19ce:	17 97       	sbiw	r26, 0x07	; 7
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	17 96       	adiw	r26, 0x07	; 7
    19d4:	9c 93       	st	X, r25
    19d6:	8e 93       	st	-X, r24
    19d8:	16 97       	sbiw	r26, 0x06	; 6
    19da:	ce 01       	movw	r24, r28
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	08 95       	ret

000019e6 <printf>:
    19e6:	a0 e0       	ldi	r26, 0x00	; 0
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e9 ef       	ldi	r30, 0xF9	; 249
    19ec:	fc e0       	ldi	r31, 0x0C	; 12
    19ee:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__prologue_saves__+0x20>
    19f2:	ae 01       	movw	r20, r28
    19f4:	4b 5f       	subi	r20, 0xFB	; 251
    19f6:	5f 4f       	sbci	r21, 0xFF	; 255
    19f8:	fa 01       	movw	r30, r20
    19fa:	61 91       	ld	r22, Z+
    19fc:	71 91       	ld	r23, Z+
    19fe:	af 01       	movw	r20, r30
    1a00:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <__iob+0x2>
    1a04:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <__iob+0x3>
    1a08:	0e 94 15 08 	call	0x102a	; 0x102a <vfprintf>
    1a0c:	e2 e0       	ldi	r30, 0x02	; 2
    1a0e:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__epilogue_restores__+0x20>

00001a12 <putchar>:
    1a12:	60 91 44 03 	lds	r22, 0x0344	; 0x800344 <__iob+0x2>
    1a16:	70 91 45 03 	lds	r23, 0x0345	; 0x800345 <__iob+0x3>
    1a1a:	0e 94 b7 0c 	call	0x196e	; 0x196e <fputc>
    1a1e:	08 95       	ret

00001a20 <__ultoa_invert>:
    1a20:	fa 01       	movw	r30, r20
    1a22:	aa 27       	eor	r26, r26
    1a24:	28 30       	cpi	r18, 0x08	; 8
    1a26:	51 f1       	breq	.+84     	; 0x1a7c <__ultoa_invert+0x5c>
    1a28:	20 31       	cpi	r18, 0x10	; 16
    1a2a:	81 f1       	breq	.+96     	; 0x1a8c <__ultoa_invert+0x6c>
    1a2c:	e8 94       	clt
    1a2e:	6f 93       	push	r22
    1a30:	6e 7f       	andi	r22, 0xFE	; 254
    1a32:	6e 5f       	subi	r22, 0xFE	; 254
    1a34:	7f 4f       	sbci	r23, 0xFF	; 255
    1a36:	8f 4f       	sbci	r24, 0xFF	; 255
    1a38:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3a:	af 4f       	sbci	r26, 0xFF	; 255
    1a3c:	b1 e0       	ldi	r27, 0x01	; 1
    1a3e:	3e d0       	rcall	.+124    	; 0x1abc <__ultoa_invert+0x9c>
    1a40:	b4 e0       	ldi	r27, 0x04	; 4
    1a42:	3c d0       	rcall	.+120    	; 0x1abc <__ultoa_invert+0x9c>
    1a44:	67 0f       	add	r22, r23
    1a46:	78 1f       	adc	r23, r24
    1a48:	89 1f       	adc	r24, r25
    1a4a:	9a 1f       	adc	r25, r26
    1a4c:	a1 1d       	adc	r26, r1
    1a4e:	68 0f       	add	r22, r24
    1a50:	79 1f       	adc	r23, r25
    1a52:	8a 1f       	adc	r24, r26
    1a54:	91 1d       	adc	r25, r1
    1a56:	a1 1d       	adc	r26, r1
    1a58:	6a 0f       	add	r22, r26
    1a5a:	71 1d       	adc	r23, r1
    1a5c:	81 1d       	adc	r24, r1
    1a5e:	91 1d       	adc	r25, r1
    1a60:	a1 1d       	adc	r26, r1
    1a62:	20 d0       	rcall	.+64     	; 0x1aa4 <__ultoa_invert+0x84>
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <__ultoa_invert+0x48>
    1a66:	68 94       	set
    1a68:	3f 91       	pop	r19
    1a6a:	2a e0       	ldi	r18, 0x0A	; 10
    1a6c:	26 9f       	mul	r18, r22
    1a6e:	11 24       	eor	r1, r1
    1a70:	30 19       	sub	r19, r0
    1a72:	30 5d       	subi	r19, 0xD0	; 208
    1a74:	31 93       	st	Z+, r19
    1a76:	de f6       	brtc	.-74     	; 0x1a2e <__ultoa_invert+0xe>
    1a78:	cf 01       	movw	r24, r30
    1a7a:	08 95       	ret
    1a7c:	46 2f       	mov	r20, r22
    1a7e:	47 70       	andi	r20, 0x07	; 7
    1a80:	40 5d       	subi	r20, 0xD0	; 208
    1a82:	41 93       	st	Z+, r20
    1a84:	b3 e0       	ldi	r27, 0x03	; 3
    1a86:	0f d0       	rcall	.+30     	; 0x1aa6 <__ultoa_invert+0x86>
    1a88:	c9 f7       	brne	.-14     	; 0x1a7c <__ultoa_invert+0x5c>
    1a8a:	f6 cf       	rjmp	.-20     	; 0x1a78 <__ultoa_invert+0x58>
    1a8c:	46 2f       	mov	r20, r22
    1a8e:	4f 70       	andi	r20, 0x0F	; 15
    1a90:	40 5d       	subi	r20, 0xD0	; 208
    1a92:	4a 33       	cpi	r20, 0x3A	; 58
    1a94:	18 f0       	brcs	.+6      	; 0x1a9c <__ultoa_invert+0x7c>
    1a96:	49 5d       	subi	r20, 0xD9	; 217
    1a98:	31 fd       	sbrc	r19, 1
    1a9a:	40 52       	subi	r20, 0x20	; 32
    1a9c:	41 93       	st	Z+, r20
    1a9e:	02 d0       	rcall	.+4      	; 0x1aa4 <__ultoa_invert+0x84>
    1aa0:	a9 f7       	brne	.-22     	; 0x1a8c <__ultoa_invert+0x6c>
    1aa2:	ea cf       	rjmp	.-44     	; 0x1a78 <__ultoa_invert+0x58>
    1aa4:	b4 e0       	ldi	r27, 0x04	; 4
    1aa6:	a6 95       	lsr	r26
    1aa8:	97 95       	ror	r25
    1aaa:	87 95       	ror	r24
    1aac:	77 95       	ror	r23
    1aae:	67 95       	ror	r22
    1ab0:	ba 95       	dec	r27
    1ab2:	c9 f7       	brne	.-14     	; 0x1aa6 <__ultoa_invert+0x86>
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	61 05       	cpc	r22, r1
    1ab8:	71 05       	cpc	r23, r1
    1aba:	08 95       	ret
    1abc:	9b 01       	movw	r18, r22
    1abe:	ac 01       	movw	r20, r24
    1ac0:	0a 2e       	mov	r0, r26
    1ac2:	06 94       	lsr	r0
    1ac4:	57 95       	ror	r21
    1ac6:	47 95       	ror	r20
    1ac8:	37 95       	ror	r19
    1aca:	27 95       	ror	r18
    1acc:	ba 95       	dec	r27
    1ace:	c9 f7       	brne	.-14     	; 0x1ac2 <__ultoa_invert+0xa2>
    1ad0:	62 0f       	add	r22, r18
    1ad2:	73 1f       	adc	r23, r19
    1ad4:	84 1f       	adc	r24, r20
    1ad6:	95 1f       	adc	r25, r21
    1ad8:	a0 1d       	adc	r26, r0
    1ada:	08 95       	ret

00001adc <_exit>:
    1adc:	f8 94       	cli

00001ade <__stop_program>:
    1ade:	ff cf       	rjmp	.-2      	; 0x1ade <__stop_program>
