
controller_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000196  00800100  00001ae2  00001b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800296  00800296  00001d0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ca  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af9  00000000  00000000  0000316a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac9  00000000  00000000  00003c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  0000472c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073f  00000000  00000000  0000499c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a92  00000000  00000000  000050db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005b6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__vector_7>
      20:	0c 94 56 05 	jmp	0xaac	; 0xaac <__vector_8>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__vector_18>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__vector_21>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e2 ee       	ldi	r30, 0xE2	; 226
     17e:	fa e1       	ldi	r31, 0x1A	; 26
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a6 39       	cpi	r26, 0x96	; 150
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	22 e0       	ldi	r18, 0x02	; 2
     18e:	a6 e9       	ldi	r26, 0x96	; 150
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a2 3d       	cpi	r26, 0xD2	; 210
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <main>
     1a0:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <adc_init>:
/*** Function Definitions ***/
void adc_init(){
	
	/** ADCMUX: ADC Multiplexer Selection Register **/
	/* Voltage Reference Selection */
	ADMUX &= ~(1 << REFS1);			// Use Vcc as reference voltage
     1a8:	ec e7       	ldi	r30, 0x7C	; 124
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8f 77       	andi	r24, 0x7F	; 127
     1b0:	80 83       	st	Z, r24
	ADMUX |=  (1 << REFS0);
     1b2:	80 81       	ld	r24, Z
     1b4:	80 64       	ori	r24, 0x40	; 64
     1b6:	80 83       	st	Z, r24
	/* ADC Left Adjust Result */
	ADMUX &= ~(1 << ADLAR);			// Right adjust ADC reading to ADCH
     1b8:	80 81       	ld	r24, Z
     1ba:	8f 7d       	andi	r24, 0xDF	; 223
     1bc:	80 83       	st	Z, r24
	/* Analog Channel Selection Bits */
	// Change input pin as specified by the data sheet...
	ADMUX &= ~(1 << MUX3);							// Channel 0 (Coil Voltage Sensor): Input pin is PC0
     1be:	80 81       	ld	r24, Z
     1c0:	87 7f       	andi	r24, 0xF7	; 247
     1c2:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX2);
     1c4:	80 81       	ld	r24, Z
     1c6:	8b 7f       	andi	r24, 0xFB	; 251
     1c8:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX1);
     1ca:	80 81       	ld	r24, Z
     1cc:	8d 7f       	andi	r24, 0xFD	; 253
     1ce:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX0);
     1d0:	80 81       	ld	r24, Z
     1d2:	8e 7f       	andi	r24, 0xFE	; 254
     1d4:	80 83       	st	Z, r24
	ADC_next_channel = ADC_COIL_VOLTAGE_CHANNEL;	
     1d6:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <ADC_next_channel>
	// Note: Although it is named ADC_next_channel, in this function specifically this variable signifies 
	// initial state of the ADC Channel.
	
	/** ADCSRA: ADC Control and Status Register A **/
	/* ADC Enable */
	ADCSRA |= (1 << ADEN);			// ADC Power 'On'
     1da:	ea e7       	ldi	r30, 0x7A	; 122
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	80 68       	ori	r24, 0x80	; 128
     1e2:	80 83       	st	Z, r24
	#ifdef ADC_ENABLE_AUTO_TRIGGER
		ADCSRA |= (1 << ADATE);			// Auto Trigger 'On'
	#endif
	/* ADC Interrupt Setting */
	//	ADCSRA &=~(1 << ADIF);
	ADCSRA |= (1 << ADIE);			// Interrupt 'On'
     1e4:	80 81       	ld	r24, Z
     1e6:	88 60       	ori	r24, 0x08	; 8
     1e8:	80 83       	st	Z, r24
	/* Pre-scaler Setup */
	ADCSRA |= (1 << ADPS2);			// Pre-scaler Division factor to 64
     1ea:	80 81       	ld	r24, Z
     1ec:	84 60       	ori	r24, 0x04	; 4
     1ee:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);			// ADC Frequency = 125 KHz @Xplained Mini (F_CPU 16MHz)
     1f0:	80 81       	ld	r24, Z
     1f2:	82 60       	ori	r24, 0x02	; 2
     1f4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0);			// ADC Frequency = 62.5 KHz @PCB (F_CPU 8MHz)
     1f6:	80 81       	ld	r24, Z
     1f8:	81 60       	ori	r24, 0x01	; 1
     1fa:	80 83       	st	Z, r24
		ADCSRB |= (1 << ADTS1);
		ADCSRB |= (1 << ADTS2);
	#endif

	/** ADC Begin **/
	ADCSRA |= (1 << ADSC);			// Start new conversion
     1fc:	80 81       	ld	r24, Z
     1fe:	80 64       	ori	r24, 0x40	; 64
     200:	80 83       	st	Z, r24
     202:	08 95       	ret

00000204 <adc_digitize>:
}

double adc_digitize(uint16_t debug_raw_output){
	
	double digitized_ADC_output = (double) debug_raw_output * ADC_REFERENCE_VOLTAGE / ADC_RESOLUTION;
	return digitized_ADC_output;
     204:	bc 01       	movw	r22, r24
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 f2 06 	call	0xde4	; 0xde4 <__floatunsisf>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 ea       	ldi	r20, 0xA0	; 160
     214:	50 e4       	ldi	r21, 0x40	; 64
     216:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	40 e8       	ldi	r20, 0x80	; 128
     220:	5a e3       	ldi	r21, 0x3A	; 58
     222:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
	
     226:	08 95       	ret

00000228 <calculate_voltage>:

/*** Function Definitions ***/
double calculate_voltage(double raw_ADC_output_PC0){
	static double real_voltage;
	real_voltage = raw_ADC_output_PC0 * (1 + VOLTAGE_SHUNT_A/VOLTAGE_SHUNT_B);	 
	return real_voltage;
     228:	26 e6       	ldi	r18, 0x66	; 102
     22a:	36 e6       	ldi	r19, 0x66	; 102
     22c:	46 e2       	ldi	r20, 0x26	; 38
     22e:	50 e4       	ldi	r21, 0x40	; 64
     230:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
}
     234:	08 95       	ret

00000236 <calculate_current>:

double calculate_current(double raw_ADC_output_PC5){
	static double real_current;
	real_current =  raw_ADC_output_PC5 / CURRENT_RESISTOR_C;
	return real_current;
     236:	2a e9       	ldi	r18, 0x9A	; 154
     238:	39 e9       	ldi	r19, 0x99	; 153
     23a:	49 e1       	ldi	r20, 0x19	; 25
     23c:	5e e3       	ldi	r21, 0x3E	; 62
     23e:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3>
}
     242:	08 95       	ret

00000244 <calculate_power>:

double calculate_power(double coil_voltage, double coil_current, uint8_t PWM_live_time, uint8_t cycle_period){
     244:	8f 92       	push	r8
     246:	9f 92       	push	r9
     248:	af 92       	push	r10
     24a:	bf 92       	push	r11
     24c:	ef 92       	push	r14
     24e:	0f 93       	push	r16
	// convert binary coil voltage into a number
	// Vcc = 5V, ADC Channel is 10 bits, therefore ADC Step Size = 5/2^10 = 4.88mV
	// therefore if raw ADC output is dec 512 (i.e. 0x200 hex), then analog value is 2.5v
	total_power = coil_voltage * coil_current;
	average_power = total_power * PWM_live_time / cycle_period;
	return average_power;
     250:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
     254:	4b 01       	movw	r8, r22
     256:	5c 01       	movw	r10, r24
     258:	60 2f       	mov	r22, r16
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatsisf>
     264:	9b 01       	movw	r18, r22
     266:	ac 01       	movw	r20, r24
     268:	c5 01       	movw	r24, r10
     26a:	b4 01       	movw	r22, r8
     26c:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
     270:	4b 01       	movw	r8, r22
     272:	5c 01       	movw	r10, r24
     274:	6e 2d       	mov	r22, r14
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatsisf>
     280:	9b 01       	movw	r18, r22
     282:	ac 01       	movw	r20, r24
     284:	c5 01       	movw	r24, r10
     286:	b4 01       	movw	r22, r8
     288:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3>
	
}
     28c:	0f 91       	pop	r16
     28e:	ef 90       	pop	r14
     290:	bf 90       	pop	r11
     292:	af 90       	pop	r10
     294:	9f 90       	pop	r9
     296:	8f 90       	pop	r8
     298:	08 95       	ret

0000029a <usart_init>:
	return 0;

}

void usart_toggle_RX(){
	UCSR0B ^= (1 << RXEN0);
     29a:	a1 ec       	ldi	r26, 0xC1	; 193
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	2c 91       	ld	r18, X
     2a0:	28 60       	ori	r18, 0x08	; 8
     2a2:	2c 93       	st	X, r18
     2a4:	2c 91       	ld	r18, X
     2a6:	20 61       	ori	r18, 0x10	; 16
     2a8:	2c 93       	st	X, r18
     2aa:	2c 91       	ld	r18, X
     2ac:	20 68       	ori	r18, 0x80	; 128
     2ae:	2c 93       	st	X, r18
     2b0:	e2 ec       	ldi	r30, 0xC2	; 194
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	20 81       	ld	r18, Z
     2b6:	2f 77       	andi	r18, 0x7F	; 127
     2b8:	20 83       	st	Z, r18
     2ba:	20 81       	ld	r18, Z
     2bc:	2f 7b       	andi	r18, 0xBF	; 191
     2be:	20 83       	st	Z, r18
     2c0:	20 81       	ld	r18, Z
     2c2:	2f 7d       	andi	r18, 0xDF	; 223
     2c4:	20 83       	st	Z, r18
     2c6:	20 81       	ld	r18, Z
     2c8:	2f 7e       	andi	r18, 0xEF	; 239
     2ca:	20 83       	st	Z, r18
     2cc:	20 81       	ld	r18, Z
     2ce:	27 7f       	andi	r18, 0xF7	; 247
     2d0:	20 83       	st	Z, r18
     2d2:	2c 91       	ld	r18, X
     2d4:	2b 7f       	andi	r18, 0xFB	; 251
     2d6:	2c 93       	st	X, r18
     2d8:	20 81       	ld	r18, Z
     2da:	26 60       	ori	r18, 0x06	; 6
     2dc:	20 83       	st	Z, r18
     2de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     2e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2e6:	08 95       	ret

000002e8 <usart_transmit>:
     2e8:	e0 ec       	ldi	r30, 0xC0	; 192
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	90 81       	ld	r25, Z
     2ee:	95 ff       	sbrs	r25, 5
     2f0:	fd cf       	rjmp	.-6      	; 0x2ec <usart_transmit+0x4>
     2f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2f6:	08 95       	ret

000002f8 <usart_printf>:
     2f8:	cf 93       	push	r28
     2fa:	c8 2f       	mov	r28, r24
     2fc:	8a 30       	cpi	r24, 0x0A	; 10
     2fe:	19 f4       	brne	.+6      	; 0x306 <usart_printf+0xe>
     300:	8d e0       	ldi	r24, 0x0D	; 13
     302:	0e 94 74 01 	call	0x2e8	; 0x2e8 <usart_transmit>
     306:	8c 2f       	mov	r24, r28
     308:	0e 94 74 01 	call	0x2e8	; 0x2e8 <usart_transmit>
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <usart_TX_data>:
}

void usart_TX_data(uint8_t MOTOR_ID, uint8_t Current_FL, uint16_t numerical_req, double frequency, double expected_power, double coil_current, double coil_voltage, bool req_found, bool clear_error, bool error_collision, bool error_jammed){
     314:	2f 92       	push	r2
     316:	3f 92       	push	r3
     318:	4f 92       	push	r4
     31a:	5f 92       	push	r5
     31c:	6f 92       	push	r6
     31e:	7f 92       	push	r7
     320:	8f 92       	push	r8
     322:	9f 92       	push	r9
     324:	af 92       	push	r10
     326:	bf 92       	push	r11
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	00 d0       	rcall	.+0      	; 0x33a <usart_TX_data+0x26>
     33a:	00 d0       	rcall	.+0      	; 0x33c <usart_TX_data+0x28>
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	68 2e       	mov	r6, r24
     342:	76 2e       	mov	r7, r22
     344:	4b 83       	std	Y+3, r20	; 0x03
     346:	5c 83       	std	Y+4, r21	; 0x04
     348:	29 83       	std	Y+1, r18	; 0x01
     34a:	3a 83       	std	Y+2, r19	; 0x02
     34c:	59 8c       	ldd	r5, Y+25	; 0x19
     34e:	4a 8c       	ldd	r4, Y+26	; 0x1a
     350:	3b 8c       	ldd	r3, Y+27	; 0x1b
     352:	2c 8c       	ldd	r2, Y+28	; 0x1c
	
	// Slave to Master Communication
	// Transmit Report...
	printf("{");
     354:	8b e7       	ldi	r24, 0x7B	; 123
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <putchar>
	printf("\"%d\":", MOTOR_ID);
     35c:	1f 92       	push	r1
     35e:	6f 92       	push	r6
     360:	81 e1       	ldi	r24, 0x11	; 17
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	9f 93       	push	r25
     366:	8f 93       	push	r24
     368:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <printf>
	printf("{");
     36c:	8b e7       	ldi	r24, 0x7B	; 123
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <putchar>
	if(req_found){
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     37e:	88 23       	and	r24, r24
     380:	99 f0       	breq	.+38     	; 0x3a8 <usart_TX_data+0x94>
		// If new flow rate command was specified in the master-slave input, then print the following...
		// If current flow rate is lower than 3 digits, add a digit at the front to force three digits...
		printf("\"mfc\":{\"req"":\"%03d\",\"cur\":\"%03d\"},\"ver:\"\"001.003.005"",", numerical_req, Current_FL);
     382:	1f 92       	push	r1
     384:	7f 92       	push	r7
     386:	8c 81       	ldd	r24, Y+4	; 0x04
     388:	8f 93       	push	r24
     38a:	9b 81       	ldd	r25, Y+3	; 0x03
     38c:	9f 93       	push	r25
     38e:	87 e1       	ldi	r24, 0x17	; 23
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	9f 93       	push	r25
     394:	8f 93       	push	r24
     396:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <printf>
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	13 c0       	rjmp	.+38     	; 0x3ce <usart_TX_data+0xba>
	}
	else{
		// If no new flow rate command was specified or overflew in the master-slave input, then flow rate should be "000"...
		printf("\"mfc\":{\"req"":\"%d%d%d\",\"cur\":\"%03d\"},\"ver:\"\"001.003.005"",", 0,0,0, Current_FL);
     3a8:	1f 92       	push	r1
     3aa:	7f 92       	push	r7
     3ac:	1f 92       	push	r1
     3ae:	1f 92       	push	r1
     3b0:	1f 92       	push	r1
     3b2:	1f 92       	push	r1
     3b4:	1f 92       	push	r1
     3b6:	1f 92       	push	r1
     3b8:	8c e4       	ldi	r24, 0x4C	; 76
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	9f 93       	push	r25
     3be:	8f 93       	push	r24
     3c0:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <printf>
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
	}
	// Display operating conditions...
	printf("\"param\":{\"pwr\":\"%04.1fW\",\"freq\":\"%03.0fHz\",\"curr\":\"%03.0fA\",\"volt\":\"%05.2fV\"},", expected_power, frequency, coil_current, coil_voltage);
     3ce:	2f 92       	push	r2
     3d0:	3f 92       	push	r3
     3d2:	4f 92       	push	r4
     3d4:	5f 92       	push	r5
     3d6:	bf 92       	push	r11
     3d8:	af 92       	push	r10
     3da:	9f 92       	push	r9
     3dc:	8f 92       	push	r8
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	9f 93       	push	r25
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	8f 93       	push	r24
     3e6:	1f 93       	push	r17
     3e8:	0f 93       	push	r16
     3ea:	ff 92       	push	r15
     3ec:	ef 92       	push	r14
     3ee:	df 92       	push	r13
     3f0:	cf 92       	push	r12
     3f2:	83 e8       	ldi	r24, 0x83	; 131
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	9f 93       	push	r25
     3f8:	8f 93       	push	r24
     3fa:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <printf>
	// if error is not cleared, when there are either of errors present...
	if(!clear_error && (error_collision || error_jammed)){
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	8e 8d       	ldd	r24, Y+30	; 0x1e
     40a:	81 11       	cpse	r24, r1
     40c:	19 c0       	rjmp	.+50     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     40e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     410:	81 11       	cpse	r24, r1
     412:	44 c0       	rjmp	.+136    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     414:	98 a1       	ldd	r25, Y+32	; 0x20
     416:	91 11       	cpse	r25, r1
     418:	30 c0       	rjmp	.+96     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     41a:	12 c0       	rjmp	.+36     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		// display error clearance message...
		printf("\"clr\":\"ew\",");
		// if only collision happend...
		if(!error_jammed && error_collision){
			printf("\"ew\":[\"           \",\"pistonCollision\"]");
     41c:	82 ed       	ldi	r24, 0xD2	; 210
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	9f 93       	push	r25
     422:	8f 93       	push	r24
     424:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <printf>
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	19 c0       	rjmp	.+50     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		else if(error_jammed && !error_collision){
			printf("\"ew\":[\"cmprStalled\",\"               \"]");
		}
		// if both happend...
		else if(error_jammed && error_collision){
			printf("\"ew\":[\"cmprStalled\",\"pistonCollision\"]");
     42e:	89 ef       	ldi	r24, 0xF9	; 249
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	9f 93       	push	r25
     434:	8f 93       	push	r24
     436:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <printf>
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	10 c0       	rjmp	.+32     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		}
	}
	// if error is cleared by the user, OR no errors are present in the system...
	else if(clear_error || (!error_jammed && !error_collision)){
		printf("           "); // eleven spaces
     440:	87 e3       	ldi	r24, 0x37	; 55
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	9f 93       	push	r25
     446:	8f 93       	push	r24
     448:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <printf>
		printf("                                  "); //31 spaces
     44c:	80 e2       	ldi	r24, 0x20	; 32
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	9f 93       	push	r25
     452:	8f 93       	push	r24
     454:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <printf>
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
	}
	printf("}");
     460:	8d e7       	ldi	r24, 0x7D	; 125
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <putchar>
	printf("}");
     468:	8d e7       	ldi	r24, 0x7D	; 125
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <putchar>
	
	// just to make the terminal look nicer...
	printf("\n");
     470:	8a e0       	ldi	r24, 0x0A	; 10
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <putchar>
	
     478:	1d c0       	rjmp	.+58     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
	// Display operating conditions...
	printf("\"param\":{\"pwr\":\"%04.1fW\",\"freq\":\"%03.0fHz\",\"curr\":\"%03.0fA\",\"volt\":\"%05.2fV\"},", expected_power, frequency, coil_current, coil_voltage);
	// if error is not cleared, when there are either of errors present...
	if(!clear_error && (error_collision || error_jammed)){
		// display error clearance message...
		printf("\"clr\":\"ew\",");
     47a:	83 e4       	ldi	r24, 0x43	; 67
     47c:	92 e0       	ldi	r25, 0x02	; 2
     47e:	9f 93       	push	r25
     480:	8f 93       	push	r24
     482:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <printf>
		if(!error_jammed && error_collision){
			printf("\"ew\":[\"           \",\"pistonCollision\"]");
		}
		// if only jam happend...
		else if(error_jammed && !error_collision){
			printf("\"ew\":[\"cmprStalled\",\"               \"]");
     486:	8f e4       	ldi	r24, 0x4F	; 79
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <printf>
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	e2 cf       	rjmp	.-60     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	// Display operating conditions...
	printf("\"param\":{\"pwr\":\"%04.1fW\",\"freq\":\"%03.0fHz\",\"curr\":\"%03.0fA\",\"volt\":\"%05.2fV\"},", expected_power, frequency, coil_current, coil_voltage);
	// if error is not cleared, when there are either of errors present...
	if(!clear_error && (error_collision || error_jammed)){
		// display error clearance message...
		printf("\"clr\":\"ew\",");
     49c:	83 e4       	ldi	r24, 0x43	; 67
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	9f 93       	push	r25
     4a2:	8f 93       	push	r24
     4a4:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <printf>
		// if only collision happend...
		if(!error_jammed && error_collision){
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	88 a1       	ldd	r24, Y+32	; 0x20
     4ae:	81 11       	cpse	r24, r1
     4b0:	be cf       	rjmp	.-132    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     4b2:	b4 cf       	rjmp	.-152    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	printf("}");
	
	// just to make the terminal look nicer...
	printf("\n");
	
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	bf 90       	pop	r11
     4ce:	af 90       	pop	r10
     4d0:	9f 90       	pop	r9
     4d2:	8f 90       	pop	r8
     4d4:	7f 90       	pop	r7
     4d6:	6f 90       	pop	r6
     4d8:	5f 90       	pop	r5
     4da:	4f 90       	pop	r4
     4dc:	3f 90       	pop	r3
     4de:	2f 90       	pop	r2
     4e0:	08 95       	ret

000004e2 <main>:
	uint16_t raw_ADC_output_PC0;
	uint16_t raw_ADC_output_PC5;
	volatile uint8_t debug_ADC_channel;
#endif

int main(void){
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	61 97       	sbiw	r28, 0x11	; 17
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	cd bf       	out	0x3d, r28	; 61
	
	/*** Run Once Code ***/
	/* PIN I/O Setup */
	// Set all pins to output. Change mode to input when necessary
	DDRB = 0xff;
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;
     4fa:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xff;
     4fc:	8a b9       	out	0x0a, r24	; 10
	
	// Set ADC Input Gates...
	DDRC &= ~(1 << PC0); // ADC Channel 0... Voltage Shunt Channel
     4fe:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1 << PC5); // ADC Channel 5... Current Shunt Channel
     500:	3d 98       	cbi	0x07, 5	; 7
		
	/* ATMEGA328P Module Initialization */
	// Remove double slashes to activate...
	timer2_init();	// Set up Timer 0 for Pulse Modulation
     502:	0e 94 cb 05 	call	0xb96	; 0xb96 <timer2_init>
	adc_init();		// Set up ADC
     506:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <adc_init>
	#ifdef TRANSMIT_DEBUG_MODE
		uint8_t printf_value;
		stdout = &printf_stdout;
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <__iob+0x3>
     512:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <__iob+0x2>
		usart_init(UBRR_VALUE);
     516:	83 e3       	ldi	r24, 0x33	; 51
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 4d 01 	call	0x29a	; 0x29a <usart_init>
	#else
	#endif
	
	sei();
     51e:	78 94       	sei
				RX_sequence_complete = false;
			}
			else{
				// Wrong MOTOR ID is provided. Print Error Message.
				printf_value = RX_buffer[2];
				printf("VIOLATION: WRONG MOTOR ID '%d'\n", printf_value -'0');
     520:	0f 2e       	mov	r0, r31
     522:	f6 e7       	ldi	r31, 0x76	; 118
     524:	4f 2e       	mov	r4, r31
     526:	f2 e0       	ldi	r31, 0x02	; 2
     528:	5f 2e       	mov	r5, r31
     52a:	f0 2d       	mov	r31, r0
					Current_FL = (200 * PULSE_KILL_TIME) / (0.3 * PULSE_0_REACTIVATE_TIME) + 85; // This needs to be updated as equations for HIGH output mode becomes complete...
				}
				
				// Transmit Report...
				// disable RX while transmitting...
				UCSR0B &= ~(1 << RXEN0);
     52c:	0f 2e       	mov	r0, r31
     52e:	f1 ec       	ldi	r31, 0xC1	; 193
     530:	6f 2e       	mov	r6, r31
     532:	71 2c       	mov	r7, r1
     534:	f0 2d       	mov	r31, r0

    /* Main Loop */
    while (1) {
		
		// When buffer is filled with info.
		if(RX_sequence_complete){ 
     536:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <__data_end>
     53a:	88 23       	and	r24, r24
     53c:	09 f4       	brne	.+2      	; 0x540 <main+0x5e>
     53e:	49 c2       	rjmp	.+1170   	; 0x9d2 <__stack+0xd3>
			bool req_found = false;
			bool clear_error = false;
			uint16_t numerical_req;
			uint8_t digitized_req[3];
			//Verify Motor ID...
			if(RX_buffer[1] == '"' && RX_buffer[2] == '3' && RX_buffer[3] == '"'){
     540:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <RX_buffer+0x1>
     544:	82 32       	cpi	r24, 0x22	; 34
     546:	09 f0       	breq	.+2      	; 0x54a <main+0x68>
     548:	34 c2       	rjmp	.+1128   	; 0x9b2 <__stack+0xb3>
     54a:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <RX_buffer+0x2>
     54e:	83 33       	cpi	r24, 0x33	; 51
     550:	09 f0       	breq	.+2      	; 0x554 <main+0x72>
     552:	2f c2       	rjmp	.+1118   	; 0x9b2 <__stack+0xb3>
     554:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <RX_buffer+0x3>
     558:	82 32       	cpi	r24, 0x22	; 34
     55a:	09 f0       	breq	.+2      	; 0x55e <main+0x7c>
     55c:	2a c2       	rjmp	.+1108   	; 0x9b2 <__stack+0xb3>
     55e:	e5 e0       	ldi	r30, 0x05	; 5
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	24 e0       	ldi	r18, 0x04	; 4
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	62 e0       	ldi	r22, 0x02	; 2
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	41 e0       	ldi	r20, 0x01	; 1
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	1d 86       	std	Y+13, r1	; 0x0d
     570:	10 e0       	ldi	r17, 0x00	; 0
							digitized_req[0] = 0;
							digitized_req[1] = 0;
							digitized_req[2] = (RX_buffer[i + 4]);
						}
						else if(RX_buffer[i + 6] == '"'){
							digitized_req[0] = 0;
     572:	d1 2c       	mov	r13, r1
     574:	c9 01       	movw	r24, r18
     576:	04 97       	sbiw	r24, 0x04	; 4
					is set to true. Knowing the position of command value in the fixed JSON structure, the program will
					fetch and store each of its digits into an array "digitized_req".
					*/
						
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
     578:	dc 01       	movw	r26, r24
     57a:	aa 55       	subi	r26, 0x5A	; 90
     57c:	bd 4f       	sbci	r27, 0xFD	; 253
     57e:	ac 91       	ld	r26, X
     580:	a1 37       	cpi	r26, 0x71	; 113
     582:	09 f0       	breq	.+2      	; 0x586 <main+0xa4>
     584:	54 c0       	rjmp	.+168    	; 0x62e <main+0x14c>
     586:	da 01       	movw	r26, r20
     588:	aa 55       	subi	r26, 0x5A	; 90
     58a:	bd 4f       	sbci	r27, 0xFD	; 253
     58c:	ac 91       	ld	r26, X
     58e:	a2 32       	cpi	r26, 0x22	; 34
     590:	09 f0       	breq	.+2      	; 0x594 <main+0xb2>
     592:	4d c0       	rjmp	.+154    	; 0x62e <main+0x14c>
     594:	db 01       	movw	r26, r22
     596:	aa 55       	subi	r26, 0x5A	; 90
     598:	bd 4f       	sbci	r27, 0xFD	; 253
     59a:	ac 91       	ld	r26, X
     59c:	aa 33       	cpi	r26, 0x3A	; 58
     59e:	09 f0       	breq	.+2      	; 0x5a2 <main+0xc0>
     5a0:	46 c0       	rjmp	.+140    	; 0x62e <main+0x14c>
     5a2:	d9 01       	movw	r26, r18
     5a4:	ab 55       	subi	r26, 0x5B	; 91
     5a6:	bd 4f       	sbci	r27, 0xFD	; 253
     5a8:	ac 91       	ld	r26, X
     5aa:	a2 32       	cpi	r26, 0x22	; 34
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <main+0xce>
     5ae:	3f c0       	rjmp	.+126    	; 0x62e <main+0x14c>
						// req is present
						req_found = true;
						if(RX_buffer[i + 5] == '"'){
     5b0:	df 01       	movw	r26, r30
     5b2:	aa 55       	subi	r26, 0x5A	; 90
     5b4:	bd 4f       	sbci	r27, 0xFD	; 253
     5b6:	1c 91       	ld	r17, X
     5b8:	12 32       	cpi	r17, 0x22	; 34
     5ba:	49 f4       	brne	.+18     	; 0x5ce <main+0xec>
							digitized_req[0] = 0;
							digitized_req[1] = 0;
							digitized_req[2] = (RX_buffer[i + 4]);
     5bc:	d9 01       	movw	r26, r18
     5be:	aa 55       	subi	r26, 0x5A	; 90
     5c0:	bd 4f       	sbci	r27, 0xFD	; 253
     5c2:	fc 90       	ld	r15, X
     5c4:	f8 8a       	std	Y+16, r15	; 0x10
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
						if(RX_buffer[i + 5] == '"'){
							digitized_req[0] = 0;
							digitized_req[1] = 0;
     5c6:	df 86       	std	Y+15, r13	; 0x0f
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
						if(RX_buffer[i + 5] == '"'){
							digitized_req[0] = 0;
     5c8:	d9 8a       	std	Y+17, r13	; 0x11
					*/
						
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
     5ca:	11 e0       	ldi	r17, 0x01	; 1
     5cc:	30 c0       	rjmp	.+96     	; 0x62e <main+0x14c>
     5ce:	89 01       	movw	r16, r18
     5d0:	0e 5f       	subi	r16, 0xFE	; 254
     5d2:	1f 4f       	sbci	r17, 0xFF	; 255
						if(RX_buffer[i + 5] == '"'){
							digitized_req[0] = 0;
							digitized_req[1] = 0;
							digitized_req[2] = (RX_buffer[i + 4]);
						}
						else if(RX_buffer[i + 6] == '"'){
     5d4:	d8 01       	movw	r26, r16
     5d6:	aa 55       	subi	r26, 0x5A	; 90
     5d8:	bd 4f       	sbci	r27, 0xFD	; 253
     5da:	fc 90       	ld	r15, X
     5dc:	af 2d       	mov	r26, r15
     5de:	a2 32       	cpi	r26, 0x22	; 34
     5e0:	71 f4       	brne	.+28     	; 0x5fe <main+0x11c>
							digitized_req[0] = 0;
							digitized_req[1] = (RX_buffer[i + 4]);
     5e2:	89 01       	movw	r16, r18
     5e4:	0a 55       	subi	r16, 0x5A	; 90
     5e6:	1d 4f       	sbci	r17, 0xFD	; 253
     5e8:	d8 01       	movw	r26, r16
     5ea:	bc 91       	ld	r27, X
     5ec:	bf 87       	std	Y+15, r27	; 0x0f
							digitized_req[2] = (RX_buffer[i + 5]);
     5ee:	df 01       	movw	r26, r30
     5f0:	aa 55       	subi	r26, 0x5A	; 90
     5f2:	bd 4f       	sbci	r27, 0xFD	; 253
     5f4:	fc 90       	ld	r15, X
     5f6:	f8 8a       	std	Y+16, r15	; 0x10
							digitized_req[0] = 0;
							digitized_req[1] = 0;
							digitized_req[2] = (RX_buffer[i + 4]);
						}
						else if(RX_buffer[i + 6] == '"'){
							digitized_req[0] = 0;
     5f8:	d9 8a       	std	Y+17, r13	; 0x11
					*/
						
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
     5fa:	11 e0       	ldi	r17, 0x01	; 1
     5fc:	18 c0       	rjmp	.+48     	; 0x62e <main+0x14c>
						else if(RX_buffer[i + 6] == '"'){
							digitized_req[0] = 0;
							digitized_req[1] = (RX_buffer[i + 4]);
							digitized_req[2] = (RX_buffer[i + 5]);
						}
						else if(RX_buffer[i + 7] == '"'){
     5fe:	d9 01       	movw	r26, r18
     600:	a7 55       	subi	r26, 0x57	; 87
     602:	bd 4f       	sbci	r27, 0xFD	; 253
     604:	bc 91       	ld	r27, X
     606:	b2 32       	cpi	r27, 0x22	; 34
     608:	89 f4       	brne	.+34     	; 0x62c <main+0x14a>
							digitized_req[0] = (RX_buffer[i + 4]);
     60a:	d9 01       	movw	r26, r18
     60c:	aa 55       	subi	r26, 0x5A	; 90
     60e:	bd 4f       	sbci	r27, 0xFD	; 253
     610:	bc 91       	ld	r27, X
     612:	b9 8b       	std	Y+17, r27	; 0x11
							digitized_req[1] = (RX_buffer[i + 5]);
     614:	df 01       	movw	r26, r30
     616:	aa 55       	subi	r26, 0x5A	; 90
     618:	bd 4f       	sbci	r27, 0xFD	; 253
     61a:	fc 90       	ld	r15, X
     61c:	ff 86       	std	Y+15, r15	; 0x0f
							digitized_req[2] = (RX_buffer[i + 6]);
     61e:	d8 01       	movw	r26, r16
     620:	aa 55       	subi	r26, 0x5A	; 90
     622:	bd 4f       	sbci	r27, 0xFD	; 253
     624:	1c 91       	ld	r17, X
     626:	18 8b       	std	Y+16, r17	; 0x10
					*/
						
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
     628:	11 e0       	ldi	r17, 0x01	; 1
     62a:	01 c0       	rjmp	.+2      	; 0x62e <main+0x14c>
     62c:	11 e0       	ldi	r17, 0x01	; 1
							digitized_req[1] = (RX_buffer[i + 5]);
							digitized_req[2] = (RX_buffer[i + 6]);
						}
					}
										
					if(RX_buffer[i] == 'r' && (RX_buffer[i + 1] == '"') && (RX_buffer[i + 2] == ':')&&(RX_buffer[i + 4] == 'e')&&(RX_buffer[i + 5] == 'w')){
     62e:	dc 01       	movw	r26, r24
     630:	aa 55       	subi	r26, 0x5A	; 90
     632:	bd 4f       	sbci	r27, 0xFD	; 253
     634:	8c 91       	ld	r24, X
     636:	82 37       	cpi	r24, 0x72	; 114
     638:	d1 f4       	brne	.+52     	; 0x66e <main+0x18c>
     63a:	da 01       	movw	r26, r20
     63c:	aa 55       	subi	r26, 0x5A	; 90
     63e:	bd 4f       	sbci	r27, 0xFD	; 253
     640:	8c 91       	ld	r24, X
     642:	82 32       	cpi	r24, 0x22	; 34
     644:	a1 f4       	brne	.+40     	; 0x66e <main+0x18c>
     646:	db 01       	movw	r26, r22
     648:	aa 55       	subi	r26, 0x5A	; 90
     64a:	bd 4f       	sbci	r27, 0xFD	; 253
     64c:	8c 91       	ld	r24, X
     64e:	8a 33       	cpi	r24, 0x3A	; 58
     650:	71 f4       	brne	.+28     	; 0x66e <main+0x18c>
     652:	d9 01       	movw	r26, r18
     654:	aa 55       	subi	r26, 0x5A	; 90
     656:	bd 4f       	sbci	r27, 0xFD	; 253
     658:	8c 91       	ld	r24, X
     65a:	85 36       	cpi	r24, 0x65	; 101
     65c:	41 f4       	brne	.+16     	; 0x66e <main+0x18c>
     65e:	df 01       	movw	r26, r30
     660:	aa 55       	subi	r26, 0x5A	; 90
     662:	bd 4f       	sbci	r27, 0xFD	; 253
     664:	8c 91       	ld	r24, X
     666:	87 37       	cpi	r24, 0x77	; 119
     668:	11 f4       	brne	.+4      	; 0x66e <main+0x18c>
						//clear error warning is present...
						clear_error = true;
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	8d 87       	std	Y+13, r24	; 0x0d
     66e:	4f 5f       	subi	r20, 0xFF	; 255
     670:	5f 4f       	sbci	r21, 0xFF	; 255
     672:	6f 5f       	subi	r22, 0xFF	; 255
     674:	7f 4f       	sbci	r23, 0xFF	; 255
     676:	2f 5f       	subi	r18, 0xFF	; 255
     678:	3f 4f       	sbci	r19, 0xFF	; 255
     67a:	31 96       	adiw	r30, 0x01	; 1
			uint16_t numerical_req;
			uint8_t digitized_req[3];
			//Verify Motor ID...
			if(RX_buffer[1] == '"' && RX_buffer[2] == '3' && RX_buffer[3] == '"'){
				// read through buffer contents
				for(uint8_t i = 0; i < JSON_FIXED_BUFFER_SIZE; i++){
     67c:	2a 32       	cpi	r18, 0x2A	; 42
     67e:	31 05       	cpc	r19, r1
     680:	09 f0       	breq	.+2      	; 0x684 <main+0x1a2>
     682:	78 cf       	rjmp	.-272    	; 0x574 <main+0x92>
				OVERFLOW MODE: The timed-pulse output changes to overflow mode when the flow rate command does not fall into any 
								of the specified region. The output is set to default mode (10Hz, 50% Duty Cycle).    
				*/
					
				// Finished reading through the buffer...
				numerical_req = (digitized_req[0]-'0') * 100 + (digitized_req[1]-'0') * 10 + (digitized_req[2]-'0');
     684:	a9 89       	ldd	r26, Y+17	; 0x11
     686:	8a 2f       	mov	r24, r26
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	c0 97       	sbiw	r24, 0x30	; 48
     68c:	b4 e6       	ldi	r27, 0x64	; 100
     68e:	b8 9f       	mul	r27, r24
     690:	10 01       	movw	r2, r0
     692:	b9 9f       	mul	r27, r25
     694:	30 0c       	add	r3, r0
     696:	11 24       	eor	r1, r1
     698:	ef 85       	ldd	r30, Y+15	; 0x0f
     69a:	8e 2f       	mov	r24, r30
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	c0 97       	sbiw	r24, 0x30	; 48
     6a0:	ac 01       	movw	r20, r24
     6a2:	44 0f       	add	r20, r20
     6a4:	55 1f       	adc	r21, r21
     6a6:	9c 01       	movw	r18, r24
     6a8:	22 0f       	add	r18, r18
     6aa:	33 1f       	adc	r19, r19
     6ac:	22 0f       	add	r18, r18
     6ae:	33 1f       	adc	r19, r19
     6b0:	22 0f       	add	r18, r18
     6b2:	33 1f       	adc	r19, r19
     6b4:	ca 01       	movw	r24, r20
     6b6:	82 0f       	add	r24, r18
     6b8:	93 1f       	adc	r25, r19
     6ba:	82 0d       	add	r24, r2
     6bc:	93 1d       	adc	r25, r3
     6be:	f8 89       	ldd	r31, Y+16	; 0x10
     6c0:	2f 2e       	mov	r2, r31
     6c2:	31 2c       	mov	r3, r1
     6c4:	20 e3       	ldi	r18, 0x30	; 48
     6c6:	22 1a       	sub	r2, r18
     6c8:	31 08       	sbc	r3, r1
     6ca:	28 0e       	add	r2, r24
     6cc:	39 1e       	adc	r3, r25
				// Apply new operating condition to the machine
				// Only change stroke frequency when REQ is acquired...
				if(req_found){
     6ce:	11 23       	and	r17, r17
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <main+0x1f2>
     6d2:	89 c0       	rjmp	.+274    	; 0x7e6 <main+0x304>
					// If command is "MAXIMUM OUTPUT"...
					if(numerical_req == TIMER_MAX){
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	28 16       	cp	r2, r24
     6d8:	31 04       	cpc	r3, r1
     6da:	51 f4       	brne	.+20     	; 0x6f0 <main+0x20e>
						PULSE_0_REACTIVATE_TIME = 133;
     6dc:	95 e8       	ldi	r25, 0x85	; 133
     6de:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 67;
     6e2:	a3 e4       	ldi	r26, 0x43	; 67
     6e4:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = 34;
     6e8:	b2 e2       	ldi	r27, 0x22	; 34
     6ea:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <PULSE_KILL_TIME>
     6ee:	7b c0       	rjmp	.+246    	; 0x7e6 <main+0x304>
					}
					// If command is "NO OUTPUT"...
					else if(numerical_req == TIMER_LOW){
     6f0:	21 14       	cp	r2, r1
     6f2:	31 04       	cpc	r3, r1
     6f4:	49 f4       	brne	.+18     	; 0x708 <main+0x226>
						PULSE_0_REACTIVATE_TIME = 200;
     6f6:	e8 ec       	ldi	r30, 0xC8	; 200
     6f8:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 100;
     6fc:	f4 e6       	ldi	r31, 0x64	; 100
     6fe:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = 0;
     702:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <PULSE_KILL_TIME>
     706:	6f c0       	rjmp	.+222    	; 0x7e6 <main+0x304>
					}
					// If command is between 1 to 177, set frequency to 10Hz, calculate the DUTY CYCLE equivalent...
					else if(numerical_req > TIMER_LOW && numerical_req != TIMER_LOW && numerical_req <= TIMER_LOW_FLOW){
     708:	c1 01       	movw	r24, r2
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	81 3b       	cpi	r24, 0xB1	; 177
     70e:	91 05       	cpc	r25, r1
     710:	78 f5       	brcc	.+94     	; 0x770 <main+0x28e>
						PULSE_0_REACTIVATE_TIME = 200;
     712:	0f 2e       	mov	r0, r31
     714:	f8 ec       	ldi	r31, 0xC8	; 200
     716:	ff 2e       	mov	r15, r31
     718:	f0 2d       	mov	r31, r0
     71a:	f0 92 10 01 	sts	0x0110, r15	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 100;
     71e:	24 e6       	ldi	r18, 0x64	; 100
     720:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = ((double)(0.3 * numerical_req) * PULSE_0_REACTIVATE_TIME)/200;
     724:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     728:	b1 01       	movw	r22, r2
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 f2 06 	call	0xde4	; 0xde4 <__floatunsisf>
     732:	2a e9       	ldi	r18, 0x9A	; 154
     734:	39 e9       	ldi	r19, 0x99	; 153
     736:	49 e9       	ldi	r20, 0x99	; 153
     738:	5e e3       	ldi	r21, 0x3E	; 62
     73a:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
     73e:	6b 01       	movw	r12, r22
     740:	7c 01       	movw	r14, r24
     742:	60 2f       	mov	r22, r16
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatsisf>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	c7 01       	movw	r24, r14
     754:	b6 01       	movw	r22, r12
     756:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	48 e4       	ldi	r20, 0x48	; 72
     760:	53 e4       	ldi	r21, 0x43	; 67
     762:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3>
     766:	0e 94 c3 06 	call	0xd86	; 0xd86 <__fixunssfsi>
     76a:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <PULSE_KILL_TIME>
     76e:	3b c0       	rjmp	.+118    	; 0x7e6 <main+0x304>
					}
					// If command is between 178 to 254, set frequency to 15Hz, calculate the DUTY CYCLE equivalent...
					else if(numerical_req < TIMER_MAX && numerical_req != TIMER_MAX && numerical_req >= TIMER_HIGH_FLOW){
     770:	c1 01       	movw	r24, r2
     772:	82 5b       	subi	r24, 0xB2	; 178
     774:	91 09       	sbc	r25, r1
     776:	8d 34       	cpi	r24, 0x4D	; 77
     778:	91 05       	cpc	r25, r1
     77a:	60 f5       	brcc	.+88     	; 0x7d4 <main+0x2f2>
						PULSE_0_REACTIVATE_TIME = 133;
     77c:	85 e8       	ldi	r24, 0x85	; 133
     77e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 67;
     782:	93 e4       	ldi	r25, 0x43	; 67
     784:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = ((double)(0.3 * numerical_req) * PULSE_0_REACTIVATE_TIME)/200; //need to update this line... does more duty cycle produce more stroke distance?		
     788:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     78c:	b1 01       	movw	r22, r2
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 f2 06 	call	0xde4	; 0xde4 <__floatunsisf>
     796:	2a e9       	ldi	r18, 0x9A	; 154
     798:	39 e9       	ldi	r19, 0x99	; 153
     79a:	49 e9       	ldi	r20, 0x99	; 153
     79c:	5e e3       	ldi	r21, 0x3E	; 62
     79e:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
     7a2:	6b 01       	movw	r12, r22
     7a4:	7c 01       	movw	r14, r24
     7a6:	60 2f       	mov	r22, r16
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatsisf>
     7b2:	9b 01       	movw	r18, r22
     7b4:	ac 01       	movw	r20, r24
     7b6:	c7 01       	movw	r24, r14
     7b8:	b6 01       	movw	r22, r12
     7ba:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	48 e4       	ldi	r20, 0x48	; 72
     7c4:	53 e4       	ldi	r21, 0x43	; 67
     7c6:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3>
     7ca:	0e 94 c3 06 	call	0xd86	; 0xd86 <__fixunssfsi>
     7ce:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <PULSE_KILL_TIME>
     7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <main+0x304>
					}
					// If command is invalid, reset to default frequency...
					else{
						PULSE_0_REACTIVATE_TIME = 80;
     7d4:	a0 e5       	ldi	r26, 0x50	; 80
     7d6:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 40;
     7da:	b8 e2       	ldi	r27, 0x28	; 40
     7dc:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = 20;
     7e0:	e4 e1       	ldi	r30, 0x14	; 20
     7e2:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <PULSE_KILL_TIME>
				
				When no "Req" was defined, or if "Req" was greater than 256 in the master-slave input, the corresponding report 
				will return "000". Otherwise, the program will return   
				*/
				// Analog to Digital conversion on the ADC, and display its output to the PuTTy.
				double coil_voltage = calculate_voltage(adc_digitize(raw_ADC_output_PC0));
     7e6:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <raw_ADC_output_PC0>
     7ea:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <raw_ADC_output_PC0+0x1>
     7ee:	0e 94 02 01 	call	0x204	; 0x204 <adc_digitize>
     7f2:	0e 94 14 01 	call	0x228	; 0x228 <calculate_voltage>
     7f6:	69 87       	std	Y+9, r22	; 0x09
     7f8:	7a 87       	std	Y+10, r23	; 0x0a
     7fa:	8b 87       	std	Y+11, r24	; 0x0b
     7fc:	9c 87       	std	Y+12, r25	; 0x0c
				double coil_current = calculate_current(adc_digitize(raw_ADC_output_PC5));
     7fe:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <raw_ADC_output_PC5>
     802:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <raw_ADC_output_PC5+0x1>
     806:	0e 94 02 01 	call	0x204	; 0x204 <adc_digitize>
     80a:	0e 94 1b 01 	call	0x236	; 0x236 <calculate_current>
     80e:	4b 01       	movw	r8, r22
     810:	5c 01       	movw	r10, r24
				double expected_power = calculate_power(coil_voltage, debug_COIL_CURRENT, PULSE_KILL_TIME, PULSE_2_START_TIME);
     812:	e0 90 0f 01 	lds	r14, 0x010F	; 0x80010f <PULSE_2_START_TIME>
     816:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	5f e3       	ldi	r21, 0x3F	; 63
     822:	b9 85       	ldd	r27, Y+9	; 0x09
     824:	aa 85       	ldd	r26, Y+10	; 0x0a
     826:	fb 85       	ldd	r31, Y+11	; 0x0b
     828:	ec 85       	ldd	r30, Y+12	; 0x0c
     82a:	6b 2f       	mov	r22, r27
     82c:	7a 2f       	mov	r23, r26
     82e:	8f 2f       	mov	r24, r31
     830:	9e 2f       	mov	r25, r30
     832:	0e 94 22 01 	call	0x244	; 0x244 <calculate_power>
     836:	6b 01       	movw	r12, r22
     838:	7c 01       	movw	r14, r24
					bool error_collision = false;
					bool error_jammed = false;
				#endif
				
				// Fetch Motor ID from the buffer...
				uint8_t MOTOR_ID = RX_buffer[2] - '0';
     83a:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <RX_buffer+0x2>
     83e:	80 53       	subi	r24, 0x30	; 48
     840:	8e 87       	std	Y+14, r24	; 0x0e
				// Fetch frequency from pulse reactivation time...
				double frequency = (1 / (0.5 * PULSE_0_REACTIVATE_TIME)) * 1000;
     842:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatsisf>
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	5f e3       	ldi	r21, 0x3F	; 63
     858:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
     85c:	9b 01       	movw	r18, r22
     85e:	ac 01       	movw	r20, r24
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	80 e8       	ldi	r24, 0x80	; 128
     866:	9f e3       	ldi	r25, 0x3F	; 63
     868:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3>
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	4a e7       	ldi	r20, 0x7A	; 122
     872:	54 e4       	ldi	r21, 0x44	; 68
     874:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
     878:	69 83       	std	Y+1, r22	; 0x01
     87a:	7a 83       	std	Y+2, r23	; 0x02
     87c:	8b 83       	std	Y+3, r24	; 0x03
     87e:	9c 83       	std	Y+4, r25	; 0x04
				// Fetch Current Flow Rate from operating conditions...
				uint8_t Current_FL;
				// If the motor is running at low output mode OR no output mode...
				if(frequency <= 10){
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	40 e2       	ldi	r20, 0x20	; 32
     886:	51 e4       	ldi	r21, 0x41	; 65
     888:	0e 94 4c 06 	call	0xc98	; 0xc98 <__cmpsf2>
     88c:	18 16       	cp	r1, r24
     88e:	54 f1       	brlt	.+84     	; 0x8e4 <main+0x402>
					Current_FL = (200 * PULSE_KILL_TIME) / (0.3 * PULSE_0_REACTIVATE_TIME);
     890:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     894:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     898:	f8 ec       	ldi	r31, 0xC8	; 200
     89a:	f6 9f       	mul	r31, r22
     89c:	b0 01       	movw	r22, r0
     89e:	11 24       	eor	r1, r1
     8a0:	07 2e       	mov	r0, r23
     8a2:	00 0c       	add	r0, r0
     8a4:	88 0b       	sbc	r24, r24
     8a6:	99 0b       	sbc	r25, r25
     8a8:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatsisf>
     8ac:	6d 83       	std	Y+5, r22	; 0x05
     8ae:	7e 83       	std	Y+6, r23	; 0x06
     8b0:	8f 83       	std	Y+7, r24	; 0x07
     8b2:	98 87       	std	Y+8, r25	; 0x08
     8b4:	60 2f       	mov	r22, r16
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatsisf>
     8c0:	2a e9       	ldi	r18, 0x9A	; 154
     8c2:	39 e9       	ldi	r19, 0x99	; 153
     8c4:	49 e9       	ldi	r20, 0x99	; 153
     8c6:	5e e3       	ldi	r21, 0x3E	; 62
     8c8:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
     8cc:	9b 01       	movw	r18, r22
     8ce:	ac 01       	movw	r20, r24
     8d0:	6d 81       	ldd	r22, Y+5	; 0x05
     8d2:	7e 81       	ldd	r23, Y+6	; 0x06
     8d4:	8f 81       	ldd	r24, Y+7	; 0x07
     8d6:	98 85       	ldd	r25, Y+8	; 0x08
     8d8:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3>
     8dc:	0e 94 c3 06 	call	0xd86	; 0xd86 <__fixunssfsi>
     8e0:	6d 83       	std	Y+5, r22	; 0x05
     8e2:	3b c0       	rjmp	.+118    	; 0x95a <__stack+0x5b>
				}
				// If the motor is running at high output mode OR maximum output mode..
				else if(frequency >= 15){
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	40 e7       	ldi	r20, 0x70	; 112
     8ea:	51 e4       	ldi	r21, 0x41	; 65
     8ec:	69 81       	ldd	r22, Y+1	; 0x01
     8ee:	7a 81       	ldd	r23, Y+2	; 0x02
     8f0:	8b 81       	ldd	r24, Y+3	; 0x03
     8f2:	9c 81       	ldd	r25, Y+4	; 0x04
     8f4:	0e 94 a4 07 	call	0xf48	; 0xf48 <__gesf2>
     8f8:	88 23       	and	r24, r24
     8fa:	7c f1       	brlt	.+94     	; 0x95a <__stack+0x5b>
					Current_FL = (200 * PULSE_KILL_TIME) / (0.3 * PULSE_0_REACTIVATE_TIME) + 85; // This needs to be updated as equations for HIGH output mode becomes complete...
     8fc:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     900:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     904:	28 ec       	ldi	r18, 0xC8	; 200
     906:	26 9f       	mul	r18, r22
     908:	b0 01       	movw	r22, r0
     90a:	11 24       	eor	r1, r1
     90c:	07 2e       	mov	r0, r23
     90e:	00 0c       	add	r0, r0
     910:	88 0b       	sbc	r24, r24
     912:	99 0b       	sbc	r25, r25
     914:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatsisf>
     918:	6d 83       	std	Y+5, r22	; 0x05
     91a:	7e 83       	std	Y+6, r23	; 0x06
     91c:	8f 83       	std	Y+7, r24	; 0x07
     91e:	98 87       	std	Y+8, r25	; 0x08
     920:	60 2f       	mov	r22, r16
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 f4 06 	call	0xde8	; 0xde8 <__floatsisf>
     92c:	2a e9       	ldi	r18, 0x9A	; 154
     92e:	39 e9       	ldi	r19, 0x99	; 153
     930:	49 e9       	ldi	r20, 0x99	; 153
     932:	5e e3       	ldi	r21, 0x3E	; 62
     934:	0e 94 a9 07 	call	0xf52	; 0xf52 <__mulsf3>
     938:	9b 01       	movw	r18, r22
     93a:	ac 01       	movw	r20, r24
     93c:	6d 81       	ldd	r22, Y+5	; 0x05
     93e:	7e 81       	ldd	r23, Y+6	; 0x06
     940:	8f 81       	ldd	r24, Y+7	; 0x07
     942:	98 85       	ldd	r25, Y+8	; 0x08
     944:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3>
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	4a ea       	ldi	r20, 0xAA	; 170
     94e:	52 e4       	ldi	r21, 0x42	; 66
     950:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__addsf3>
     954:	0e 94 c3 06 	call	0xd86	; 0xd86 <__fixunssfsi>
     958:	6d 83       	std	Y+5, r22	; 0x05
				}
				
				// Transmit Report...
				// disable RX while transmitting...
				UCSR0B &= ~(1 << RXEN0);
     95a:	d3 01       	movw	r26, r6
     95c:	8c 91       	ld	r24, X
     95e:	8f 7e       	andi	r24, 0xEF	; 239
     960:	8c 93       	st	X, r24
				// enable TX only when transmitting...
				UCSR0B |= (1 << TXEN0); 
     962:	8c 91       	ld	r24, X
     964:	88 60       	ori	r24, 0x08	; 8
     966:	8c 93       	st	X, r24
				usart_TX_data(MOTOR_ID, Current_FL, numerical_req, frequency, expected_power, coil_current, coil_voltage, req_found, clear_error, error_collision, error_jammed);
     968:	1f 92       	push	r1
     96a:	1f 92       	push	r1
     96c:	bd 85       	ldd	r27, Y+13	; 0x0d
     96e:	bf 93       	push	r27
     970:	1f 93       	push	r17
     972:	1c 85       	ldd	r17, Y+12	; 0x0c
     974:	1f 93       	push	r17
     976:	1b 85       	ldd	r17, Y+11	; 0x0b
     978:	1f 93       	push	r17
     97a:	1a 85       	ldd	r17, Y+10	; 0x0a
     97c:	1f 93       	push	r17
     97e:	19 85       	ldd	r17, Y+9	; 0x09
     980:	1f 93       	push	r17
     982:	09 81       	ldd	r16, Y+1	; 0x01
     984:	1a 81       	ldd	r17, Y+2	; 0x02
     986:	2b 81       	ldd	r18, Y+3	; 0x03
     988:	3c 81       	ldd	r19, Y+4	; 0x04
     98a:	a1 01       	movw	r20, r2
     98c:	6d 81       	ldd	r22, Y+5	; 0x05
     98e:	8e 85       	ldd	r24, Y+14	; 0x0e
     990:	0e 94 8a 01 	call	0x314	; 0x314 <usart_TX_data>
				// disable TX after transmitting is finished...
				UCSR0B &= ~(1 << TXEN0);
     994:	d3 01       	movw	r26, r6
     996:	8c 91       	ld	r24, X
     998:	87 7f       	andi	r24, 0xF7	; 247
     99a:	8c 93       	st	X, r24
				// enable RX after transmitting is finished...
				UCSR0B |= (1 << RXEN0);
     99c:	8c 91       	ld	r24, X
     99e:	80 61       	ori	r24, 0x10	; 16
     9a0:	8c 93       	st	X, r24
				// When all the procedures with the sequence is complete...
				RX_sequence_complete = false;
     9a2:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
			bool req_found = false;
			bool clear_error = false;
			uint16_t numerical_req;
			uint8_t digitized_req[3];
			//Verify Motor ID...
			if(RX_buffer[1] == '"' && RX_buffer[2] == '3' && RX_buffer[3] == '"'){
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
     9b0:	10 c0       	rjmp	.+32     	; 0x9d2 <__stack+0xd3>
				// When all the procedures with the sequence is complete...
				RX_sequence_complete = false;
			}
			else{
				// Wrong MOTOR ID is provided. Print Error Message.
				printf_value = RX_buffer[2];
     9b2:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <RX_buffer+0x2>
				printf("VIOLATION: WRONG MOTOR ID '%d'\n", printf_value -'0');
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	c0 97       	sbiw	r24, 0x30	; 48
     9ba:	9f 93       	push	r25
     9bc:	8f 93       	push	r24
     9be:	5f 92       	push	r5
     9c0:	4f 92       	push	r4
     9c2:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <printf>
				RX_sequence_complete = false;
     9c6:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
			}
		}
		#ifdef XPLAINED_MINI_LED_STROBE
			PORTB ^= (1 << PB5);
     9d2:	95 b1       	in	r25, 0x05	; 5
     9d4:	80 e2       	ldi	r24, 0x20	; 32
     9d6:	89 27       	eor	r24, r25
     9d8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9da:	ff ef       	ldi	r31, 0xFF	; 255
     9dc:	10 e7       	ldi	r17, 0x70	; 112
     9de:	22 e0       	ldi	r18, 0x02	; 2
     9e0:	f1 50       	subi	r31, 0x01	; 1
     9e2:	10 40       	sbci	r17, 0x00	; 0
     9e4:	20 40       	sbci	r18, 0x00	; 0
     9e6:	e1 f7       	brne	.-8      	; 0x9e0 <__stack+0xe1>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <__stack+0xeb>
     9ea:	00 00       	nop
     9ec:	a4 cd       	rjmp	.-1208   	; 0x536 <main+0x54>

000009ee <__vector_18>:
a. The received data (an ASCII character) is stored in an unsigned character buffer (usartRX).
b. The index counter for the buffer is incremented for the upcoming data.
c. On the 28th count (i.e. one sequence of master-slave communication is complete), reset the index position to overwrite the
	first character of the buffer.
	*/
ISR(USART_RX_vect){
     9ee:	1f 92       	push	r1
     9f0:	0f 92       	push	r0
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	0f 92       	push	r0
     9f6:	11 24       	eor	r1, r1
     9f8:	8f 93       	push	r24
     9fa:	ef 93       	push	r30
     9fc:	ff 93       	push	r31
	// Reception is complete... Need to find a way to extract information.
	if(usart_RX_index != JSON_FIXED_BUFFER_SIZE - 1){			// Starting from index of zero, the buffer will be filled with 
     9fe:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <usart_RX_index>
     a02:	85 32       	cpi	r24, 0x25	; 37
     a04:	71 f0       	breq	.+28     	; 0xa22 <__vector_18+0x34>
		RX_buffer[usart_RX_index] = UDR0;						// transmission up to 37th index.
     a06:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <usart_RX_index>
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a10:	ea 55       	subi	r30, 0x5A	; 90
     a12:	fd 4f       	sbci	r31, 0xFD	; 253
     a14:	80 83       	st	Z, r24
		usart_RX_index++;
     a16:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <usart_RX_index>
     a1a:	8f 5f       	subi	r24, 0xFF	; 255
     a1c:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <usart_RX_index>
     a20:	11 c0       	rjmp	.+34     	; 0xa44 <__vector_18+0x56>
	}
	else if (usart_RX_index == JSON_FIXED_BUFFER_SIZE - 1){
     a22:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <usart_RX_index>
     a26:	85 32       	cpi	r24, 0x25	; 37
     a28:	69 f4       	brne	.+26     	; 0xa44 <__vector_18+0x56>
		// If the index counter reaches 38, which is larger than the maximum length of the fixed JSON RX...
		RX_buffer[usart_RX_index] = UDR0;						 // Record the first bit of the RX to the buffer...
     a2a:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <usart_RX_index>
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a34:	ea 55       	subi	r30, 0x5A	; 90
     a36:	fd 4f       	sbci	r31, 0xFD	; 253
     a38:	80 83       	st	Z, r24
		RX_sequence_complete = true;							 // Flag to main loop that one cycle of RX is complete.
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <__data_end>
		usart_RX_index = 0;										 // Reset the Index back to zero (hence allow new sequence of RX)...
     a40:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <usart_RX_index>
	}
		
}
     a44:	ff 91       	pop	r31
     a46:	ef 91       	pop	r30
     a48:	8f 91       	pop	r24
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <__vector_7>:
/* The following conditions are critical to correct operation of the system. 
a. When macro ENABLE_PRINTF is defined, Pulse Modulation will behave unexpectedly due to long delay between global interrupt 
	disable and global interrupt enable caused by printf function. To ensure correct functionality of the Pulse Modulation, 
	Macro ENABLE_PRINTF must first be undefined.*/
	
ISR(TIMER2_COMPA_vect){
     a54:	1f 92       	push	r1
     a56:	0f 92       	push	r0
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	0f 92       	push	r0
     a5c:	11 24       	eor	r1, r1
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
	if(MATCH_COUNTER_T2 == PULSE_0_START_TIME){
     a62:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <MATCH_COUNTER_T2>
     a66:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <PULSE_0_START_TIME>
     a6a:	98 13       	cpse	r25, r24
     a6c:	03 c0       	rjmp	.+6      	; 0xa74 <__vector_7+0x20>
		PORTB &= ~(1 << PB3);						// Deactivate Output on PB3
     a6e:	2b 98       	cbi	0x05, 3	; 5
		PORTD |= (1 << PD6);						// Activate Output on PD6
     a70:	5e 9a       	sbi	0x0b, 6	; 11
     a72:	15 c0       	rjmp	.+42     	; 0xa9e <__vector_7+0x4a>
	}
	else if(MATCH_COUNTER_T2 == PULSE_2_START_TIME){
     a74:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <MATCH_COUNTER_T2>
     a78:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <PULSE_2_START_TIME>
     a7c:	98 13       	cpse	r25, r24
     a7e:	03 c0       	rjmp	.+6      	; 0xa86 <__vector_7+0x32>
		PORTD &= ~(1 << PD6);						// Deactivate Output on PD6
     a80:	5e 98       	cbi	0x0b, 6	; 11
		PORTB |= (1 << PB3);						// Activate Output on PB3
     a82:	2b 9a       	sbi	0x05, 3	; 5
     a84:	0c c0       	rjmp	.+24     	; 0xa9e <__vector_7+0x4a>
	}
	else if(MATCH_COUNTER_T2 == PULSE_0_REACTIVATE_TIME){
     a86:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <MATCH_COUNTER_T2>
     a8a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     a8e:	98 13       	cpse	r25, r24
     a90:	06 c0       	rjmp	.+12     	; 0xa9e <__vector_7+0x4a>
		PORTB &= ~(1 << PB3);						// Deactivate Output on PB3
     a92:	2b 98       	cbi	0x05, 3	; 5
		PORTD |=  (1 << PD6);						// Activate Output on PD6
     a94:	5e 9a       	sbi	0x0b, 6	; 11
		MATCH_COUNTER_T2 = PULSE_0_START_TIME;		// Reset counter to zero
     a96:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <PULSE_0_START_TIME>
     a9a:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <MATCH_COUNTER_T2>
	}
}
     a9e:	9f 91       	pop	r25
     aa0:	8f 91       	pop	r24
     aa2:	0f 90       	pop	r0
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	0f 90       	pop	r0
     aa8:	1f 90       	pop	r1
     aaa:	18 95       	reti

00000aac <__vector_8>:

ISR(TIMER2_COMPB_vect){
     aac:	1f 92       	push	r1
     aae:	0f 92       	push	r0
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	0f 92       	push	r0
     ab4:	11 24       	eor	r1, r1
     ab6:	2f 93       	push	r18
     ab8:	3f 93       	push	r19
     aba:	4f 93       	push	r20
     abc:	8f 93       	push	r24
     abe:	9f 93       	push	r25
	if(MATCH_COUNTER_T2 == PULSE_KILL_TIME){
     ac0:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <MATCH_COUNTER_T2>
     ac4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     ac8:	98 13       	cpse	r25, r24
     aca:	01 c0       	rjmp	.+2      	; 0xace <__vector_8+0x22>
		PORTD &= ~(1 << PD6);						// Deactivate Output PD6
     acc:	5e 98       	cbi	0x0b, 6	; 11
	}
	if(MATCH_COUNTER_T2 == PULSE_KILL_TIME + PULSE_2_START_TIME){
     ace:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <MATCH_COUNTER_T2>
     ad2:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     ad6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <PULSE_2_START_TIME>
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	84 0f       	add	r24, r20
     ae0:	91 1d       	adc	r25, r1
     ae2:	28 17       	cp	r18, r24
     ae4:	39 07       	cpc	r19, r25
     ae6:	09 f4       	brne	.+2      	; 0xaea <__vector_8+0x3e>
		PORTB &= ~(1 << PB3);
     ae8:	2b 98       	cbi	0x05, 3	; 5
	}
	MATCH_COUNTER_T2++;
     aea:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <MATCH_COUNTER_T2>
     aee:	8f 5f       	subi	r24, 0xFF	; 255
     af0:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <MATCH_COUNTER_T2>
}
     af4:	9f 91       	pop	r25
     af6:	8f 91       	pop	r24
     af8:	4f 91       	pop	r20
     afa:	3f 91       	pop	r19
     afc:	2f 91       	pop	r18
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <__vector_21>:
	
/*** Analog to Digital Conversion Complete Interrupt ***/
ISR(ADC_vect){
     b08:	1f 92       	push	r1
     b0a:	0f 92       	push	r0
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	0f 92       	push	r0
     b10:	11 24       	eor	r1, r1
     b12:	8f 93       	push	r24
     b14:	9f 93       	push	r25
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
	/*** WARNING ***/
	/* The following conditions are critical to correct operation of the system.
	a. As of 27.09.18. the feature to sample 24 points across the input waveform is not yet tested. */
	#ifdef ADC_DEBUG_MODE
	// Debugger Mode...
		if (ADC_next_channel == ADC_COIL_VOLTAGE_CHANNEL){
     b1a:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <ADC_next_channel>
     b1e:	81 11       	cpse	r24, r1
     b20:	16 c0       	rjmp	.+44     	; 0xb4e <__vector_21+0x46>
			raw_ADC_output_PC0 = ADC;
     b22:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     b26:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     b2a:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <raw_ADC_output_PC0+0x1>
     b2e:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <raw_ADC_output_PC0>
			debug_ADC_channel = ADC_next_channel;
     b32:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <debug_ADC_channel>
			ADC_next_channel = ADC_COIL_CURRENT_CHANNEL;	// Next conversion is coil current shunt
     b36:	85 e0       	ldi	r24, 0x05	; 5
     b38:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <ADC_next_channel>
			ADMUX &= 0xf0;									// Reset to Channel 0
     b3c:	ec e7       	ldi	r30, 0x7C	; 124
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	80 7f       	andi	r24, 0xF0	; 240
     b44:	80 83       	st	Z, r24
			ADMUX |= 0x05;									// Set to Channel 5. (coil current shunt)
     b46:	80 81       	ld	r24, Z
     b48:	85 60       	ori	r24, 0x05	; 5
     b4a:	80 83       	st	Z, r24
     b4c:	16 c0       	rjmp	.+44     	; 0xb7a <__vector_21+0x72>
		}
		else if(ADC_next_channel == ADC_COIL_CURRENT_CHANNEL){
     b4e:	85 30       	cpi	r24, 0x05	; 5
     b50:	a1 f4       	brne	.+40     	; 0xb7a <__vector_21+0x72>
			raw_ADC_output_PC5 = ADC;
     b52:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     b56:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     b5a:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <raw_ADC_output_PC5+0x1>
     b5e:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <raw_ADC_output_PC5>
			debug_ADC_channel = ADC_next_channel;
     b62:	85 e0       	ldi	r24, 0x05	; 5
     b64:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <debug_ADC_channel>
			ADC_next_channel = ADC_COIL_VOLTAGE_CHANNEL;	// Next conversion is back to coil voltage shunt
     b68:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <ADC_next_channel>
			ADMUX &= 0xf0;									// Reset to Channel 0.
     b6c:	ec e7       	ldi	r30, 0x7C	; 124
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	80 7f       	andi	r24, 0xF0	; 240
     b74:	80 83       	st	Z, r24
			ADMUX |= 0x00;									// Set to Channel 0. (coil voltage shunt)
     b76:	80 81       	ld	r24, Z
     b78:	80 83       	st	Z, r24
		}
		ADCSRA |= (1 << ADSC);								// Start a new conversion...
     b7a:	ea e7       	ldi	r30, 0x7A	; 122
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	80 64       	ori	r24, 0x40	; 64
     b82:	80 83       	st	Z, r24
			ADMUX |= 0x05;									// Set to Channel 5. (coil current shunt)
		}
		ADCSRA |= (1 << ADSC);								// Start a new conversion...
	#endif
	
}
     b84:	ff 91       	pop	r31
     b86:	ef 91       	pop	r30
     b88:	9f 91       	pop	r25
     b8a:	8f 91       	pop	r24
     b8c:	0f 90       	pop	r0
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	0f 90       	pop	r0
     b92:	1f 90       	pop	r1
     b94:	18 95       	reti

00000b96 <timer2_init>:
		TCCR2B |=  (1 << CS22);			// Set prescaler to 64
		TCCR2B &= ~(1 << CS21);			// @F_CPU 16 MHz... F(Timer) = 250KHz
		TCCR2B &= ~(1 << CS20);			
	#else
	// The program is running at 8MHz.
		TCCR2B &= ~(1 << CS22);			// Set prescaler to 32
     b96:	e1 eb       	ldi	r30, 0xB1	; 177
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8b 7f       	andi	r24, 0xFB	; 251
     b9e:	80 83       	st	Z, r24
		TCCR2B |=  (1 << CS21);			// @F_CPU 8 MHz... F(Timer) = 250KHz
     ba0:	80 81       	ld	r24, Z
     ba2:	82 60       	ori	r24, 0x02	; 2
     ba4:	80 83       	st	Z, r24
		TCCR2B |=  (1 << CS20);		    
     ba6:	80 81       	ld	r24, Z
     ba8:	81 60       	ori	r24, 0x01	; 1
     baa:	80 83       	st	Z, r24
	#endif
	/*** TIMSK0: TC0 Interrupt Mask Register ***/
	TIMSK2 |= (1 << OCIE2A);		// Timer/Counter2 Output Compare A Match Interrupt Enabled
     bac:	e0 e7       	ldi	r30, 0x70	; 112
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	82 60       	ori	r24, 0x02	; 2
     bb4:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2B);		// Timer/Counter2 Output Compare B Match Interrupt Enabled
     bb6:	80 81       	ld	r24, Z
     bb8:	84 60       	ori	r24, 0x04	; 4
     bba:	80 83       	st	Z, r24
     bbc:	08 95       	ret

00000bbe <__subsf3>:
     bbe:	50 58       	subi	r21, 0x80	; 128

00000bc0 <__addsf3>:
     bc0:	bb 27       	eor	r27, r27
     bc2:	aa 27       	eor	r26, r26
     bc4:	0e 94 f7 05 	call	0xbee	; 0xbee <__addsf3x>
     bc8:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_round>
     bcc:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__fp_pscA>
     bd0:	38 f0       	brcs	.+14     	; 0xbe0 <__addsf3+0x20>
     bd2:	0e 94 63 07 	call	0xec6	; 0xec6 <__fp_pscB>
     bd6:	20 f0       	brcs	.+8      	; 0xbe0 <__addsf3+0x20>
     bd8:	39 f4       	brne	.+14     	; 0xbe8 <__addsf3+0x28>
     bda:	9f 3f       	cpi	r25, 0xFF	; 255
     bdc:	19 f4       	brne	.+6      	; 0xbe4 <__addsf3+0x24>
     bde:	26 f4       	brtc	.+8      	; 0xbe8 <__addsf3+0x28>
     be0:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_nan>
     be4:	0e f4       	brtc	.+2      	; 0xbe8 <__addsf3+0x28>
     be6:	e0 95       	com	r30
     be8:	e7 fb       	bst	r30, 7
     bea:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_inf>

00000bee <__addsf3x>:
     bee:	e9 2f       	mov	r30, r25
     bf0:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_split3>
     bf4:	58 f3       	brcs	.-42     	; 0xbcc <__addsf3+0xc>
     bf6:	ba 17       	cp	r27, r26
     bf8:	62 07       	cpc	r22, r18
     bfa:	73 07       	cpc	r23, r19
     bfc:	84 07       	cpc	r24, r20
     bfe:	95 07       	cpc	r25, r21
     c00:	20 f0       	brcs	.+8      	; 0xc0a <__addsf3x+0x1c>
     c02:	79 f4       	brne	.+30     	; 0xc22 <__addsf3x+0x34>
     c04:	a6 f5       	brtc	.+104    	; 0xc6e <__addsf3x+0x80>
     c06:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_zero>
     c0a:	0e f4       	brtc	.+2      	; 0xc0e <__addsf3x+0x20>
     c0c:	e0 95       	com	r30
     c0e:	0b 2e       	mov	r0, r27
     c10:	ba 2f       	mov	r27, r26
     c12:	a0 2d       	mov	r26, r0
     c14:	0b 01       	movw	r0, r22
     c16:	b9 01       	movw	r22, r18
     c18:	90 01       	movw	r18, r0
     c1a:	0c 01       	movw	r0, r24
     c1c:	ca 01       	movw	r24, r20
     c1e:	a0 01       	movw	r20, r0
     c20:	11 24       	eor	r1, r1
     c22:	ff 27       	eor	r31, r31
     c24:	59 1b       	sub	r21, r25
     c26:	99 f0       	breq	.+38     	; 0xc4e <__addsf3x+0x60>
     c28:	59 3f       	cpi	r21, 0xF9	; 249
     c2a:	50 f4       	brcc	.+20     	; 0xc40 <__addsf3x+0x52>
     c2c:	50 3e       	cpi	r21, 0xE0	; 224
     c2e:	68 f1       	brcs	.+90     	; 0xc8a <__addsf3x+0x9c>
     c30:	1a 16       	cp	r1, r26
     c32:	f0 40       	sbci	r31, 0x00	; 0
     c34:	a2 2f       	mov	r26, r18
     c36:	23 2f       	mov	r18, r19
     c38:	34 2f       	mov	r19, r20
     c3a:	44 27       	eor	r20, r20
     c3c:	58 5f       	subi	r21, 0xF8	; 248
     c3e:	f3 cf       	rjmp	.-26     	; 0xc26 <__addsf3x+0x38>
     c40:	46 95       	lsr	r20
     c42:	37 95       	ror	r19
     c44:	27 95       	ror	r18
     c46:	a7 95       	ror	r26
     c48:	f0 40       	sbci	r31, 0x00	; 0
     c4a:	53 95       	inc	r21
     c4c:	c9 f7       	brne	.-14     	; 0xc40 <__addsf3x+0x52>
     c4e:	7e f4       	brtc	.+30     	; 0xc6e <__addsf3x+0x80>
     c50:	1f 16       	cp	r1, r31
     c52:	ba 0b       	sbc	r27, r26
     c54:	62 0b       	sbc	r22, r18
     c56:	73 0b       	sbc	r23, r19
     c58:	84 0b       	sbc	r24, r20
     c5a:	ba f0       	brmi	.+46     	; 0xc8a <__addsf3x+0x9c>
     c5c:	91 50       	subi	r25, 0x01	; 1
     c5e:	a1 f0       	breq	.+40     	; 0xc88 <__addsf3x+0x9a>
     c60:	ff 0f       	add	r31, r31
     c62:	bb 1f       	adc	r27, r27
     c64:	66 1f       	adc	r22, r22
     c66:	77 1f       	adc	r23, r23
     c68:	88 1f       	adc	r24, r24
     c6a:	c2 f7       	brpl	.-16     	; 0xc5c <__addsf3x+0x6e>
     c6c:	0e c0       	rjmp	.+28     	; 0xc8a <__addsf3x+0x9c>
     c6e:	ba 0f       	add	r27, r26
     c70:	62 1f       	adc	r22, r18
     c72:	73 1f       	adc	r23, r19
     c74:	84 1f       	adc	r24, r20
     c76:	48 f4       	brcc	.+18     	; 0xc8a <__addsf3x+0x9c>
     c78:	87 95       	ror	r24
     c7a:	77 95       	ror	r23
     c7c:	67 95       	ror	r22
     c7e:	b7 95       	ror	r27
     c80:	f7 95       	ror	r31
     c82:	9e 3f       	cpi	r25, 0xFE	; 254
     c84:	08 f0       	brcs	.+2      	; 0xc88 <__addsf3x+0x9a>
     c86:	b0 cf       	rjmp	.-160    	; 0xbe8 <__addsf3+0x28>
     c88:	93 95       	inc	r25
     c8a:	88 0f       	add	r24, r24
     c8c:	08 f0       	brcs	.+2      	; 0xc90 <__addsf3x+0xa2>
     c8e:	99 27       	eor	r25, r25
     c90:	ee 0f       	add	r30, r30
     c92:	97 95       	ror	r25
     c94:	87 95       	ror	r24
     c96:	08 95       	ret

00000c98 <__cmpsf2>:
     c98:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__fp_cmp>
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <__cmpsf2+0x8>
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	08 95       	ret

00000ca2 <__divsf3>:
     ca2:	0e 94 65 06 	call	0xcca	; 0xcca <__divsf3x>
     ca6:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_round>
     caa:	0e 94 63 07 	call	0xec6	; 0xec6 <__fp_pscB>
     cae:	58 f0       	brcs	.+22     	; 0xcc6 <__divsf3+0x24>
     cb0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__fp_pscA>
     cb4:	40 f0       	brcs	.+16     	; 0xcc6 <__divsf3+0x24>
     cb6:	29 f4       	brne	.+10     	; 0xcc2 <__divsf3+0x20>
     cb8:	5f 3f       	cpi	r21, 0xFF	; 255
     cba:	29 f0       	breq	.+10     	; 0xcc6 <__divsf3+0x24>
     cbc:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_inf>
     cc0:	51 11       	cpse	r21, r1
     cc2:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__fp_szero>
     cc6:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_nan>

00000cca <__divsf3x>:
     cca:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_split3>
     cce:	68 f3       	brcs	.-38     	; 0xcaa <__divsf3+0x8>

00000cd0 <__divsf3_pse>:
     cd0:	99 23       	and	r25, r25
     cd2:	b1 f3       	breq	.-20     	; 0xcc0 <__divsf3+0x1e>
     cd4:	55 23       	and	r21, r21
     cd6:	91 f3       	breq	.-28     	; 0xcbc <__divsf3+0x1a>
     cd8:	95 1b       	sub	r25, r21
     cda:	55 0b       	sbc	r21, r21
     cdc:	bb 27       	eor	r27, r27
     cde:	aa 27       	eor	r26, r26
     ce0:	62 17       	cp	r22, r18
     ce2:	73 07       	cpc	r23, r19
     ce4:	84 07       	cpc	r24, r20
     ce6:	38 f0       	brcs	.+14     	; 0xcf6 <__divsf3_pse+0x26>
     ce8:	9f 5f       	subi	r25, 0xFF	; 255
     cea:	5f 4f       	sbci	r21, 0xFF	; 255
     cec:	22 0f       	add	r18, r18
     cee:	33 1f       	adc	r19, r19
     cf0:	44 1f       	adc	r20, r20
     cf2:	aa 1f       	adc	r26, r26
     cf4:	a9 f3       	breq	.-22     	; 0xce0 <__divsf3_pse+0x10>
     cf6:	35 d0       	rcall	.+106    	; 0xd62 <__divsf3_pse+0x92>
     cf8:	0e 2e       	mov	r0, r30
     cfa:	3a f0       	brmi	.+14     	; 0xd0a <__divsf3_pse+0x3a>
     cfc:	e0 e8       	ldi	r30, 0x80	; 128
     cfe:	32 d0       	rcall	.+100    	; 0xd64 <__divsf3_pse+0x94>
     d00:	91 50       	subi	r25, 0x01	; 1
     d02:	50 40       	sbci	r21, 0x00	; 0
     d04:	e6 95       	lsr	r30
     d06:	00 1c       	adc	r0, r0
     d08:	ca f7       	brpl	.-14     	; 0xcfc <__divsf3_pse+0x2c>
     d0a:	2b d0       	rcall	.+86     	; 0xd62 <__divsf3_pse+0x92>
     d0c:	fe 2f       	mov	r31, r30
     d0e:	29 d0       	rcall	.+82     	; 0xd62 <__divsf3_pse+0x92>
     d10:	66 0f       	add	r22, r22
     d12:	77 1f       	adc	r23, r23
     d14:	88 1f       	adc	r24, r24
     d16:	bb 1f       	adc	r27, r27
     d18:	26 17       	cp	r18, r22
     d1a:	37 07       	cpc	r19, r23
     d1c:	48 07       	cpc	r20, r24
     d1e:	ab 07       	cpc	r26, r27
     d20:	b0 e8       	ldi	r27, 0x80	; 128
     d22:	09 f0       	breq	.+2      	; 0xd26 <__divsf3_pse+0x56>
     d24:	bb 0b       	sbc	r27, r27
     d26:	80 2d       	mov	r24, r0
     d28:	bf 01       	movw	r22, r30
     d2a:	ff 27       	eor	r31, r31
     d2c:	93 58       	subi	r25, 0x83	; 131
     d2e:	5f 4f       	sbci	r21, 0xFF	; 255
     d30:	3a f0       	brmi	.+14     	; 0xd40 <__divsf3_pse+0x70>
     d32:	9e 3f       	cpi	r25, 0xFE	; 254
     d34:	51 05       	cpc	r21, r1
     d36:	78 f0       	brcs	.+30     	; 0xd56 <__divsf3_pse+0x86>
     d38:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_inf>
     d3c:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__fp_szero>
     d40:	5f 3f       	cpi	r21, 0xFF	; 255
     d42:	e4 f3       	brlt	.-8      	; 0xd3c <__divsf3_pse+0x6c>
     d44:	98 3e       	cpi	r25, 0xE8	; 232
     d46:	d4 f3       	brlt	.-12     	; 0xd3c <__divsf3_pse+0x6c>
     d48:	86 95       	lsr	r24
     d4a:	77 95       	ror	r23
     d4c:	67 95       	ror	r22
     d4e:	b7 95       	ror	r27
     d50:	f7 95       	ror	r31
     d52:	9f 5f       	subi	r25, 0xFF	; 255
     d54:	c9 f7       	brne	.-14     	; 0xd48 <__divsf3_pse+0x78>
     d56:	88 0f       	add	r24, r24
     d58:	91 1d       	adc	r25, r1
     d5a:	96 95       	lsr	r25
     d5c:	87 95       	ror	r24
     d5e:	97 f9       	bld	r25, 7
     d60:	08 95       	ret
     d62:	e1 e0       	ldi	r30, 0x01	; 1
     d64:	66 0f       	add	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	88 1f       	adc	r24, r24
     d6a:	bb 1f       	adc	r27, r27
     d6c:	62 17       	cp	r22, r18
     d6e:	73 07       	cpc	r23, r19
     d70:	84 07       	cpc	r24, r20
     d72:	ba 07       	cpc	r27, r26
     d74:	20 f0       	brcs	.+8      	; 0xd7e <__divsf3_pse+0xae>
     d76:	62 1b       	sub	r22, r18
     d78:	73 0b       	sbc	r23, r19
     d7a:	84 0b       	sbc	r24, r20
     d7c:	ba 0b       	sbc	r27, r26
     d7e:	ee 1f       	adc	r30, r30
     d80:	88 f7       	brcc	.-30     	; 0xd64 <__divsf3_pse+0x94>
     d82:	e0 95       	com	r30
     d84:	08 95       	ret

00000d86 <__fixunssfsi>:
     d86:	0e 94 83 07 	call	0xf06	; 0xf06 <__fp_splitA>
     d8a:	88 f0       	brcs	.+34     	; 0xdae <__fixunssfsi+0x28>
     d8c:	9f 57       	subi	r25, 0x7F	; 127
     d8e:	98 f0       	brcs	.+38     	; 0xdb6 <__fixunssfsi+0x30>
     d90:	b9 2f       	mov	r27, r25
     d92:	99 27       	eor	r25, r25
     d94:	b7 51       	subi	r27, 0x17	; 23
     d96:	b0 f0       	brcs	.+44     	; 0xdc4 <__fixunssfsi+0x3e>
     d98:	e1 f0       	breq	.+56     	; 0xdd2 <__fixunssfsi+0x4c>
     d9a:	66 0f       	add	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	88 1f       	adc	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	1a f0       	brmi	.+6      	; 0xdaa <__fixunssfsi+0x24>
     da4:	ba 95       	dec	r27
     da6:	c9 f7       	brne	.-14     	; 0xd9a <__fixunssfsi+0x14>
     da8:	14 c0       	rjmp	.+40     	; 0xdd2 <__fixunssfsi+0x4c>
     daa:	b1 30       	cpi	r27, 0x01	; 1
     dac:	91 f0       	breq	.+36     	; 0xdd2 <__fixunssfsi+0x4c>
     dae:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__fp_zero>
     db2:	b1 e0       	ldi	r27, 0x01	; 1
     db4:	08 95       	ret
     db6:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_zero>
     dba:	67 2f       	mov	r22, r23
     dbc:	78 2f       	mov	r23, r24
     dbe:	88 27       	eor	r24, r24
     dc0:	b8 5f       	subi	r27, 0xF8	; 248
     dc2:	39 f0       	breq	.+14     	; 0xdd2 <__fixunssfsi+0x4c>
     dc4:	b9 3f       	cpi	r27, 0xF9	; 249
     dc6:	cc f3       	brlt	.-14     	; 0xdba <__fixunssfsi+0x34>
     dc8:	86 95       	lsr	r24
     dca:	77 95       	ror	r23
     dcc:	67 95       	ror	r22
     dce:	b3 95       	inc	r27
     dd0:	d9 f7       	brne	.-10     	; 0xdc8 <__fixunssfsi+0x42>
     dd2:	3e f4       	brtc	.+14     	; 0xde2 <__fixunssfsi+0x5c>
     dd4:	90 95       	com	r25
     dd6:	80 95       	com	r24
     dd8:	70 95       	com	r23
     dda:	61 95       	neg	r22
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	8f 4f       	sbci	r24, 0xFF	; 255
     de0:	9f 4f       	sbci	r25, 0xFF	; 255
     de2:	08 95       	ret

00000de4 <__floatunsisf>:
     de4:	e8 94       	clt
     de6:	09 c0       	rjmp	.+18     	; 0xdfa <__floatsisf+0x12>

00000de8 <__floatsisf>:
     de8:	97 fb       	bst	r25, 7
     dea:	3e f4       	brtc	.+14     	; 0xdfa <__floatsisf+0x12>
     dec:	90 95       	com	r25
     dee:	80 95       	com	r24
     df0:	70 95       	com	r23
     df2:	61 95       	neg	r22
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	8f 4f       	sbci	r24, 0xFF	; 255
     df8:	9f 4f       	sbci	r25, 0xFF	; 255
     dfa:	99 23       	and	r25, r25
     dfc:	a9 f0       	breq	.+42     	; 0xe28 <__floatsisf+0x40>
     dfe:	f9 2f       	mov	r31, r25
     e00:	96 e9       	ldi	r25, 0x96	; 150
     e02:	bb 27       	eor	r27, r27
     e04:	93 95       	inc	r25
     e06:	f6 95       	lsr	r31
     e08:	87 95       	ror	r24
     e0a:	77 95       	ror	r23
     e0c:	67 95       	ror	r22
     e0e:	b7 95       	ror	r27
     e10:	f1 11       	cpse	r31, r1
     e12:	f8 cf       	rjmp	.-16     	; 0xe04 <__floatsisf+0x1c>
     e14:	fa f4       	brpl	.+62     	; 0xe54 <__floatsisf+0x6c>
     e16:	bb 0f       	add	r27, r27
     e18:	11 f4       	brne	.+4      	; 0xe1e <__floatsisf+0x36>
     e1a:	60 ff       	sbrs	r22, 0
     e1c:	1b c0       	rjmp	.+54     	; 0xe54 <__floatsisf+0x6c>
     e1e:	6f 5f       	subi	r22, 0xFF	; 255
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	8f 4f       	sbci	r24, 0xFF	; 255
     e24:	9f 4f       	sbci	r25, 0xFF	; 255
     e26:	16 c0       	rjmp	.+44     	; 0xe54 <__floatsisf+0x6c>
     e28:	88 23       	and	r24, r24
     e2a:	11 f0       	breq	.+4      	; 0xe30 <__floatsisf+0x48>
     e2c:	96 e9       	ldi	r25, 0x96	; 150
     e2e:	11 c0       	rjmp	.+34     	; 0xe52 <__floatsisf+0x6a>
     e30:	77 23       	and	r23, r23
     e32:	21 f0       	breq	.+8      	; 0xe3c <__floatsisf+0x54>
     e34:	9e e8       	ldi	r25, 0x8E	; 142
     e36:	87 2f       	mov	r24, r23
     e38:	76 2f       	mov	r23, r22
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <__floatsisf+0x5e>
     e3c:	66 23       	and	r22, r22
     e3e:	71 f0       	breq	.+28     	; 0xe5c <__floatsisf+0x74>
     e40:	96 e8       	ldi	r25, 0x86	; 134
     e42:	86 2f       	mov	r24, r22
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	2a f0       	brmi	.+10     	; 0xe54 <__floatsisf+0x6c>
     e4a:	9a 95       	dec	r25
     e4c:	66 0f       	add	r22, r22
     e4e:	77 1f       	adc	r23, r23
     e50:	88 1f       	adc	r24, r24
     e52:	da f7       	brpl	.-10     	; 0xe4a <__floatsisf+0x62>
     e54:	88 0f       	add	r24, r24
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	97 f9       	bld	r25, 7
     e5c:	08 95       	ret

00000e5e <__fp_cmp>:
     e5e:	99 0f       	add	r25, r25
     e60:	00 08       	sbc	r0, r0
     e62:	55 0f       	add	r21, r21
     e64:	aa 0b       	sbc	r26, r26
     e66:	e0 e8       	ldi	r30, 0x80	; 128
     e68:	fe ef       	ldi	r31, 0xFE	; 254
     e6a:	16 16       	cp	r1, r22
     e6c:	17 06       	cpc	r1, r23
     e6e:	e8 07       	cpc	r30, r24
     e70:	f9 07       	cpc	r31, r25
     e72:	c0 f0       	brcs	.+48     	; 0xea4 <__fp_cmp+0x46>
     e74:	12 16       	cp	r1, r18
     e76:	13 06       	cpc	r1, r19
     e78:	e4 07       	cpc	r30, r20
     e7a:	f5 07       	cpc	r31, r21
     e7c:	98 f0       	brcs	.+38     	; 0xea4 <__fp_cmp+0x46>
     e7e:	62 1b       	sub	r22, r18
     e80:	73 0b       	sbc	r23, r19
     e82:	84 0b       	sbc	r24, r20
     e84:	95 0b       	sbc	r25, r21
     e86:	39 f4       	brne	.+14     	; 0xe96 <__fp_cmp+0x38>
     e88:	0a 26       	eor	r0, r26
     e8a:	61 f0       	breq	.+24     	; 0xea4 <__fp_cmp+0x46>
     e8c:	23 2b       	or	r18, r19
     e8e:	24 2b       	or	r18, r20
     e90:	25 2b       	or	r18, r21
     e92:	21 f4       	brne	.+8      	; 0xe9c <__fp_cmp+0x3e>
     e94:	08 95       	ret
     e96:	0a 26       	eor	r0, r26
     e98:	09 f4       	brne	.+2      	; 0xe9c <__fp_cmp+0x3e>
     e9a:	a1 40       	sbci	r26, 0x01	; 1
     e9c:	a6 95       	lsr	r26
     e9e:	8f ef       	ldi	r24, 0xFF	; 255
     ea0:	81 1d       	adc	r24, r1
     ea2:	81 1d       	adc	r24, r1
     ea4:	08 95       	ret

00000ea6 <__fp_inf>:
     ea6:	97 f9       	bld	r25, 7
     ea8:	9f 67       	ori	r25, 0x7F	; 127
     eaa:	80 e8       	ldi	r24, 0x80	; 128
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	08 95       	ret

00000eb2 <__fp_nan>:
     eb2:	9f ef       	ldi	r25, 0xFF	; 255
     eb4:	80 ec       	ldi	r24, 0xC0	; 192
     eb6:	08 95       	ret

00000eb8 <__fp_pscA>:
     eb8:	00 24       	eor	r0, r0
     eba:	0a 94       	dec	r0
     ebc:	16 16       	cp	r1, r22
     ebe:	17 06       	cpc	r1, r23
     ec0:	18 06       	cpc	r1, r24
     ec2:	09 06       	cpc	r0, r25
     ec4:	08 95       	ret

00000ec6 <__fp_pscB>:
     ec6:	00 24       	eor	r0, r0
     ec8:	0a 94       	dec	r0
     eca:	12 16       	cp	r1, r18
     ecc:	13 06       	cpc	r1, r19
     ece:	14 06       	cpc	r1, r20
     ed0:	05 06       	cpc	r0, r21
     ed2:	08 95       	ret

00000ed4 <__fp_round>:
     ed4:	09 2e       	mov	r0, r25
     ed6:	03 94       	inc	r0
     ed8:	00 0c       	add	r0, r0
     eda:	11 f4       	brne	.+4      	; 0xee0 <__fp_round+0xc>
     edc:	88 23       	and	r24, r24
     ede:	52 f0       	brmi	.+20     	; 0xef4 <__fp_round+0x20>
     ee0:	bb 0f       	add	r27, r27
     ee2:	40 f4       	brcc	.+16     	; 0xef4 <__fp_round+0x20>
     ee4:	bf 2b       	or	r27, r31
     ee6:	11 f4       	brne	.+4      	; 0xeec <__fp_round+0x18>
     ee8:	60 ff       	sbrs	r22, 0
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <__fp_round+0x20>
     eec:	6f 5f       	subi	r22, 0xFF	; 255
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	8f 4f       	sbci	r24, 0xFF	; 255
     ef2:	9f 4f       	sbci	r25, 0xFF	; 255
     ef4:	08 95       	ret

00000ef6 <__fp_split3>:
     ef6:	57 fd       	sbrc	r21, 7
     ef8:	90 58       	subi	r25, 0x80	; 128
     efa:	44 0f       	add	r20, r20
     efc:	55 1f       	adc	r21, r21
     efe:	59 f0       	breq	.+22     	; 0xf16 <__fp_splitA+0x10>
     f00:	5f 3f       	cpi	r21, 0xFF	; 255
     f02:	71 f0       	breq	.+28     	; 0xf20 <__fp_splitA+0x1a>
     f04:	47 95       	ror	r20

00000f06 <__fp_splitA>:
     f06:	88 0f       	add	r24, r24
     f08:	97 fb       	bst	r25, 7
     f0a:	99 1f       	adc	r25, r25
     f0c:	61 f0       	breq	.+24     	; 0xf26 <__fp_splitA+0x20>
     f0e:	9f 3f       	cpi	r25, 0xFF	; 255
     f10:	79 f0       	breq	.+30     	; 0xf30 <__fp_splitA+0x2a>
     f12:	87 95       	ror	r24
     f14:	08 95       	ret
     f16:	12 16       	cp	r1, r18
     f18:	13 06       	cpc	r1, r19
     f1a:	14 06       	cpc	r1, r20
     f1c:	55 1f       	adc	r21, r21
     f1e:	f2 cf       	rjmp	.-28     	; 0xf04 <__fp_split3+0xe>
     f20:	46 95       	lsr	r20
     f22:	f1 df       	rcall	.-30     	; 0xf06 <__fp_splitA>
     f24:	08 c0       	rjmp	.+16     	; 0xf36 <__fp_splitA+0x30>
     f26:	16 16       	cp	r1, r22
     f28:	17 06       	cpc	r1, r23
     f2a:	18 06       	cpc	r1, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	f1 cf       	rjmp	.-30     	; 0xf12 <__fp_splitA+0xc>
     f30:	86 95       	lsr	r24
     f32:	71 05       	cpc	r23, r1
     f34:	61 05       	cpc	r22, r1
     f36:	08 94       	sec
     f38:	08 95       	ret

00000f3a <__fp_zero>:
     f3a:	e8 94       	clt

00000f3c <__fp_szero>:
     f3c:	bb 27       	eor	r27, r27
     f3e:	66 27       	eor	r22, r22
     f40:	77 27       	eor	r23, r23
     f42:	cb 01       	movw	r24, r22
     f44:	97 f9       	bld	r25, 7
     f46:	08 95       	ret

00000f48 <__gesf2>:
     f48:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__fp_cmp>
     f4c:	08 f4       	brcc	.+2      	; 0xf50 <__gesf2+0x8>
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	08 95       	ret

00000f52 <__mulsf3>:
     f52:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3x>
     f56:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__fp_round>
     f5a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__fp_pscA>
     f5e:	38 f0       	brcs	.+14     	; 0xf6e <__mulsf3+0x1c>
     f60:	0e 94 63 07 	call	0xec6	; 0xec6 <__fp_pscB>
     f64:	20 f0       	brcs	.+8      	; 0xf6e <__mulsf3+0x1c>
     f66:	95 23       	and	r25, r21
     f68:	11 f0       	breq	.+4      	; 0xf6e <__mulsf3+0x1c>
     f6a:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_inf>
     f6e:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_nan>
     f72:	11 24       	eor	r1, r1
     f74:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__fp_szero>

00000f78 <__mulsf3x>:
     f78:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_split3>
     f7c:	70 f3       	brcs	.-36     	; 0xf5a <__mulsf3+0x8>

00000f7e <__mulsf3_pse>:
     f7e:	95 9f       	mul	r25, r21
     f80:	c1 f3       	breq	.-16     	; 0xf72 <__mulsf3+0x20>
     f82:	95 0f       	add	r25, r21
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	55 1f       	adc	r21, r21
     f88:	62 9f       	mul	r22, r18
     f8a:	f0 01       	movw	r30, r0
     f8c:	72 9f       	mul	r23, r18
     f8e:	bb 27       	eor	r27, r27
     f90:	f0 0d       	add	r31, r0
     f92:	b1 1d       	adc	r27, r1
     f94:	63 9f       	mul	r22, r19
     f96:	aa 27       	eor	r26, r26
     f98:	f0 0d       	add	r31, r0
     f9a:	b1 1d       	adc	r27, r1
     f9c:	aa 1f       	adc	r26, r26
     f9e:	64 9f       	mul	r22, r20
     fa0:	66 27       	eor	r22, r22
     fa2:	b0 0d       	add	r27, r0
     fa4:	a1 1d       	adc	r26, r1
     fa6:	66 1f       	adc	r22, r22
     fa8:	82 9f       	mul	r24, r18
     faa:	22 27       	eor	r18, r18
     fac:	b0 0d       	add	r27, r0
     fae:	a1 1d       	adc	r26, r1
     fb0:	62 1f       	adc	r22, r18
     fb2:	73 9f       	mul	r23, r19
     fb4:	b0 0d       	add	r27, r0
     fb6:	a1 1d       	adc	r26, r1
     fb8:	62 1f       	adc	r22, r18
     fba:	83 9f       	mul	r24, r19
     fbc:	a0 0d       	add	r26, r0
     fbe:	61 1d       	adc	r22, r1
     fc0:	22 1f       	adc	r18, r18
     fc2:	74 9f       	mul	r23, r20
     fc4:	33 27       	eor	r19, r19
     fc6:	a0 0d       	add	r26, r0
     fc8:	61 1d       	adc	r22, r1
     fca:	23 1f       	adc	r18, r19
     fcc:	84 9f       	mul	r24, r20
     fce:	60 0d       	add	r22, r0
     fd0:	21 1d       	adc	r18, r1
     fd2:	82 2f       	mov	r24, r18
     fd4:	76 2f       	mov	r23, r22
     fd6:	6a 2f       	mov	r22, r26
     fd8:	11 24       	eor	r1, r1
     fda:	9f 57       	subi	r25, 0x7F	; 127
     fdc:	50 40       	sbci	r21, 0x00	; 0
     fde:	9a f0       	brmi	.+38     	; 0x1006 <__mulsf3_pse+0x88>
     fe0:	f1 f0       	breq	.+60     	; 0x101e <__mulsf3_pse+0xa0>
     fe2:	88 23       	and	r24, r24
     fe4:	4a f0       	brmi	.+18     	; 0xff8 <__mulsf3_pse+0x7a>
     fe6:	ee 0f       	add	r30, r30
     fe8:	ff 1f       	adc	r31, r31
     fea:	bb 1f       	adc	r27, r27
     fec:	66 1f       	adc	r22, r22
     fee:	77 1f       	adc	r23, r23
     ff0:	88 1f       	adc	r24, r24
     ff2:	91 50       	subi	r25, 0x01	; 1
     ff4:	50 40       	sbci	r21, 0x00	; 0
     ff6:	a9 f7       	brne	.-22     	; 0xfe2 <__mulsf3_pse+0x64>
     ff8:	9e 3f       	cpi	r25, 0xFE	; 254
     ffa:	51 05       	cpc	r21, r1
     ffc:	80 f0       	brcs	.+32     	; 0x101e <__mulsf3_pse+0xa0>
     ffe:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_inf>
    1002:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__fp_szero>
    1006:	5f 3f       	cpi	r21, 0xFF	; 255
    1008:	e4 f3       	brlt	.-8      	; 0x1002 <__mulsf3_pse+0x84>
    100a:	98 3e       	cpi	r25, 0xE8	; 232
    100c:	d4 f3       	brlt	.-12     	; 0x1002 <__mulsf3_pse+0x84>
    100e:	86 95       	lsr	r24
    1010:	77 95       	ror	r23
    1012:	67 95       	ror	r22
    1014:	b7 95       	ror	r27
    1016:	f7 95       	ror	r31
    1018:	e7 95       	ror	r30
    101a:	9f 5f       	subi	r25, 0xFF	; 255
    101c:	c1 f7       	brne	.-16     	; 0x100e <__mulsf3_pse+0x90>
    101e:	fe 2b       	or	r31, r30
    1020:	88 0f       	add	r24, r24
    1022:	91 1d       	adc	r25, r1
    1024:	96 95       	lsr	r25
    1026:	87 95       	ror	r24
    1028:	97 f9       	bld	r25, 7
    102a:	08 95       	ret

0000102c <vfprintf>:
    102c:	a0 e1       	ldi	r26, 0x10	; 16
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	ec e1       	ldi	r30, 0x1C	; 28
    1032:	f8 e0       	ldi	r31, 0x08	; 8
    1034:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <__prologue_saves__>
    1038:	7c 01       	movw	r14, r24
    103a:	1b 01       	movw	r2, r22
    103c:	6a 01       	movw	r12, r20
    103e:	fc 01       	movw	r30, r24
    1040:	17 82       	std	Z+7, r1	; 0x07
    1042:	16 82       	std	Z+6, r1	; 0x06
    1044:	83 81       	ldd	r24, Z+3	; 0x03
    1046:	81 ff       	sbrs	r24, 1
    1048:	44 c3       	rjmp	.+1672   	; 0x16d2 <vfprintf+0x6a6>
    104a:	9e 01       	movw	r18, r28
    104c:	2f 5f       	subi	r18, 0xFF	; 255
    104e:	3f 4f       	sbci	r19, 0xFF	; 255
    1050:	39 01       	movw	r6, r18
    1052:	f7 01       	movw	r30, r14
    1054:	93 81       	ldd	r25, Z+3	; 0x03
    1056:	f1 01       	movw	r30, r2
    1058:	93 fd       	sbrc	r25, 3
    105a:	85 91       	lpm	r24, Z+
    105c:	93 ff       	sbrs	r25, 3
    105e:	81 91       	ld	r24, Z+
    1060:	1f 01       	movw	r2, r30
    1062:	88 23       	and	r24, r24
    1064:	09 f4       	brne	.+2      	; 0x1068 <vfprintf+0x3c>
    1066:	31 c3       	rjmp	.+1634   	; 0x16ca <vfprintf+0x69e>
    1068:	85 32       	cpi	r24, 0x25	; 37
    106a:	39 f4       	brne	.+14     	; 0x107a <vfprintf+0x4e>
    106c:	93 fd       	sbrc	r25, 3
    106e:	85 91       	lpm	r24, Z+
    1070:	93 ff       	sbrs	r25, 3
    1072:	81 91       	ld	r24, Z+
    1074:	1f 01       	movw	r2, r30
    1076:	85 32       	cpi	r24, 0x25	; 37
    1078:	39 f4       	brne	.+14     	; 0x1088 <vfprintf+0x5c>
    107a:	b7 01       	movw	r22, r14
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    1082:	56 01       	movw	r10, r12
    1084:	65 01       	movw	r12, r10
    1086:	e5 cf       	rjmp	.-54     	; 0x1052 <vfprintf+0x26>
    1088:	10 e0       	ldi	r17, 0x00	; 0
    108a:	51 2c       	mov	r5, r1
    108c:	91 2c       	mov	r9, r1
    108e:	ff e1       	ldi	r31, 0x1F	; 31
    1090:	f9 15       	cp	r31, r9
    1092:	d8 f0       	brcs	.+54     	; 0x10ca <vfprintf+0x9e>
    1094:	8b 32       	cpi	r24, 0x2B	; 43
    1096:	79 f0       	breq	.+30     	; 0x10b6 <vfprintf+0x8a>
    1098:	38 f4       	brcc	.+14     	; 0x10a8 <vfprintf+0x7c>
    109a:	80 32       	cpi	r24, 0x20	; 32
    109c:	79 f0       	breq	.+30     	; 0x10bc <vfprintf+0x90>
    109e:	83 32       	cpi	r24, 0x23	; 35
    10a0:	a1 f4       	brne	.+40     	; 0x10ca <vfprintf+0x9e>
    10a2:	f9 2d       	mov	r31, r9
    10a4:	f0 61       	ori	r31, 0x10	; 16
    10a6:	2e c0       	rjmp	.+92     	; 0x1104 <vfprintf+0xd8>
    10a8:	8d 32       	cpi	r24, 0x2D	; 45
    10aa:	61 f0       	breq	.+24     	; 0x10c4 <vfprintf+0x98>
    10ac:	80 33       	cpi	r24, 0x30	; 48
    10ae:	69 f4       	brne	.+26     	; 0x10ca <vfprintf+0x9e>
    10b0:	29 2d       	mov	r18, r9
    10b2:	21 60       	ori	r18, 0x01	; 1
    10b4:	2d c0       	rjmp	.+90     	; 0x1110 <vfprintf+0xe4>
    10b6:	39 2d       	mov	r19, r9
    10b8:	32 60       	ori	r19, 0x02	; 2
    10ba:	93 2e       	mov	r9, r19
    10bc:	89 2d       	mov	r24, r9
    10be:	84 60       	ori	r24, 0x04	; 4
    10c0:	98 2e       	mov	r9, r24
    10c2:	2a c0       	rjmp	.+84     	; 0x1118 <vfprintf+0xec>
    10c4:	e9 2d       	mov	r30, r9
    10c6:	e8 60       	ori	r30, 0x08	; 8
    10c8:	15 c0       	rjmp	.+42     	; 0x10f4 <vfprintf+0xc8>
    10ca:	97 fc       	sbrc	r9, 7
    10cc:	2d c0       	rjmp	.+90     	; 0x1128 <vfprintf+0xfc>
    10ce:	20 ed       	ldi	r18, 0xD0	; 208
    10d0:	28 0f       	add	r18, r24
    10d2:	2a 30       	cpi	r18, 0x0A	; 10
    10d4:	88 f4       	brcc	.+34     	; 0x10f8 <vfprintf+0xcc>
    10d6:	96 fe       	sbrs	r9, 6
    10d8:	06 c0       	rjmp	.+12     	; 0x10e6 <vfprintf+0xba>
    10da:	3a e0       	ldi	r19, 0x0A	; 10
    10dc:	13 9f       	mul	r17, r19
    10de:	20 0d       	add	r18, r0
    10e0:	11 24       	eor	r1, r1
    10e2:	12 2f       	mov	r17, r18
    10e4:	19 c0       	rjmp	.+50     	; 0x1118 <vfprintf+0xec>
    10e6:	8a e0       	ldi	r24, 0x0A	; 10
    10e8:	58 9e       	mul	r5, r24
    10ea:	20 0d       	add	r18, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	52 2e       	mov	r5, r18
    10f0:	e9 2d       	mov	r30, r9
    10f2:	e0 62       	ori	r30, 0x20	; 32
    10f4:	9e 2e       	mov	r9, r30
    10f6:	10 c0       	rjmp	.+32     	; 0x1118 <vfprintf+0xec>
    10f8:	8e 32       	cpi	r24, 0x2E	; 46
    10fa:	31 f4       	brne	.+12     	; 0x1108 <vfprintf+0xdc>
    10fc:	96 fc       	sbrc	r9, 6
    10fe:	e5 c2       	rjmp	.+1482   	; 0x16ca <vfprintf+0x69e>
    1100:	f9 2d       	mov	r31, r9
    1102:	f0 64       	ori	r31, 0x40	; 64
    1104:	9f 2e       	mov	r9, r31
    1106:	08 c0       	rjmp	.+16     	; 0x1118 <vfprintf+0xec>
    1108:	8c 36       	cpi	r24, 0x6C	; 108
    110a:	21 f4       	brne	.+8      	; 0x1114 <vfprintf+0xe8>
    110c:	29 2d       	mov	r18, r9
    110e:	20 68       	ori	r18, 0x80	; 128
    1110:	92 2e       	mov	r9, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <vfprintf+0xec>
    1114:	88 36       	cpi	r24, 0x68	; 104
    1116:	41 f4       	brne	.+16     	; 0x1128 <vfprintf+0xfc>
    1118:	f1 01       	movw	r30, r2
    111a:	93 fd       	sbrc	r25, 3
    111c:	85 91       	lpm	r24, Z+
    111e:	93 ff       	sbrs	r25, 3
    1120:	81 91       	ld	r24, Z+
    1122:	1f 01       	movw	r2, r30
    1124:	81 11       	cpse	r24, r1
    1126:	b3 cf       	rjmp	.-154    	; 0x108e <vfprintf+0x62>
    1128:	9b eb       	ldi	r25, 0xBB	; 187
    112a:	98 0f       	add	r25, r24
    112c:	93 30       	cpi	r25, 0x03	; 3
    112e:	20 f4       	brcc	.+8      	; 0x1138 <vfprintf+0x10c>
    1130:	99 2d       	mov	r25, r9
    1132:	90 61       	ori	r25, 0x10	; 16
    1134:	80 5e       	subi	r24, 0xE0	; 224
    1136:	07 c0       	rjmp	.+14     	; 0x1146 <vfprintf+0x11a>
    1138:	9b e9       	ldi	r25, 0x9B	; 155
    113a:	98 0f       	add	r25, r24
    113c:	93 30       	cpi	r25, 0x03	; 3
    113e:	08 f0       	brcs	.+2      	; 0x1142 <vfprintf+0x116>
    1140:	66 c1       	rjmp	.+716    	; 0x140e <vfprintf+0x3e2>
    1142:	99 2d       	mov	r25, r9
    1144:	9f 7e       	andi	r25, 0xEF	; 239
    1146:	96 ff       	sbrs	r25, 6
    1148:	16 e0       	ldi	r17, 0x06	; 6
    114a:	9f 73       	andi	r25, 0x3F	; 63
    114c:	99 2e       	mov	r9, r25
    114e:	85 36       	cpi	r24, 0x65	; 101
    1150:	19 f4       	brne	.+6      	; 0x1158 <vfprintf+0x12c>
    1152:	90 64       	ori	r25, 0x40	; 64
    1154:	99 2e       	mov	r9, r25
    1156:	08 c0       	rjmp	.+16     	; 0x1168 <vfprintf+0x13c>
    1158:	86 36       	cpi	r24, 0x66	; 102
    115a:	21 f4       	brne	.+8      	; 0x1164 <vfprintf+0x138>
    115c:	39 2f       	mov	r19, r25
    115e:	30 68       	ori	r19, 0x80	; 128
    1160:	93 2e       	mov	r9, r19
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <vfprintf+0x13c>
    1164:	11 11       	cpse	r17, r1
    1166:	11 50       	subi	r17, 0x01	; 1
    1168:	97 fe       	sbrs	r9, 7
    116a:	07 c0       	rjmp	.+14     	; 0x117a <vfprintf+0x14e>
    116c:	1c 33       	cpi	r17, 0x3C	; 60
    116e:	50 f4       	brcc	.+20     	; 0x1184 <vfprintf+0x158>
    1170:	44 24       	eor	r4, r4
    1172:	43 94       	inc	r4
    1174:	41 0e       	add	r4, r17
    1176:	27 e0       	ldi	r18, 0x07	; 7
    1178:	0b c0       	rjmp	.+22     	; 0x1190 <vfprintf+0x164>
    117a:	18 30       	cpi	r17, 0x08	; 8
    117c:	38 f0       	brcs	.+14     	; 0x118c <vfprintf+0x160>
    117e:	27 e0       	ldi	r18, 0x07	; 7
    1180:	17 e0       	ldi	r17, 0x07	; 7
    1182:	05 c0       	rjmp	.+10     	; 0x118e <vfprintf+0x162>
    1184:	27 e0       	ldi	r18, 0x07	; 7
    1186:	9c e3       	ldi	r25, 0x3C	; 60
    1188:	49 2e       	mov	r4, r25
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <vfprintf+0x164>
    118c:	21 2f       	mov	r18, r17
    118e:	41 2c       	mov	r4, r1
    1190:	56 01       	movw	r10, r12
    1192:	84 e0       	ldi	r24, 0x04	; 4
    1194:	a8 0e       	add	r10, r24
    1196:	b1 1c       	adc	r11, r1
    1198:	f6 01       	movw	r30, r12
    119a:	60 81       	ld	r22, Z
    119c:	71 81       	ldd	r23, Z+1	; 0x01
    119e:	82 81       	ldd	r24, Z+2	; 0x02
    11a0:	93 81       	ldd	r25, Z+3	; 0x03
    11a2:	04 2d       	mov	r16, r4
    11a4:	a3 01       	movw	r20, r6
    11a6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__ftoa_engine>
    11aa:	6c 01       	movw	r12, r24
    11ac:	f9 81       	ldd	r31, Y+1	; 0x01
    11ae:	fc 87       	std	Y+12, r31	; 0x0c
    11b0:	f0 ff       	sbrs	r31, 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <vfprintf+0x18c>
    11b4:	f3 ff       	sbrs	r31, 3
    11b6:	06 c0       	rjmp	.+12     	; 0x11c4 <vfprintf+0x198>
    11b8:	91 fc       	sbrc	r9, 1
    11ba:	06 c0       	rjmp	.+12     	; 0x11c8 <vfprintf+0x19c>
    11bc:	92 fe       	sbrs	r9, 2
    11be:	06 c0       	rjmp	.+12     	; 0x11cc <vfprintf+0x1a0>
    11c0:	00 e2       	ldi	r16, 0x20	; 32
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <vfprintf+0x1a2>
    11c4:	0d e2       	ldi	r16, 0x2D	; 45
    11c6:	03 c0       	rjmp	.+6      	; 0x11ce <vfprintf+0x1a2>
    11c8:	0b e2       	ldi	r16, 0x2B	; 43
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <vfprintf+0x1a2>
    11cc:	00 e0       	ldi	r16, 0x00	; 0
    11ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    11d0:	8c 70       	andi	r24, 0x0C	; 12
    11d2:	19 f0       	breq	.+6      	; 0x11da <vfprintf+0x1ae>
    11d4:	01 11       	cpse	r16, r1
    11d6:	5a c2       	rjmp	.+1204   	; 0x168c <vfprintf+0x660>
    11d8:	9b c2       	rjmp	.+1334   	; 0x1710 <vfprintf+0x6e4>
    11da:	97 fe       	sbrs	r9, 7
    11dc:	10 c0       	rjmp	.+32     	; 0x11fe <vfprintf+0x1d2>
    11de:	4c 0c       	add	r4, r12
    11e0:	fc 85       	ldd	r31, Y+12	; 0x0c
    11e2:	f4 ff       	sbrs	r31, 4
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <vfprintf+0x1c2>
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	81 33       	cpi	r24, 0x31	; 49
    11ea:	09 f4       	brne	.+2      	; 0x11ee <vfprintf+0x1c2>
    11ec:	4a 94       	dec	r4
    11ee:	14 14       	cp	r1, r4
    11f0:	74 f5       	brge	.+92     	; 0x124e <vfprintf+0x222>
    11f2:	28 e0       	ldi	r18, 0x08	; 8
    11f4:	24 15       	cp	r18, r4
    11f6:	78 f5       	brcc	.+94     	; 0x1256 <vfprintf+0x22a>
    11f8:	88 e0       	ldi	r24, 0x08	; 8
    11fa:	48 2e       	mov	r4, r24
    11fc:	2c c0       	rjmp	.+88     	; 0x1256 <vfprintf+0x22a>
    11fe:	96 fc       	sbrc	r9, 6
    1200:	2a c0       	rjmp	.+84     	; 0x1256 <vfprintf+0x22a>
    1202:	81 2f       	mov	r24, r17
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	8c 15       	cp	r24, r12
    1208:	9d 05       	cpc	r25, r13
    120a:	9c f0       	brlt	.+38     	; 0x1232 <vfprintf+0x206>
    120c:	3c ef       	ldi	r19, 0xFC	; 252
    120e:	c3 16       	cp	r12, r19
    1210:	3f ef       	ldi	r19, 0xFF	; 255
    1212:	d3 06       	cpc	r13, r19
    1214:	74 f0       	brlt	.+28     	; 0x1232 <vfprintf+0x206>
    1216:	89 2d       	mov	r24, r9
    1218:	80 68       	ori	r24, 0x80	; 128
    121a:	98 2e       	mov	r9, r24
    121c:	0a c0       	rjmp	.+20     	; 0x1232 <vfprintf+0x206>
    121e:	e2 e0       	ldi	r30, 0x02	; 2
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	ec 0f       	add	r30, r28
    1224:	fd 1f       	adc	r31, r29
    1226:	e1 0f       	add	r30, r17
    1228:	f1 1d       	adc	r31, r1
    122a:	80 81       	ld	r24, Z
    122c:	80 33       	cpi	r24, 0x30	; 48
    122e:	19 f4       	brne	.+6      	; 0x1236 <vfprintf+0x20a>
    1230:	11 50       	subi	r17, 0x01	; 1
    1232:	11 11       	cpse	r17, r1
    1234:	f4 cf       	rjmp	.-24     	; 0x121e <vfprintf+0x1f2>
    1236:	97 fe       	sbrs	r9, 7
    1238:	0e c0       	rjmp	.+28     	; 0x1256 <vfprintf+0x22a>
    123a:	44 24       	eor	r4, r4
    123c:	43 94       	inc	r4
    123e:	41 0e       	add	r4, r17
    1240:	81 2f       	mov	r24, r17
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	c8 16       	cp	r12, r24
    1246:	d9 06       	cpc	r13, r25
    1248:	2c f4       	brge	.+10     	; 0x1254 <vfprintf+0x228>
    124a:	1c 19       	sub	r17, r12
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <vfprintf+0x22a>
    124e:	44 24       	eor	r4, r4
    1250:	43 94       	inc	r4
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <vfprintf+0x22a>
    1254:	10 e0       	ldi	r17, 0x00	; 0
    1256:	97 fe       	sbrs	r9, 7
    1258:	06 c0       	rjmp	.+12     	; 0x1266 <vfprintf+0x23a>
    125a:	1c 14       	cp	r1, r12
    125c:	1d 04       	cpc	r1, r13
    125e:	34 f4       	brge	.+12     	; 0x126c <vfprintf+0x240>
    1260:	c6 01       	movw	r24, r12
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <vfprintf+0x244>
    1266:	85 e0       	ldi	r24, 0x05	; 5
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <vfprintf+0x244>
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	01 11       	cpse	r16, r1
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	11 23       	and	r17, r17
    1276:	31 f0       	breq	.+12     	; 0x1284 <vfprintf+0x258>
    1278:	21 2f       	mov	r18, r17
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	2f 5f       	subi	r18, 0xFF	; 255
    127e:	3f 4f       	sbci	r19, 0xFF	; 255
    1280:	82 0f       	add	r24, r18
    1282:	93 1f       	adc	r25, r19
    1284:	25 2d       	mov	r18, r5
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	82 17       	cp	r24, r18
    128a:	93 07       	cpc	r25, r19
    128c:	14 f4       	brge	.+4      	; 0x1292 <vfprintf+0x266>
    128e:	58 1a       	sub	r5, r24
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <vfprintf+0x268>
    1292:	51 2c       	mov	r5, r1
    1294:	89 2d       	mov	r24, r9
    1296:	89 70       	andi	r24, 0x09	; 9
    1298:	49 f4       	brne	.+18     	; 0x12ac <vfprintf+0x280>
    129a:	55 20       	and	r5, r5
    129c:	39 f0       	breq	.+14     	; 0x12ac <vfprintf+0x280>
    129e:	b7 01       	movw	r22, r14
    12a0:	80 e2       	ldi	r24, 0x20	; 32
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    12a8:	5a 94       	dec	r5
    12aa:	f7 cf       	rjmp	.-18     	; 0x129a <vfprintf+0x26e>
    12ac:	00 23       	and	r16, r16
    12ae:	29 f0       	breq	.+10     	; 0x12ba <vfprintf+0x28e>
    12b0:	b7 01       	movw	r22, r14
    12b2:	80 2f       	mov	r24, r16
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    12ba:	93 fc       	sbrc	r9, 3
    12bc:	09 c0       	rjmp	.+18     	; 0x12d0 <vfprintf+0x2a4>
    12be:	55 20       	and	r5, r5
    12c0:	39 f0       	breq	.+14     	; 0x12d0 <vfprintf+0x2a4>
    12c2:	b7 01       	movw	r22, r14
    12c4:	80 e3       	ldi	r24, 0x30	; 48
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    12cc:	5a 94       	dec	r5
    12ce:	f7 cf       	rjmp	.-18     	; 0x12be <vfprintf+0x292>
    12d0:	97 fe       	sbrs	r9, 7
    12d2:	4c c0       	rjmp	.+152    	; 0x136c <vfprintf+0x340>
    12d4:	46 01       	movw	r8, r12
    12d6:	d7 fe       	sbrs	r13, 7
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <vfprintf+0x2b2>
    12da:	81 2c       	mov	r8, r1
    12dc:	91 2c       	mov	r9, r1
    12de:	c6 01       	movw	r24, r12
    12e0:	88 19       	sub	r24, r8
    12e2:	99 09       	sbc	r25, r9
    12e4:	f3 01       	movw	r30, r6
    12e6:	e8 0f       	add	r30, r24
    12e8:	f9 1f       	adc	r31, r25
    12ea:	fe 87       	std	Y+14, r31	; 0x0e
    12ec:	ed 87       	std	Y+13, r30	; 0x0d
    12ee:	96 01       	movw	r18, r12
    12f0:	24 19       	sub	r18, r4
    12f2:	31 09       	sbc	r19, r1
    12f4:	38 8b       	std	Y+16, r19	; 0x10
    12f6:	2f 87       	std	Y+15, r18	; 0x0f
    12f8:	01 2f       	mov	r16, r17
    12fa:	10 e0       	ldi	r17, 0x00	; 0
    12fc:	11 95       	neg	r17
    12fe:	01 95       	neg	r16
    1300:	11 09       	sbc	r17, r1
    1302:	3f ef       	ldi	r19, 0xFF	; 255
    1304:	83 16       	cp	r8, r19
    1306:	93 06       	cpc	r9, r19
    1308:	29 f4       	brne	.+10     	; 0x1314 <vfprintf+0x2e8>
    130a:	b7 01       	movw	r22, r14
    130c:	8e e2       	ldi	r24, 0x2E	; 46
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    1314:	c8 14       	cp	r12, r8
    1316:	d9 04       	cpc	r13, r9
    1318:	4c f0       	brlt	.+18     	; 0x132c <vfprintf+0x300>
    131a:	8f 85       	ldd	r24, Y+15	; 0x0f
    131c:	98 89       	ldd	r25, Y+16	; 0x10
    131e:	88 15       	cp	r24, r8
    1320:	99 05       	cpc	r25, r9
    1322:	24 f4       	brge	.+8      	; 0x132c <vfprintf+0x300>
    1324:	ed 85       	ldd	r30, Y+13	; 0x0d
    1326:	fe 85       	ldd	r31, Y+14	; 0x0e
    1328:	81 81       	ldd	r24, Z+1	; 0x01
    132a:	01 c0       	rjmp	.+2      	; 0x132e <vfprintf+0x302>
    132c:	80 e3       	ldi	r24, 0x30	; 48
    132e:	f1 e0       	ldi	r31, 0x01	; 1
    1330:	8f 1a       	sub	r8, r31
    1332:	91 08       	sbc	r9, r1
    1334:	2d 85       	ldd	r18, Y+13	; 0x0d
    1336:	3e 85       	ldd	r19, Y+14	; 0x0e
    1338:	2f 5f       	subi	r18, 0xFF	; 255
    133a:	3f 4f       	sbci	r19, 0xFF	; 255
    133c:	3e 87       	std	Y+14, r19	; 0x0e
    133e:	2d 87       	std	Y+13, r18	; 0x0d
    1340:	80 16       	cp	r8, r16
    1342:	91 06       	cpc	r9, r17
    1344:	2c f0       	brlt	.+10     	; 0x1350 <vfprintf+0x324>
    1346:	b7 01       	movw	r22, r14
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    134e:	d9 cf       	rjmp	.-78     	; 0x1302 <vfprintf+0x2d6>
    1350:	c8 14       	cp	r12, r8
    1352:	d9 04       	cpc	r13, r9
    1354:	41 f4       	brne	.+16     	; 0x1366 <vfprintf+0x33a>
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	96 33       	cpi	r25, 0x36	; 54
    135a:	20 f4       	brcc	.+8      	; 0x1364 <vfprintf+0x338>
    135c:	95 33       	cpi	r25, 0x35	; 53
    135e:	19 f4       	brne	.+6      	; 0x1366 <vfprintf+0x33a>
    1360:	3c 85       	ldd	r19, Y+12	; 0x0c
    1362:	34 ff       	sbrs	r19, 4
    1364:	81 e3       	ldi	r24, 0x31	; 49
    1366:	b7 01       	movw	r22, r14
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	4e c0       	rjmp	.+156    	; 0x1408 <vfprintf+0x3dc>
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	81 33       	cpi	r24, 0x31	; 49
    1370:	19 f0       	breq	.+6      	; 0x1378 <vfprintf+0x34c>
    1372:	9c 85       	ldd	r25, Y+12	; 0x0c
    1374:	9f 7e       	andi	r25, 0xEF	; 239
    1376:	9c 87       	std	Y+12, r25	; 0x0c
    1378:	b7 01       	movw	r22, r14
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    1380:	11 11       	cpse	r17, r1
    1382:	05 c0       	rjmp	.+10     	; 0x138e <vfprintf+0x362>
    1384:	94 fc       	sbrc	r9, 4
    1386:	18 c0       	rjmp	.+48     	; 0x13b8 <vfprintf+0x38c>
    1388:	85 e6       	ldi	r24, 0x65	; 101
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	17 c0       	rjmp	.+46     	; 0x13bc <vfprintf+0x390>
    138e:	b7 01       	movw	r22, r14
    1390:	8e e2       	ldi	r24, 0x2E	; 46
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    1398:	1e 5f       	subi	r17, 0xFE	; 254
    139a:	82 e0       	ldi	r24, 0x02	; 2
    139c:	01 e0       	ldi	r16, 0x01	; 1
    139e:	08 0f       	add	r16, r24
    13a0:	f3 01       	movw	r30, r6
    13a2:	e8 0f       	add	r30, r24
    13a4:	f1 1d       	adc	r31, r1
    13a6:	80 81       	ld	r24, Z
    13a8:	b7 01       	movw	r22, r14
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    13b0:	80 2f       	mov	r24, r16
    13b2:	01 13       	cpse	r16, r17
    13b4:	f3 cf       	rjmp	.-26     	; 0x139c <vfprintf+0x370>
    13b6:	e6 cf       	rjmp	.-52     	; 0x1384 <vfprintf+0x358>
    13b8:	85 e4       	ldi	r24, 0x45	; 69
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	b7 01       	movw	r22, r14
    13be:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    13c2:	d7 fc       	sbrc	r13, 7
    13c4:	06 c0       	rjmp	.+12     	; 0x13d2 <vfprintf+0x3a6>
    13c6:	c1 14       	cp	r12, r1
    13c8:	d1 04       	cpc	r13, r1
    13ca:	41 f4       	brne	.+16     	; 0x13dc <vfprintf+0x3b0>
    13cc:	ec 85       	ldd	r30, Y+12	; 0x0c
    13ce:	e4 ff       	sbrs	r30, 4
    13d0:	05 c0       	rjmp	.+10     	; 0x13dc <vfprintf+0x3b0>
    13d2:	d1 94       	neg	r13
    13d4:	c1 94       	neg	r12
    13d6:	d1 08       	sbc	r13, r1
    13d8:	8d e2       	ldi	r24, 0x2D	; 45
    13da:	01 c0       	rjmp	.+2      	; 0x13de <vfprintf+0x3b2>
    13dc:	8b e2       	ldi	r24, 0x2B	; 43
    13de:	b7 01       	movw	r22, r14
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    13e6:	80 e3       	ldi	r24, 0x30	; 48
    13e8:	2a e0       	ldi	r18, 0x0A	; 10
    13ea:	c2 16       	cp	r12, r18
    13ec:	d1 04       	cpc	r13, r1
    13ee:	2c f0       	brlt	.+10     	; 0x13fa <vfprintf+0x3ce>
    13f0:	8f 5f       	subi	r24, 0xFF	; 255
    13f2:	fa e0       	ldi	r31, 0x0A	; 10
    13f4:	cf 1a       	sub	r12, r31
    13f6:	d1 08       	sbc	r13, r1
    13f8:	f7 cf       	rjmp	.-18     	; 0x13e8 <vfprintf+0x3bc>
    13fa:	b7 01       	movw	r22, r14
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    1402:	b7 01       	movw	r22, r14
    1404:	c6 01       	movw	r24, r12
    1406:	c0 96       	adiw	r24, 0x30	; 48
    1408:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    140c:	54 c1       	rjmp	.+680    	; 0x16b6 <vfprintf+0x68a>
    140e:	83 36       	cpi	r24, 0x63	; 99
    1410:	31 f0       	breq	.+12     	; 0x141e <vfprintf+0x3f2>
    1412:	83 37       	cpi	r24, 0x73	; 115
    1414:	79 f0       	breq	.+30     	; 0x1434 <vfprintf+0x408>
    1416:	83 35       	cpi	r24, 0x53	; 83
    1418:	09 f0       	breq	.+2      	; 0x141c <vfprintf+0x3f0>
    141a:	56 c0       	rjmp	.+172    	; 0x14c8 <vfprintf+0x49c>
    141c:	20 c0       	rjmp	.+64     	; 0x145e <vfprintf+0x432>
    141e:	56 01       	movw	r10, r12
    1420:	32 e0       	ldi	r19, 0x02	; 2
    1422:	a3 0e       	add	r10, r19
    1424:	b1 1c       	adc	r11, r1
    1426:	f6 01       	movw	r30, r12
    1428:	80 81       	ld	r24, Z
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	01 e0       	ldi	r16, 0x01	; 1
    142e:	10 e0       	ldi	r17, 0x00	; 0
    1430:	63 01       	movw	r12, r6
    1432:	12 c0       	rjmp	.+36     	; 0x1458 <vfprintf+0x42c>
    1434:	56 01       	movw	r10, r12
    1436:	f2 e0       	ldi	r31, 0x02	; 2
    1438:	af 0e       	add	r10, r31
    143a:	b1 1c       	adc	r11, r1
    143c:	f6 01       	movw	r30, r12
    143e:	c0 80       	ld	r12, Z
    1440:	d1 80       	ldd	r13, Z+1	; 0x01
    1442:	96 fe       	sbrs	r9, 6
    1444:	03 c0       	rjmp	.+6      	; 0x144c <vfprintf+0x420>
    1446:	61 2f       	mov	r22, r17
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <vfprintf+0x424>
    144c:	6f ef       	ldi	r22, 0xFF	; 255
    144e:	7f ef       	ldi	r23, 0xFF	; 255
    1450:	c6 01       	movw	r24, r12
    1452:	0e 94 ad 0c 	call	0x195a	; 0x195a <strnlen>
    1456:	8c 01       	movw	r16, r24
    1458:	f9 2d       	mov	r31, r9
    145a:	ff 77       	andi	r31, 0x7F	; 127
    145c:	14 c0       	rjmp	.+40     	; 0x1486 <vfprintf+0x45a>
    145e:	56 01       	movw	r10, r12
    1460:	22 e0       	ldi	r18, 0x02	; 2
    1462:	a2 0e       	add	r10, r18
    1464:	b1 1c       	adc	r11, r1
    1466:	f6 01       	movw	r30, r12
    1468:	c0 80       	ld	r12, Z
    146a:	d1 80       	ldd	r13, Z+1	; 0x01
    146c:	96 fe       	sbrs	r9, 6
    146e:	03 c0       	rjmp	.+6      	; 0x1476 <vfprintf+0x44a>
    1470:	61 2f       	mov	r22, r17
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	02 c0       	rjmp	.+4      	; 0x147a <vfprintf+0x44e>
    1476:	6f ef       	ldi	r22, 0xFF	; 255
    1478:	7f ef       	ldi	r23, 0xFF	; 255
    147a:	c6 01       	movw	r24, r12
    147c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <strnlen_P>
    1480:	8c 01       	movw	r16, r24
    1482:	f9 2d       	mov	r31, r9
    1484:	f0 68       	ori	r31, 0x80	; 128
    1486:	9f 2e       	mov	r9, r31
    1488:	f3 fd       	sbrc	r31, 3
    148a:	1a c0       	rjmp	.+52     	; 0x14c0 <vfprintf+0x494>
    148c:	85 2d       	mov	r24, r5
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	08 17       	cp	r16, r24
    1492:	19 07       	cpc	r17, r25
    1494:	a8 f4       	brcc	.+42     	; 0x14c0 <vfprintf+0x494>
    1496:	b7 01       	movw	r22, r14
    1498:	80 e2       	ldi	r24, 0x20	; 32
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    14a0:	5a 94       	dec	r5
    14a2:	f4 cf       	rjmp	.-24     	; 0x148c <vfprintf+0x460>
    14a4:	f6 01       	movw	r30, r12
    14a6:	97 fc       	sbrc	r9, 7
    14a8:	85 91       	lpm	r24, Z+
    14aa:	97 fe       	sbrs	r9, 7
    14ac:	81 91       	ld	r24, Z+
    14ae:	6f 01       	movw	r12, r30
    14b0:	b7 01       	movw	r22, r14
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    14b8:	51 10       	cpse	r5, r1
    14ba:	5a 94       	dec	r5
    14bc:	01 50       	subi	r16, 0x01	; 1
    14be:	11 09       	sbc	r17, r1
    14c0:	01 15       	cp	r16, r1
    14c2:	11 05       	cpc	r17, r1
    14c4:	79 f7       	brne	.-34     	; 0x14a4 <vfprintf+0x478>
    14c6:	f7 c0       	rjmp	.+494    	; 0x16b6 <vfprintf+0x68a>
    14c8:	84 36       	cpi	r24, 0x64	; 100
    14ca:	11 f0       	breq	.+4      	; 0x14d0 <vfprintf+0x4a4>
    14cc:	89 36       	cpi	r24, 0x69	; 105
    14ce:	61 f5       	brne	.+88     	; 0x1528 <vfprintf+0x4fc>
    14d0:	56 01       	movw	r10, r12
    14d2:	97 fe       	sbrs	r9, 7
    14d4:	09 c0       	rjmp	.+18     	; 0x14e8 <vfprintf+0x4bc>
    14d6:	24 e0       	ldi	r18, 0x04	; 4
    14d8:	a2 0e       	add	r10, r18
    14da:	b1 1c       	adc	r11, r1
    14dc:	f6 01       	movw	r30, r12
    14de:	60 81       	ld	r22, Z
    14e0:	71 81       	ldd	r23, Z+1	; 0x01
    14e2:	82 81       	ldd	r24, Z+2	; 0x02
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	0a c0       	rjmp	.+20     	; 0x14fc <vfprintf+0x4d0>
    14e8:	f2 e0       	ldi	r31, 0x02	; 2
    14ea:	af 0e       	add	r10, r31
    14ec:	b1 1c       	adc	r11, r1
    14ee:	f6 01       	movw	r30, r12
    14f0:	60 81       	ld	r22, Z
    14f2:	71 81       	ldd	r23, Z+1	; 0x01
    14f4:	07 2e       	mov	r0, r23
    14f6:	00 0c       	add	r0, r0
    14f8:	88 0b       	sbc	r24, r24
    14fa:	99 0b       	sbc	r25, r25
    14fc:	f9 2d       	mov	r31, r9
    14fe:	ff 76       	andi	r31, 0x6F	; 111
    1500:	9f 2e       	mov	r9, r31
    1502:	97 ff       	sbrs	r25, 7
    1504:	09 c0       	rjmp	.+18     	; 0x1518 <vfprintf+0x4ec>
    1506:	90 95       	com	r25
    1508:	80 95       	com	r24
    150a:	70 95       	com	r23
    150c:	61 95       	neg	r22
    150e:	7f 4f       	sbci	r23, 0xFF	; 255
    1510:	8f 4f       	sbci	r24, 0xFF	; 255
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	f0 68       	ori	r31, 0x80	; 128
    1516:	9f 2e       	mov	r9, r31
    1518:	2a e0       	ldi	r18, 0x0A	; 10
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	a3 01       	movw	r20, r6
    151e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__ultoa_invert>
    1522:	c8 2e       	mov	r12, r24
    1524:	c6 18       	sub	r12, r6
    1526:	3f c0       	rjmp	.+126    	; 0x15a6 <vfprintf+0x57a>
    1528:	09 2d       	mov	r16, r9
    152a:	85 37       	cpi	r24, 0x75	; 117
    152c:	21 f4       	brne	.+8      	; 0x1536 <vfprintf+0x50a>
    152e:	0f 7e       	andi	r16, 0xEF	; 239
    1530:	2a e0       	ldi	r18, 0x0A	; 10
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	1d c0       	rjmp	.+58     	; 0x1570 <vfprintf+0x544>
    1536:	09 7f       	andi	r16, 0xF9	; 249
    1538:	8f 36       	cpi	r24, 0x6F	; 111
    153a:	91 f0       	breq	.+36     	; 0x1560 <vfprintf+0x534>
    153c:	18 f4       	brcc	.+6      	; 0x1544 <vfprintf+0x518>
    153e:	88 35       	cpi	r24, 0x58	; 88
    1540:	59 f0       	breq	.+22     	; 0x1558 <vfprintf+0x52c>
    1542:	c3 c0       	rjmp	.+390    	; 0x16ca <vfprintf+0x69e>
    1544:	80 37       	cpi	r24, 0x70	; 112
    1546:	19 f0       	breq	.+6      	; 0x154e <vfprintf+0x522>
    1548:	88 37       	cpi	r24, 0x78	; 120
    154a:	11 f0       	breq	.+4      	; 0x1550 <vfprintf+0x524>
    154c:	be c0       	rjmp	.+380    	; 0x16ca <vfprintf+0x69e>
    154e:	00 61       	ori	r16, 0x10	; 16
    1550:	04 ff       	sbrs	r16, 4
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <vfprintf+0x53a>
    1554:	04 60       	ori	r16, 0x04	; 4
    1556:	07 c0       	rjmp	.+14     	; 0x1566 <vfprintf+0x53a>
    1558:	94 fe       	sbrs	r9, 4
    155a:	08 c0       	rjmp	.+16     	; 0x156c <vfprintf+0x540>
    155c:	06 60       	ori	r16, 0x06	; 6
    155e:	06 c0       	rjmp	.+12     	; 0x156c <vfprintf+0x540>
    1560:	28 e0       	ldi	r18, 0x08	; 8
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <vfprintf+0x544>
    1566:	20 e1       	ldi	r18, 0x10	; 16
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <vfprintf+0x544>
    156c:	20 e1       	ldi	r18, 0x10	; 16
    156e:	32 e0       	ldi	r19, 0x02	; 2
    1570:	56 01       	movw	r10, r12
    1572:	07 ff       	sbrs	r16, 7
    1574:	09 c0       	rjmp	.+18     	; 0x1588 <vfprintf+0x55c>
    1576:	84 e0       	ldi	r24, 0x04	; 4
    1578:	a8 0e       	add	r10, r24
    157a:	b1 1c       	adc	r11, r1
    157c:	f6 01       	movw	r30, r12
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	93 81       	ldd	r25, Z+3	; 0x03
    1586:	08 c0       	rjmp	.+16     	; 0x1598 <vfprintf+0x56c>
    1588:	f2 e0       	ldi	r31, 0x02	; 2
    158a:	af 0e       	add	r10, r31
    158c:	b1 1c       	adc	r11, r1
    158e:	f6 01       	movw	r30, r12
    1590:	60 81       	ld	r22, Z
    1592:	71 81       	ldd	r23, Z+1	; 0x01
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a3 01       	movw	r20, r6
    159a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__ultoa_invert>
    159e:	c8 2e       	mov	r12, r24
    15a0:	c6 18       	sub	r12, r6
    15a2:	0f 77       	andi	r16, 0x7F	; 127
    15a4:	90 2e       	mov	r9, r16
    15a6:	96 fe       	sbrs	r9, 6
    15a8:	0b c0       	rjmp	.+22     	; 0x15c0 <vfprintf+0x594>
    15aa:	09 2d       	mov	r16, r9
    15ac:	0e 7f       	andi	r16, 0xFE	; 254
    15ae:	c1 16       	cp	r12, r17
    15b0:	50 f4       	brcc	.+20     	; 0x15c6 <vfprintf+0x59a>
    15b2:	94 fe       	sbrs	r9, 4
    15b4:	0a c0       	rjmp	.+20     	; 0x15ca <vfprintf+0x59e>
    15b6:	92 fc       	sbrc	r9, 2
    15b8:	08 c0       	rjmp	.+16     	; 0x15ca <vfprintf+0x59e>
    15ba:	09 2d       	mov	r16, r9
    15bc:	0e 7e       	andi	r16, 0xEE	; 238
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <vfprintf+0x59e>
    15c0:	dc 2c       	mov	r13, r12
    15c2:	09 2d       	mov	r16, r9
    15c4:	03 c0       	rjmp	.+6      	; 0x15cc <vfprintf+0x5a0>
    15c6:	dc 2c       	mov	r13, r12
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <vfprintf+0x5a0>
    15ca:	d1 2e       	mov	r13, r17
    15cc:	04 ff       	sbrs	r16, 4
    15ce:	0d c0       	rjmp	.+26     	; 0x15ea <vfprintf+0x5be>
    15d0:	fe 01       	movw	r30, r28
    15d2:	ec 0d       	add	r30, r12
    15d4:	f1 1d       	adc	r31, r1
    15d6:	80 81       	ld	r24, Z
    15d8:	80 33       	cpi	r24, 0x30	; 48
    15da:	11 f4       	brne	.+4      	; 0x15e0 <vfprintf+0x5b4>
    15dc:	09 7e       	andi	r16, 0xE9	; 233
    15de:	09 c0       	rjmp	.+18     	; 0x15f2 <vfprintf+0x5c6>
    15e0:	02 ff       	sbrs	r16, 2
    15e2:	06 c0       	rjmp	.+12     	; 0x15f0 <vfprintf+0x5c4>
    15e4:	d3 94       	inc	r13
    15e6:	d3 94       	inc	r13
    15e8:	04 c0       	rjmp	.+8      	; 0x15f2 <vfprintf+0x5c6>
    15ea:	80 2f       	mov	r24, r16
    15ec:	86 78       	andi	r24, 0x86	; 134
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <vfprintf+0x5c6>
    15f0:	d3 94       	inc	r13
    15f2:	03 fd       	sbrc	r16, 3
    15f4:	11 c0       	rjmp	.+34     	; 0x1618 <vfprintf+0x5ec>
    15f6:	00 ff       	sbrs	r16, 0
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <vfprintf+0x5da>
    15fa:	1c 2d       	mov	r17, r12
    15fc:	d5 14       	cp	r13, r5
    15fe:	80 f4       	brcc	.+32     	; 0x1620 <vfprintf+0x5f4>
    1600:	15 0d       	add	r17, r5
    1602:	1d 19       	sub	r17, r13
    1604:	0d c0       	rjmp	.+26     	; 0x1620 <vfprintf+0x5f4>
    1606:	d5 14       	cp	r13, r5
    1608:	58 f4       	brcc	.+22     	; 0x1620 <vfprintf+0x5f4>
    160a:	b7 01       	movw	r22, r14
    160c:	80 e2       	ldi	r24, 0x20	; 32
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    1614:	d3 94       	inc	r13
    1616:	f7 cf       	rjmp	.-18     	; 0x1606 <vfprintf+0x5da>
    1618:	d5 14       	cp	r13, r5
    161a:	10 f4       	brcc	.+4      	; 0x1620 <vfprintf+0x5f4>
    161c:	5d 18       	sub	r5, r13
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <vfprintf+0x5f6>
    1620:	51 2c       	mov	r5, r1
    1622:	04 ff       	sbrs	r16, 4
    1624:	10 c0       	rjmp	.+32     	; 0x1646 <vfprintf+0x61a>
    1626:	b7 01       	movw	r22, r14
    1628:	80 e3       	ldi	r24, 0x30	; 48
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    1630:	02 ff       	sbrs	r16, 2
    1632:	17 c0       	rjmp	.+46     	; 0x1662 <vfprintf+0x636>
    1634:	01 fd       	sbrc	r16, 1
    1636:	03 c0       	rjmp	.+6      	; 0x163e <vfprintf+0x612>
    1638:	88 e7       	ldi	r24, 0x78	; 120
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <vfprintf+0x616>
    163e:	88 e5       	ldi	r24, 0x58	; 88
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	b7 01       	movw	r22, r14
    1644:	0c c0       	rjmp	.+24     	; 0x165e <vfprintf+0x632>
    1646:	80 2f       	mov	r24, r16
    1648:	86 78       	andi	r24, 0x86	; 134
    164a:	59 f0       	breq	.+22     	; 0x1662 <vfprintf+0x636>
    164c:	01 ff       	sbrs	r16, 1
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <vfprintf+0x628>
    1650:	8b e2       	ldi	r24, 0x2B	; 43
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <vfprintf+0x62a>
    1654:	80 e2       	ldi	r24, 0x20	; 32
    1656:	07 fd       	sbrc	r16, 7
    1658:	8d e2       	ldi	r24, 0x2D	; 45
    165a:	b7 01       	movw	r22, r14
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    1662:	c1 16       	cp	r12, r17
    1664:	38 f4       	brcc	.+14     	; 0x1674 <vfprintf+0x648>
    1666:	b7 01       	movw	r22, r14
    1668:	80 e3       	ldi	r24, 0x30	; 48
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    1670:	11 50       	subi	r17, 0x01	; 1
    1672:	f7 cf       	rjmp	.-18     	; 0x1662 <vfprintf+0x636>
    1674:	ca 94       	dec	r12
    1676:	f3 01       	movw	r30, r6
    1678:	ec 0d       	add	r30, r12
    167a:	f1 1d       	adc	r31, r1
    167c:	80 81       	ld	r24, Z
    167e:	b7 01       	movw	r22, r14
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    1686:	c1 10       	cpse	r12, r1
    1688:	f5 cf       	rjmp	.-22     	; 0x1674 <vfprintf+0x648>
    168a:	15 c0       	rjmp	.+42     	; 0x16b6 <vfprintf+0x68a>
    168c:	f4 e0       	ldi	r31, 0x04	; 4
    168e:	f5 15       	cp	r31, r5
    1690:	60 f5       	brcc	.+88     	; 0x16ea <vfprintf+0x6be>
    1692:	84 e0       	ldi	r24, 0x04	; 4
    1694:	58 1a       	sub	r5, r24
    1696:	93 fe       	sbrs	r9, 3
    1698:	1f c0       	rjmp	.+62     	; 0x16d8 <vfprintf+0x6ac>
    169a:	01 11       	cpse	r16, r1
    169c:	27 c0       	rjmp	.+78     	; 0x16ec <vfprintf+0x6c0>
    169e:	2c 85       	ldd	r18, Y+12	; 0x0c
    16a0:	23 ff       	sbrs	r18, 3
    16a2:	2a c0       	rjmp	.+84     	; 0x16f8 <vfprintf+0x6cc>
    16a4:	08 e6       	ldi	r16, 0x68	; 104
    16a6:	10 e0       	ldi	r17, 0x00	; 0
    16a8:	39 2d       	mov	r19, r9
    16aa:	30 71       	andi	r19, 0x10	; 16
    16ac:	93 2e       	mov	r9, r19
    16ae:	f8 01       	movw	r30, r16
    16b0:	84 91       	lpm	r24, Z
    16b2:	81 11       	cpse	r24, r1
    16b4:	24 c0       	rjmp	.+72     	; 0x16fe <vfprintf+0x6d2>
    16b6:	55 20       	and	r5, r5
    16b8:	09 f4       	brne	.+2      	; 0x16bc <vfprintf+0x690>
    16ba:	e4 cc       	rjmp	.-1592   	; 0x1084 <vfprintf+0x58>
    16bc:	b7 01       	movw	r22, r14
    16be:	80 e2       	ldi	r24, 0x20	; 32
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    16c6:	5a 94       	dec	r5
    16c8:	f6 cf       	rjmp	.-20     	; 0x16b6 <vfprintf+0x68a>
    16ca:	f7 01       	movw	r30, r14
    16cc:	86 81       	ldd	r24, Z+6	; 0x06
    16ce:	97 81       	ldd	r25, Z+7	; 0x07
    16d0:	26 c0       	rjmp	.+76     	; 0x171e <vfprintf+0x6f2>
    16d2:	8f ef       	ldi	r24, 0xFF	; 255
    16d4:	9f ef       	ldi	r25, 0xFF	; 255
    16d6:	23 c0       	rjmp	.+70     	; 0x171e <vfprintf+0x6f2>
    16d8:	b7 01       	movw	r22, r14
    16da:	80 e2       	ldi	r24, 0x20	; 32
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    16e2:	5a 94       	dec	r5
    16e4:	51 10       	cpse	r5, r1
    16e6:	f8 cf       	rjmp	.-16     	; 0x16d8 <vfprintf+0x6ac>
    16e8:	d8 cf       	rjmp	.-80     	; 0x169a <vfprintf+0x66e>
    16ea:	51 2c       	mov	r5, r1
    16ec:	b7 01       	movw	r22, r14
    16ee:	80 2f       	mov	r24, r16
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    16f6:	d3 cf       	rjmp	.-90     	; 0x169e <vfprintf+0x672>
    16f8:	0c e6       	ldi	r16, 0x6C	; 108
    16fa:	10 e0       	ldi	r17, 0x00	; 0
    16fc:	d5 cf       	rjmp	.-86     	; 0x16a8 <vfprintf+0x67c>
    16fe:	91 10       	cpse	r9, r1
    1700:	80 52       	subi	r24, 0x20	; 32
    1702:	b7 01       	movw	r22, r14
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    170a:	0f 5f       	subi	r16, 0xFF	; 255
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	cf cf       	rjmp	.-98     	; 0x16ae <vfprintf+0x682>
    1710:	23 e0       	ldi	r18, 0x03	; 3
    1712:	25 15       	cp	r18, r5
    1714:	10 f4       	brcc	.+4      	; 0x171a <vfprintf+0x6ee>
    1716:	83 e0       	ldi	r24, 0x03	; 3
    1718:	bd cf       	rjmp	.-134    	; 0x1694 <vfprintf+0x668>
    171a:	51 2c       	mov	r5, r1
    171c:	c0 cf       	rjmp	.-128    	; 0x169e <vfprintf+0x672>
    171e:	60 96       	adiw	r28, 0x10	; 16
    1720:	e2 e1       	ldi	r30, 0x12	; 18
    1722:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__epilogue_restores__>

00001726 <__prologue_saves__>:
    1726:	2f 92       	push	r2
    1728:	3f 92       	push	r3
    172a:	4f 92       	push	r4
    172c:	5f 92       	push	r5
    172e:	6f 92       	push	r6
    1730:	7f 92       	push	r7
    1732:	8f 92       	push	r8
    1734:	9f 92       	push	r9
    1736:	af 92       	push	r10
    1738:	bf 92       	push	r11
    173a:	cf 92       	push	r12
    173c:	df 92       	push	r13
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	ca 1b       	sub	r28, r26
    1750:	db 0b       	sbc	r29, r27
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	09 94       	ijmp

0000175e <__epilogue_restores__>:
    175e:	2a 88       	ldd	r2, Y+18	; 0x12
    1760:	39 88       	ldd	r3, Y+17	; 0x11
    1762:	48 88       	ldd	r4, Y+16	; 0x10
    1764:	5f 84       	ldd	r5, Y+15	; 0x0f
    1766:	6e 84       	ldd	r6, Y+14	; 0x0e
    1768:	7d 84       	ldd	r7, Y+13	; 0x0d
    176a:	8c 84       	ldd	r8, Y+12	; 0x0c
    176c:	9b 84       	ldd	r9, Y+11	; 0x0b
    176e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1770:	b9 84       	ldd	r11, Y+9	; 0x09
    1772:	c8 84       	ldd	r12, Y+8	; 0x08
    1774:	df 80       	ldd	r13, Y+7	; 0x07
    1776:	ee 80       	ldd	r14, Y+6	; 0x06
    1778:	fd 80       	ldd	r15, Y+5	; 0x05
    177a:	0c 81       	ldd	r16, Y+4	; 0x04
    177c:	1b 81       	ldd	r17, Y+3	; 0x03
    177e:	aa 81       	ldd	r26, Y+2	; 0x02
    1780:	b9 81       	ldd	r27, Y+1	; 0x01
    1782:	ce 0f       	add	r28, r30
    1784:	d1 1d       	adc	r29, r1
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	ed 01       	movw	r28, r26
    1792:	08 95       	ret

00001794 <__ftoa_engine>:
    1794:	28 30       	cpi	r18, 0x08	; 8
    1796:	08 f0       	brcs	.+2      	; 0x179a <__ftoa_engine+0x6>
    1798:	27 e0       	ldi	r18, 0x07	; 7
    179a:	33 27       	eor	r19, r19
    179c:	da 01       	movw	r26, r20
    179e:	99 0f       	add	r25, r25
    17a0:	31 1d       	adc	r19, r1
    17a2:	87 fd       	sbrc	r24, 7
    17a4:	91 60       	ori	r25, 0x01	; 1
    17a6:	00 96       	adiw	r24, 0x00	; 0
    17a8:	61 05       	cpc	r22, r1
    17aa:	71 05       	cpc	r23, r1
    17ac:	39 f4       	brne	.+14     	; 0x17bc <__ftoa_engine+0x28>
    17ae:	32 60       	ori	r19, 0x02	; 2
    17b0:	2e 5f       	subi	r18, 0xFE	; 254
    17b2:	3d 93       	st	X+, r19
    17b4:	30 e3       	ldi	r19, 0x30	; 48
    17b6:	2a 95       	dec	r18
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <__ftoa_engine+0x1e>
    17ba:	08 95       	ret
    17bc:	9f 3f       	cpi	r25, 0xFF	; 255
    17be:	30 f0       	brcs	.+12     	; 0x17cc <__ftoa_engine+0x38>
    17c0:	80 38       	cpi	r24, 0x80	; 128
    17c2:	71 05       	cpc	r23, r1
    17c4:	61 05       	cpc	r22, r1
    17c6:	09 f0       	breq	.+2      	; 0x17ca <__ftoa_engine+0x36>
    17c8:	3c 5f       	subi	r19, 0xFC	; 252
    17ca:	3c 5f       	subi	r19, 0xFC	; 252
    17cc:	3d 93       	st	X+, r19
    17ce:	91 30       	cpi	r25, 0x01	; 1
    17d0:	08 f0       	brcs	.+2      	; 0x17d4 <__ftoa_engine+0x40>
    17d2:	80 68       	ori	r24, 0x80	; 128
    17d4:	91 1d       	adc	r25, r1
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	1f 93       	push	r17
    17dc:	0f 93       	push	r16
    17de:	ff 92       	push	r15
    17e0:	ef 92       	push	r14
    17e2:	19 2f       	mov	r17, r25
    17e4:	98 7f       	andi	r25, 0xF8	; 248
    17e6:	96 95       	lsr	r25
    17e8:	e9 2f       	mov	r30, r25
    17ea:	96 95       	lsr	r25
    17ec:	96 95       	lsr	r25
    17ee:	e9 0f       	add	r30, r25
    17f0:	ff 27       	eor	r31, r31
    17f2:	e6 53       	subi	r30, 0x36	; 54
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	99 27       	eor	r25, r25
    17f8:	33 27       	eor	r19, r19
    17fa:	ee 24       	eor	r14, r14
    17fc:	ff 24       	eor	r15, r15
    17fe:	a7 01       	movw	r20, r14
    1800:	e7 01       	movw	r28, r14
    1802:	05 90       	lpm	r0, Z+
    1804:	08 94       	sec
    1806:	07 94       	ror	r0
    1808:	28 f4       	brcc	.+10     	; 0x1814 <__ftoa_engine+0x80>
    180a:	36 0f       	add	r19, r22
    180c:	e7 1e       	adc	r14, r23
    180e:	f8 1e       	adc	r15, r24
    1810:	49 1f       	adc	r20, r25
    1812:	51 1d       	adc	r21, r1
    1814:	66 0f       	add	r22, r22
    1816:	77 1f       	adc	r23, r23
    1818:	88 1f       	adc	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	06 94       	lsr	r0
    181e:	a1 f7       	brne	.-24     	; 0x1808 <__ftoa_engine+0x74>
    1820:	05 90       	lpm	r0, Z+
    1822:	07 94       	ror	r0
    1824:	28 f4       	brcc	.+10     	; 0x1830 <__ftoa_engine+0x9c>
    1826:	e7 0e       	add	r14, r23
    1828:	f8 1e       	adc	r15, r24
    182a:	49 1f       	adc	r20, r25
    182c:	56 1f       	adc	r21, r22
    182e:	c1 1d       	adc	r28, r1
    1830:	77 0f       	add	r23, r23
    1832:	88 1f       	adc	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	66 1f       	adc	r22, r22
    1838:	06 94       	lsr	r0
    183a:	a1 f7       	brne	.-24     	; 0x1824 <__ftoa_engine+0x90>
    183c:	05 90       	lpm	r0, Z+
    183e:	07 94       	ror	r0
    1840:	28 f4       	brcc	.+10     	; 0x184c <__ftoa_engine+0xb8>
    1842:	f8 0e       	add	r15, r24
    1844:	49 1f       	adc	r20, r25
    1846:	56 1f       	adc	r21, r22
    1848:	c7 1f       	adc	r28, r23
    184a:	d1 1d       	adc	r29, r1
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	66 1f       	adc	r22, r22
    1852:	77 1f       	adc	r23, r23
    1854:	06 94       	lsr	r0
    1856:	a1 f7       	brne	.-24     	; 0x1840 <__ftoa_engine+0xac>
    1858:	05 90       	lpm	r0, Z+
    185a:	07 94       	ror	r0
    185c:	20 f4       	brcc	.+8      	; 0x1866 <__ftoa_engine+0xd2>
    185e:	49 0f       	add	r20, r25
    1860:	56 1f       	adc	r21, r22
    1862:	c7 1f       	adc	r28, r23
    1864:	d8 1f       	adc	r29, r24
    1866:	99 0f       	add	r25, r25
    1868:	66 1f       	adc	r22, r22
    186a:	77 1f       	adc	r23, r23
    186c:	88 1f       	adc	r24, r24
    186e:	06 94       	lsr	r0
    1870:	a9 f7       	brne	.-22     	; 0x185c <__ftoa_engine+0xc8>
    1872:	84 91       	lpm	r24, Z
    1874:	10 95       	com	r17
    1876:	17 70       	andi	r17, 0x07	; 7
    1878:	41 f0       	breq	.+16     	; 0x188a <__ftoa_engine+0xf6>
    187a:	d6 95       	lsr	r29
    187c:	c7 95       	ror	r28
    187e:	57 95       	ror	r21
    1880:	47 95       	ror	r20
    1882:	f7 94       	ror	r15
    1884:	e7 94       	ror	r14
    1886:	1a 95       	dec	r17
    1888:	c1 f7       	brne	.-16     	; 0x187a <__ftoa_engine+0xe6>
    188a:	e0 e7       	ldi	r30, 0x70	; 112
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	68 94       	set
    1890:	15 90       	lpm	r1, Z+
    1892:	15 91       	lpm	r17, Z+
    1894:	35 91       	lpm	r19, Z+
    1896:	65 91       	lpm	r22, Z+
    1898:	95 91       	lpm	r25, Z+
    189a:	05 90       	lpm	r0, Z+
    189c:	7f e2       	ldi	r23, 0x2F	; 47
    189e:	73 95       	inc	r23
    18a0:	e1 18       	sub	r14, r1
    18a2:	f1 0a       	sbc	r15, r17
    18a4:	43 0b       	sbc	r20, r19
    18a6:	56 0b       	sbc	r21, r22
    18a8:	c9 0b       	sbc	r28, r25
    18aa:	d0 09       	sbc	r29, r0
    18ac:	c0 f7       	brcc	.-16     	; 0x189e <__ftoa_engine+0x10a>
    18ae:	e1 0c       	add	r14, r1
    18b0:	f1 1e       	adc	r15, r17
    18b2:	43 1f       	adc	r20, r19
    18b4:	56 1f       	adc	r21, r22
    18b6:	c9 1f       	adc	r28, r25
    18b8:	d0 1d       	adc	r29, r0
    18ba:	7e f4       	brtc	.+30     	; 0x18da <__ftoa_engine+0x146>
    18bc:	70 33       	cpi	r23, 0x30	; 48
    18be:	11 f4       	brne	.+4      	; 0x18c4 <__ftoa_engine+0x130>
    18c0:	8a 95       	dec	r24
    18c2:	e6 cf       	rjmp	.-52     	; 0x1890 <__ftoa_engine+0xfc>
    18c4:	e8 94       	clt
    18c6:	01 50       	subi	r16, 0x01	; 1
    18c8:	30 f0       	brcs	.+12     	; 0x18d6 <__ftoa_engine+0x142>
    18ca:	08 0f       	add	r16, r24
    18cc:	0a f4       	brpl	.+2      	; 0x18d0 <__ftoa_engine+0x13c>
    18ce:	00 27       	eor	r16, r16
    18d0:	02 17       	cp	r16, r18
    18d2:	08 f4       	brcc	.+2      	; 0x18d6 <__ftoa_engine+0x142>
    18d4:	20 2f       	mov	r18, r16
    18d6:	23 95       	inc	r18
    18d8:	02 2f       	mov	r16, r18
    18da:	7a 33       	cpi	r23, 0x3A	; 58
    18dc:	28 f0       	brcs	.+10     	; 0x18e8 <__ftoa_engine+0x154>
    18de:	79 e3       	ldi	r23, 0x39	; 57
    18e0:	7d 93       	st	X+, r23
    18e2:	2a 95       	dec	r18
    18e4:	e9 f7       	brne	.-6      	; 0x18e0 <__ftoa_engine+0x14c>
    18e6:	10 c0       	rjmp	.+32     	; 0x1908 <__ftoa_engine+0x174>
    18e8:	7d 93       	st	X+, r23
    18ea:	2a 95       	dec	r18
    18ec:	89 f6       	brne	.-94     	; 0x1890 <__ftoa_engine+0xfc>
    18ee:	06 94       	lsr	r0
    18f0:	97 95       	ror	r25
    18f2:	67 95       	ror	r22
    18f4:	37 95       	ror	r19
    18f6:	17 95       	ror	r17
    18f8:	17 94       	ror	r1
    18fa:	e1 18       	sub	r14, r1
    18fc:	f1 0a       	sbc	r15, r17
    18fe:	43 0b       	sbc	r20, r19
    1900:	56 0b       	sbc	r21, r22
    1902:	c9 0b       	sbc	r28, r25
    1904:	d0 09       	sbc	r29, r0
    1906:	98 f0       	brcs	.+38     	; 0x192e <__ftoa_engine+0x19a>
    1908:	23 95       	inc	r18
    190a:	7e 91       	ld	r23, -X
    190c:	73 95       	inc	r23
    190e:	7a 33       	cpi	r23, 0x3A	; 58
    1910:	08 f0       	brcs	.+2      	; 0x1914 <__ftoa_engine+0x180>
    1912:	70 e3       	ldi	r23, 0x30	; 48
    1914:	7c 93       	st	X, r23
    1916:	20 13       	cpse	r18, r16
    1918:	b8 f7       	brcc	.-18     	; 0x1908 <__ftoa_engine+0x174>
    191a:	7e 91       	ld	r23, -X
    191c:	70 61       	ori	r23, 0x10	; 16
    191e:	7d 93       	st	X+, r23
    1920:	30 f0       	brcs	.+12     	; 0x192e <__ftoa_engine+0x19a>
    1922:	83 95       	inc	r24
    1924:	71 e3       	ldi	r23, 0x31	; 49
    1926:	7d 93       	st	X+, r23
    1928:	70 e3       	ldi	r23, 0x30	; 48
    192a:	2a 95       	dec	r18
    192c:	e1 f7       	brne	.-8      	; 0x1926 <__ftoa_engine+0x192>
    192e:	11 24       	eor	r1, r1
    1930:	ef 90       	pop	r14
    1932:	ff 90       	pop	r15
    1934:	0f 91       	pop	r16
    1936:	1f 91       	pop	r17
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	99 27       	eor	r25, r25
    193e:	87 fd       	sbrc	r24, 7
    1940:	90 95       	com	r25
    1942:	08 95       	ret

00001944 <strnlen_P>:
    1944:	fc 01       	movw	r30, r24
    1946:	05 90       	lpm	r0, Z+
    1948:	61 50       	subi	r22, 0x01	; 1
    194a:	70 40       	sbci	r23, 0x00	; 0
    194c:	01 10       	cpse	r0, r1
    194e:	d8 f7       	brcc	.-10     	; 0x1946 <strnlen_P+0x2>
    1950:	80 95       	com	r24
    1952:	90 95       	com	r25
    1954:	8e 0f       	add	r24, r30
    1956:	9f 1f       	adc	r25, r31
    1958:	08 95       	ret

0000195a <strnlen>:
    195a:	fc 01       	movw	r30, r24
    195c:	61 50       	subi	r22, 0x01	; 1
    195e:	70 40       	sbci	r23, 0x00	; 0
    1960:	01 90       	ld	r0, Z+
    1962:	01 10       	cpse	r0, r1
    1964:	d8 f7       	brcc	.-10     	; 0x195c <strnlen+0x2>
    1966:	80 95       	com	r24
    1968:	90 95       	com	r25
    196a:	8e 0f       	add	r24, r30
    196c:	9f 1f       	adc	r25, r31
    196e:	08 95       	ret

00001970 <fputc>:
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	fb 01       	movw	r30, r22
    197a:	23 81       	ldd	r18, Z+3	; 0x03
    197c:	21 fd       	sbrc	r18, 1
    197e:	03 c0       	rjmp	.+6      	; 0x1986 <fputc+0x16>
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	9f ef       	ldi	r25, 0xFF	; 255
    1984:	2c c0       	rjmp	.+88     	; 0x19de <fputc+0x6e>
    1986:	22 ff       	sbrs	r18, 2
    1988:	16 c0       	rjmp	.+44     	; 0x19b6 <fputc+0x46>
    198a:	46 81       	ldd	r20, Z+6	; 0x06
    198c:	57 81       	ldd	r21, Z+7	; 0x07
    198e:	24 81       	ldd	r18, Z+4	; 0x04
    1990:	35 81       	ldd	r19, Z+5	; 0x05
    1992:	42 17       	cp	r20, r18
    1994:	53 07       	cpc	r21, r19
    1996:	44 f4       	brge	.+16     	; 0x19a8 <fputc+0x38>
    1998:	a0 81       	ld	r26, Z
    199a:	b1 81       	ldd	r27, Z+1	; 0x01
    199c:	9d 01       	movw	r18, r26
    199e:	2f 5f       	subi	r18, 0xFF	; 255
    19a0:	3f 4f       	sbci	r19, 0xFF	; 255
    19a2:	31 83       	std	Z+1, r19	; 0x01
    19a4:	20 83       	st	Z, r18
    19a6:	8c 93       	st	X, r24
    19a8:	26 81       	ldd	r18, Z+6	; 0x06
    19aa:	37 81       	ldd	r19, Z+7	; 0x07
    19ac:	2f 5f       	subi	r18, 0xFF	; 255
    19ae:	3f 4f       	sbci	r19, 0xFF	; 255
    19b0:	37 83       	std	Z+7, r19	; 0x07
    19b2:	26 83       	std	Z+6, r18	; 0x06
    19b4:	14 c0       	rjmp	.+40     	; 0x19de <fputc+0x6e>
    19b6:	8b 01       	movw	r16, r22
    19b8:	ec 01       	movw	r28, r24
    19ba:	fb 01       	movw	r30, r22
    19bc:	00 84       	ldd	r0, Z+8	; 0x08
    19be:	f1 85       	ldd	r31, Z+9	; 0x09
    19c0:	e0 2d       	mov	r30, r0
    19c2:	09 95       	icall
    19c4:	89 2b       	or	r24, r25
    19c6:	e1 f6       	brne	.-72     	; 0x1980 <fputc+0x10>
    19c8:	d8 01       	movw	r26, r16
    19ca:	16 96       	adiw	r26, 0x06	; 6
    19cc:	8d 91       	ld	r24, X+
    19ce:	9c 91       	ld	r25, X
    19d0:	17 97       	sbiw	r26, 0x07	; 7
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	17 96       	adiw	r26, 0x07	; 7
    19d6:	9c 93       	st	X, r25
    19d8:	8e 93       	st	-X, r24
    19da:	16 97       	sbiw	r26, 0x06	; 6
    19dc:	ce 01       	movw	r24, r28
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	1f 91       	pop	r17
    19e4:	0f 91       	pop	r16
    19e6:	08 95       	ret

000019e8 <printf>:
    19e8:	a0 e0       	ldi	r26, 0x00	; 0
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	ea ef       	ldi	r30, 0xFA	; 250
    19ee:	fc e0       	ldi	r31, 0x0C	; 12
    19f0:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__prologue_saves__+0x20>
    19f4:	ae 01       	movw	r20, r28
    19f6:	4b 5f       	subi	r20, 0xFB	; 251
    19f8:	5f 4f       	sbci	r21, 0xFF	; 255
    19fa:	fa 01       	movw	r30, r20
    19fc:	61 91       	ld	r22, Z+
    19fe:	71 91       	ld	r23, Z+
    1a00:	af 01       	movw	r20, r30
    1a02:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <__iob+0x2>
    1a06:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <__iob+0x3>
    1a0a:	0e 94 16 08 	call	0x102c	; 0x102c <vfprintf>
    1a0e:	e2 e0       	ldi	r30, 0x02	; 2
    1a10:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__epilogue_restores__+0x20>

00001a14 <putchar>:
    1a14:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <__iob+0x2>
    1a18:	70 91 cf 02 	lds	r23, 0x02CF	; 0x8002cf <__iob+0x3>
    1a1c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <fputc>
    1a20:	08 95       	ret

00001a22 <__ultoa_invert>:
    1a22:	fa 01       	movw	r30, r20
    1a24:	aa 27       	eor	r26, r26
    1a26:	28 30       	cpi	r18, 0x08	; 8
    1a28:	51 f1       	breq	.+84     	; 0x1a7e <__ultoa_invert+0x5c>
    1a2a:	20 31       	cpi	r18, 0x10	; 16
    1a2c:	81 f1       	breq	.+96     	; 0x1a8e <__ultoa_invert+0x6c>
    1a2e:	e8 94       	clt
    1a30:	6f 93       	push	r22
    1a32:	6e 7f       	andi	r22, 0xFE	; 254
    1a34:	6e 5f       	subi	r22, 0xFE	; 254
    1a36:	7f 4f       	sbci	r23, 0xFF	; 255
    1a38:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3c:	af 4f       	sbci	r26, 0xFF	; 255
    1a3e:	b1 e0       	ldi	r27, 0x01	; 1
    1a40:	3e d0       	rcall	.+124    	; 0x1abe <__ultoa_invert+0x9c>
    1a42:	b4 e0       	ldi	r27, 0x04	; 4
    1a44:	3c d0       	rcall	.+120    	; 0x1abe <__ultoa_invert+0x9c>
    1a46:	67 0f       	add	r22, r23
    1a48:	78 1f       	adc	r23, r24
    1a4a:	89 1f       	adc	r24, r25
    1a4c:	9a 1f       	adc	r25, r26
    1a4e:	a1 1d       	adc	r26, r1
    1a50:	68 0f       	add	r22, r24
    1a52:	79 1f       	adc	r23, r25
    1a54:	8a 1f       	adc	r24, r26
    1a56:	91 1d       	adc	r25, r1
    1a58:	a1 1d       	adc	r26, r1
    1a5a:	6a 0f       	add	r22, r26
    1a5c:	71 1d       	adc	r23, r1
    1a5e:	81 1d       	adc	r24, r1
    1a60:	91 1d       	adc	r25, r1
    1a62:	a1 1d       	adc	r26, r1
    1a64:	20 d0       	rcall	.+64     	; 0x1aa6 <__ultoa_invert+0x84>
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <__ultoa_invert+0x48>
    1a68:	68 94       	set
    1a6a:	3f 91       	pop	r19
    1a6c:	2a e0       	ldi	r18, 0x0A	; 10
    1a6e:	26 9f       	mul	r18, r22
    1a70:	11 24       	eor	r1, r1
    1a72:	30 19       	sub	r19, r0
    1a74:	30 5d       	subi	r19, 0xD0	; 208
    1a76:	31 93       	st	Z+, r19
    1a78:	de f6       	brtc	.-74     	; 0x1a30 <__ultoa_invert+0xe>
    1a7a:	cf 01       	movw	r24, r30
    1a7c:	08 95       	ret
    1a7e:	46 2f       	mov	r20, r22
    1a80:	47 70       	andi	r20, 0x07	; 7
    1a82:	40 5d       	subi	r20, 0xD0	; 208
    1a84:	41 93       	st	Z+, r20
    1a86:	b3 e0       	ldi	r27, 0x03	; 3
    1a88:	0f d0       	rcall	.+30     	; 0x1aa8 <__ultoa_invert+0x86>
    1a8a:	c9 f7       	brne	.-14     	; 0x1a7e <__ultoa_invert+0x5c>
    1a8c:	f6 cf       	rjmp	.-20     	; 0x1a7a <__ultoa_invert+0x58>
    1a8e:	46 2f       	mov	r20, r22
    1a90:	4f 70       	andi	r20, 0x0F	; 15
    1a92:	40 5d       	subi	r20, 0xD0	; 208
    1a94:	4a 33       	cpi	r20, 0x3A	; 58
    1a96:	18 f0       	brcs	.+6      	; 0x1a9e <__ultoa_invert+0x7c>
    1a98:	49 5d       	subi	r20, 0xD9	; 217
    1a9a:	31 fd       	sbrc	r19, 1
    1a9c:	40 52       	subi	r20, 0x20	; 32
    1a9e:	41 93       	st	Z+, r20
    1aa0:	02 d0       	rcall	.+4      	; 0x1aa6 <__ultoa_invert+0x84>
    1aa2:	a9 f7       	brne	.-22     	; 0x1a8e <__ultoa_invert+0x6c>
    1aa4:	ea cf       	rjmp	.-44     	; 0x1a7a <__ultoa_invert+0x58>
    1aa6:	b4 e0       	ldi	r27, 0x04	; 4
    1aa8:	a6 95       	lsr	r26
    1aaa:	97 95       	ror	r25
    1aac:	87 95       	ror	r24
    1aae:	77 95       	ror	r23
    1ab0:	67 95       	ror	r22
    1ab2:	ba 95       	dec	r27
    1ab4:	c9 f7       	brne	.-14     	; 0x1aa8 <__ultoa_invert+0x86>
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	61 05       	cpc	r22, r1
    1aba:	71 05       	cpc	r23, r1
    1abc:	08 95       	ret
    1abe:	9b 01       	movw	r18, r22
    1ac0:	ac 01       	movw	r20, r24
    1ac2:	0a 2e       	mov	r0, r26
    1ac4:	06 94       	lsr	r0
    1ac6:	57 95       	ror	r21
    1ac8:	47 95       	ror	r20
    1aca:	37 95       	ror	r19
    1acc:	27 95       	ror	r18
    1ace:	ba 95       	dec	r27
    1ad0:	c9 f7       	brne	.-14     	; 0x1ac4 <__ultoa_invert+0xa2>
    1ad2:	62 0f       	add	r22, r18
    1ad4:	73 1f       	adc	r23, r19
    1ad6:	84 1f       	adc	r24, r20
    1ad8:	95 1f       	adc	r25, r21
    1ada:	a0 1d       	adc	r26, r0
    1adc:	08 95       	ret

00001ade <_exit>:
    1ade:	f8 94       	cli

00001ae0 <__stop_program>:
    1ae0:	ff cf       	rjmp	.-2      	; 0x1ae0 <__stop_program>
