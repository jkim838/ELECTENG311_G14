
controller_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020c  00800100  00001ada  00001b6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ada  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  0080030c  0080030c  00001d7a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a43  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da0  00000000  00000000  000049db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014a5  00000000  00000000  0000577b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b0  00000000  00000000  00006c20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a5e  00000000  00000000  000072d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000327d  00000000  00000000  00007d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000afab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__vector_7>
      20:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <__vector_8>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__vector_18>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__vector_21>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	13 e0       	ldi	r17, 0x03	; 3
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ea ed       	ldi	r30, 0xDA	; 218
     17e:	fa e1       	ldi	r31, 0x1A	; 26
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ac 30       	cpi	r26, 0x0C	; 12
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	23 e0       	ldi	r18, 0x03	; 3
     18e:	ac e0       	ldi	r26, 0x0C	; 12
     190:	b3 e0       	ldi	r27, 0x03	; 3
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a8 34       	cpi	r26, 0x48	; 72
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <main>
     1a0:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <adc_init>:
/*** Function Definitions ***/
void adc_init(){
	
	/** ADCMUX: ADC Multiplexer Selection Register **/
	/* Voltage Reference Selection */
	ADMUX &= ~(1 << REFS1);			// Use Vcc as reference voltage
     1a8:	ec e7       	ldi	r30, 0x7C	; 124
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	8f 77       	andi	r24, 0x7F	; 127
     1b0:	80 83       	st	Z, r24
	ADMUX |=  (1 << REFS0);
     1b2:	80 81       	ld	r24, Z
     1b4:	80 64       	ori	r24, 0x40	; 64
     1b6:	80 83       	st	Z, r24
	/* ADC Left Adjust Result */
	ADMUX &= ~(1 << ADLAR);			// Right adjust ADC reading to ADCH
     1b8:	80 81       	ld	r24, Z
     1ba:	8f 7d       	andi	r24, 0xDF	; 223
     1bc:	80 83       	st	Z, r24
	/* Analog Channel Selection Bits */
	// Change input pin as specified by the data sheet...
	ADMUX &= ~(1 << MUX3);							// Channel 0 (Coil Voltage Sensor): Input pin is PC0
     1be:	80 81       	ld	r24, Z
     1c0:	87 7f       	andi	r24, 0xF7	; 247
     1c2:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX2);
     1c4:	80 81       	ld	r24, Z
     1c6:	8b 7f       	andi	r24, 0xFB	; 251
     1c8:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX1);
     1ca:	80 81       	ld	r24, Z
     1cc:	8d 7f       	andi	r24, 0xFD	; 253
     1ce:	80 83       	st	Z, r24
	ADMUX &= ~(1 << MUX0);
     1d0:	80 81       	ld	r24, Z
     1d2:	8e 7f       	andi	r24, 0xFE	; 254
     1d4:	80 83       	st	Z, r24
	ADC_next_channel = ADC_COIL_VOLTAGE_CHANNEL;	
     1d6:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <ADC_next_channel>
	// Note: Although it is named ADC_next_channel, in this function specifically this variable signifies 
	// initial state of the ADC Channel.
	
	/** ADCSRA: ADC Control and Status Register A **/
	/* ADC Enable */
	ADCSRA |= (1 << ADEN);			// ADC Power 'On'
     1da:	ea e7       	ldi	r30, 0x7A	; 122
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	80 81       	ld	r24, Z
     1e0:	80 68       	ori	r24, 0x80	; 128
     1e2:	80 83       	st	Z, r24
	#ifdef ADC_ENABLE_AUTO_TRIGGER
		ADCSRA |= (1 << ADATE);			// Auto Trigger 'On'
	#endif
	/* ADC Interrupt Setting */
	//	ADCSRA &=~(1 << ADIF);
	ADCSRA |= (1 << ADIE);			// Interrupt 'On'
     1e4:	80 81       	ld	r24, Z
     1e6:	88 60       	ori	r24, 0x08	; 8
     1e8:	80 83       	st	Z, r24
	/* Pre-scaler Setup */
	ADCSRA |= (1 << ADPS2);			// Pre-scaler Division factor to 64
     1ea:	80 81       	ld	r24, Z
     1ec:	84 60       	ori	r24, 0x04	; 4
     1ee:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);			// ADC Frequency = 125 KHz @Xplained Mini (F_CPU 16MHz)
     1f0:	80 81       	ld	r24, Z
     1f2:	82 60       	ori	r24, 0x02	; 2
     1f4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0);			// ADC Frequency = 62.5 KHz @PCB (F_CPU 8MHz)
     1f6:	80 81       	ld	r24, Z
     1f8:	81 60       	ori	r24, 0x01	; 1
     1fa:	80 83       	st	Z, r24
		ADCSRB |= (1 << ADTS1);
		ADCSRB |= (1 << ADTS2);
	#endif

	/** ADC Begin **/
	ADCSRA |= (1 << ADSC);			// Start new conversion
     1fc:	80 81       	ld	r24, Z
     1fe:	80 64       	ori	r24, 0x40	; 64
     200:	80 83       	st	Z, r24
     202:	08 95       	ret

00000204 <adc_digitize>:
}

double adc_digitize(uint16_t debug_raw_output){
	
	double digitized_ADC_output = (double) debug_raw_output * ADC_REFERENCE_VOLTAGE / ADC_RESOLUTION;
	return digitized_ADC_output;
     204:	bc 01       	movw	r22, r24
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 ee 06 	call	0xddc	; 0xddc <__floatunsisf>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 ea       	ldi	r20, 0xA0	; 160
     214:	50 e4       	ldi	r21, 0x40	; 64
     216:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulsf3>
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	40 e8       	ldi	r20, 0x80	; 128
     220:	5a e3       	ldi	r21, 0x3A	; 58
     222:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulsf3>
	
     226:	08 95       	ret

00000228 <calculate_voltage>:

/*** Function Definitions ***/
double calculate_voltage(double raw_ADC_output_PC0){
	static double real_voltage;
	real_voltage = raw_ADC_output_PC0 * (1 + VOLTAGE_SHUNT_A/VOLTAGE_SHUNT_B);	 
	return real_voltage;
     228:	26 e6       	ldi	r18, 0x66	; 102
     22a:	36 e6       	ldi	r19, 0x66	; 102
     22c:	46 e2       	ldi	r20, 0x26	; 38
     22e:	50 e4       	ldi	r21, 0x40	; 64
     230:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulsf3>
}
     234:	08 95       	ret

00000236 <calculate_current>:

double calculate_current(double raw_ADC_output_PC5){
	static double real_current;
	real_current =  raw_ADC_output_PC5 / CURRENT_RESISTOR_C;
	return real_current;
     236:	2a e9       	ldi	r18, 0x9A	; 154
     238:	39 e9       	ldi	r19, 0x99	; 153
     23a:	49 e1       	ldi	r20, 0x19	; 25
     23c:	5e e3       	ldi	r21, 0x3E	; 62
     23e:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__divsf3>
}
     242:	08 95       	ret

00000244 <calculate_power>:

double calculate_power(double coil_voltage, double coil_current, uint8_t PWM_live_time, uint8_t cycle_period){
     244:	8f 92       	push	r8
     246:	9f 92       	push	r9
     248:	af 92       	push	r10
     24a:	bf 92       	push	r11
     24c:	ef 92       	push	r14
     24e:	0f 93       	push	r16
	// convert binary coil voltage into a number
	// Vcc = 5V, ADC Channel is 10 bits, therefore ADC Step Size = 5/2^10 = 4.88mV
	// therefore if raw ADC output is dec 512 (i.e. 0x200 hex), then analog value is 2.5v
	total_power = coil_voltage * coil_current;
	average_power = total_power * PWM_live_time / cycle_period;
	return average_power;
     250:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulsf3>
     254:	4b 01       	movw	r8, r22
     256:	5c 01       	movw	r10, r24
     258:	60 2f       	mov	r22, r16
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 f0 06 	call	0xde0	; 0xde0 <__floatsisf>
     264:	9b 01       	movw	r18, r22
     266:	ac 01       	movw	r20, r24
     268:	c5 01       	movw	r24, r10
     26a:	b4 01       	movw	r22, r8
     26c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulsf3>
     270:	4b 01       	movw	r8, r22
     272:	5c 01       	movw	r10, r24
     274:	6e 2d       	mov	r22, r14
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 f0 06 	call	0xde0	; 0xde0 <__floatsisf>
     280:	9b 01       	movw	r18, r22
     282:	ac 01       	movw	r20, r24
     284:	c5 01       	movw	r24, r10
     286:	b4 01       	movw	r22, r8
     288:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__divsf3>
	
}
     28c:	0f 91       	pop	r16
     28e:	ef 90       	pop	r14
     290:	bf 90       	pop	r11
     292:	af 90       	pop	r10
     294:	9f 90       	pop	r9
     296:	8f 90       	pop	r8
     298:	08 95       	ret

0000029a <usart_init>:
#include "Macro_Definitions.h"

void usart_init(uint16_t UBRR){
	
	// Enable USART Transmitter
	UCSR0B |= (1 << TXEN0);
     29a:	a1 ec       	ldi	r26, 0xC1	; 193
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	2c 91       	ld	r18, X
     2a0:	28 60       	ori	r18, 0x08	; 8
     2a2:	2c 93       	st	X, r18
	// Enable USART Receiver
	UCSR0B |= (1 << RXEN0);
     2a4:	2c 91       	ld	r18, X
     2a6:	20 61       	ori	r18, 0x10	; 16
     2a8:	2c 93       	st	X, r18
	// Enable USART Receive Interrupt
	UCSR0B |= (1 << RXCIE0);
     2aa:	2c 91       	ld	r18, X
     2ac:	20 68       	ori	r18, 0x80	; 128
     2ae:	2c 93       	st	X, r18
		
	// Sets the mode of the USART to be asynchronous.
	UCSR0C &= ~(1 << UMSEL01);
     2b0:	e2 ec       	ldi	r30, 0xC2	; 194
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	20 81       	ld	r18, Z
     2b6:	2f 77       	andi	r18, 0x7F	; 127
     2b8:	20 83       	st	Z, r18
	UCSR0C &= ~(1 << UMSEL00);
     2ba:	20 81       	ld	r18, Z
     2bc:	2f 7b       	andi	r18, 0xBF	; 191
     2be:	20 83       	st	Z, r18
		
	// Disables the parity bit.
	UCSR0C &= ~(1 << UPM01);
     2c0:	20 81       	ld	r18, Z
     2c2:	2f 7d       	andi	r18, 0xDF	; 223
     2c4:	20 83       	st	Z, r18
	UCSR0C &= ~(1 << UPM00);
     2c6:	20 81       	ld	r18, Z
     2c8:	2f 7e       	andi	r18, 0xEF	; 239
     2ca:	20 83       	st	Z, r18
		
	// Sets only one stop bit.
	UCSR0C &= ~(1 << USBS0);
     2cc:	20 81       	ld	r18, Z
     2ce:	27 7f       	andi	r18, 0xF7	; 247
     2d0:	20 83       	st	Z, r18
		
	// Sets the data width to be 8 bits (UCSZ0[2..0] = 011).
	UCSR0B &= ~(1 << UCSZ02);
     2d2:	2c 91       	ld	r18, X
     2d4:	2b 7f       	andi	r18, 0xFB	; 251
     2d6:	2c 93       	st	X, r18
	UCSR0C |= ((1 << UCSZ01) | (1 << UCSZ00));
     2d8:	20 81       	ld	r18, Z
     2da:	26 60       	ori	r18, 0x06	; 6
     2dc:	20 83       	st	Z, r18
	// Sets the UBRR to be 103.
	UBRR0H = (UBRR >> 8);
     2de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRR;
     2e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     2e6:	08 95       	ret

000002e8 <usart_transmit>:
	
}

void usart_transmit(uint8_t data){
	
	while (DATA_REG_IS_FULL);		// Waits for the UDR register to be empty.
     2e8:	e0 ec       	ldi	r30, 0xC0	; 192
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	90 81       	ld	r25, Z
     2ee:	95 ff       	sbrs	r25, 5
     2f0:	fd cf       	rjmp	.-6      	; 0x2ec <usart_transmit+0x4>
	UDR0 = data;					// Transmits the data.
     2f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2f6:	08 95       	ret

000002f8 <usart_printf>:
	
}

int usart_printf(char var, FILE *stream){
     2f8:	cf 93       	push	r28
     2fa:	c8 2f       	mov	r28, r24

	if(var == '\n'){
     2fc:	8a 30       	cpi	r24, 0x0A	; 10
     2fe:	19 f4       	brne	.+6      	; 0x306 <usart_printf+0xe>
		usart_transmit('\r');
     300:	8d e0       	ldi	r24, 0x0D	; 13
     302:	0e 94 74 01 	call	0x2e8	; 0x2e8 <usart_transmit>
	}
	usart_transmit(var);
     306:	8c 2f       	mov	r24, r28
     308:	0e 94 74 01 	call	0x2e8	; 0x2e8 <usart_transmit>
	return 0;

}
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <usart_TX_data>:

void usart_TX_data(uint8_t MOTOR_ID, uint8_t Current_FL, uint16_t numerical_req, double frequency, double expected_power, double coil_current, double coil_voltage, bool req_found, bool clear_error, bool error_collision, bool error_jammed){
     314:	2f 92       	push	r2
     316:	3f 92       	push	r3
     318:	4f 92       	push	r4
     31a:	5f 92       	push	r5
     31c:	6f 92       	push	r6
     31e:	7f 92       	push	r7
     320:	8f 92       	push	r8
     322:	9f 92       	push	r9
     324:	af 92       	push	r10
     326:	bf 92       	push	r11
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	00 d0       	rcall	.+0      	; 0x33a <usart_TX_data+0x26>
     33a:	00 d0       	rcall	.+0      	; 0x33c <usart_TX_data+0x28>
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	68 2e       	mov	r6, r24
     342:	76 2e       	mov	r7, r22
     344:	4b 83       	std	Y+3, r20	; 0x03
     346:	5c 83       	std	Y+4, r21	; 0x04
     348:	29 83       	std	Y+1, r18	; 0x01
     34a:	3a 83       	std	Y+2, r19	; 0x02
     34c:	59 8c       	ldd	r5, Y+25	; 0x19
     34e:	4a 8c       	ldd	r4, Y+26	; 0x1a
     350:	3b 8c       	ldd	r3, Y+27	; 0x1b
     352:	2c 8c       	ldd	r2, Y+28	; 0x1c
	
	// Slave to Master Communication
	// Transmit Report...
	printf("{");
     354:	8b e7       	ldi	r24, 0x7B	; 123
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <putchar>
	printf("\"%d\":", MOTOR_ID);
     35c:	1f 92       	push	r1
     35e:	6f 92       	push	r6
     360:	81 e1       	ldi	r24, 0x11	; 17
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	9f 93       	push	r25
     366:	8f 93       	push	r24
     368:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <printf>
	printf("{");
     36c:	8b e7       	ldi	r24, 0x7B	; 123
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <putchar>
	if(req_found){
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     37e:	88 23       	and	r24, r24
     380:	99 f0       	breq	.+38     	; 0x3a8 <usart_TX_data+0x94>
		// If new flow rate command was specified in the master-slave input, then print the following...
		// If current flow rate is lower than 3 digits, add a digit at the front to force three digits...
		printf("\"mfc\":{\"req"":\"%03d\",\"cur\":\"%03d\"},\"ver:\"\"001.003.005"",", numerical_req, Current_FL);
     382:	1f 92       	push	r1
     384:	7f 92       	push	r7
     386:	8c 81       	ldd	r24, Y+4	; 0x04
     388:	8f 93       	push	r24
     38a:	9b 81       	ldd	r25, Y+3	; 0x03
     38c:	9f 93       	push	r25
     38e:	87 e1       	ldi	r24, 0x17	; 23
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	9f 93       	push	r25
     394:	8f 93       	push	r24
     396:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <printf>
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	13 c0       	rjmp	.+38     	; 0x3ce <usart_TX_data+0xba>
	}
	else{
		// If no new flow rate command was specified or overflew in the master-slave input, then flow rate should be "000"...
		printf("\"mfc\":{\"req"":\"%d%d%d\",\"cur\":\"%03d\"},\"ver:\"\"001.003.005"",", 0,0,0, Current_FL);
     3a8:	1f 92       	push	r1
     3aa:	7f 92       	push	r7
     3ac:	1f 92       	push	r1
     3ae:	1f 92       	push	r1
     3b0:	1f 92       	push	r1
     3b2:	1f 92       	push	r1
     3b4:	1f 92       	push	r1
     3b6:	1f 92       	push	r1
     3b8:	8c e4       	ldi	r24, 0x4C	; 76
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	9f 93       	push	r25
     3be:	8f 93       	push	r24
     3c0:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <printf>
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
	}
	// Display operating conditions...
	printf("\"param\":{\"pwr\":\"%04.1fW\",\"freq\":\"%03.0fHz\",\"curr\":\"%03.0fA\",\"volt\":\"%05.2fV\"},", expected_power, frequency, coil_current, coil_voltage);
     3ce:	2f 92       	push	r2
     3d0:	3f 92       	push	r3
     3d2:	4f 92       	push	r4
     3d4:	5f 92       	push	r5
     3d6:	bf 92       	push	r11
     3d8:	af 92       	push	r10
     3da:	9f 92       	push	r9
     3dc:	8f 92       	push	r8
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	9f 93       	push	r25
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	8f 93       	push	r24
     3e6:	1f 93       	push	r17
     3e8:	0f 93       	push	r16
     3ea:	ff 92       	push	r15
     3ec:	ef 92       	push	r14
     3ee:	df 92       	push	r13
     3f0:	cf 92       	push	r12
     3f2:	83 e8       	ldi	r24, 0x83	; 131
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	9f 93       	push	r25
     3f8:	8f 93       	push	r24
     3fa:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <printf>
	// if error is not cleared, when there are either of errors present...
	if(!clear_error && (error_collision || error_jammed)){
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	8e 8d       	ldd	r24, Y+30	; 0x1e
     40a:	81 11       	cpse	r24, r1
     40c:	19 c0       	rjmp	.+50     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     40e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     410:	81 11       	cpse	r24, r1
     412:	44 c0       	rjmp	.+136    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     414:	98 a1       	ldd	r25, Y+32	; 0x20
     416:	91 11       	cpse	r25, r1
     418:	30 c0       	rjmp	.+96     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     41a:	12 c0       	rjmp	.+36     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
		// display error clearance message...
		printf("\"clr\":\"ew\",");
		// if only collision happend...
		if(!error_jammed && error_collision){
			printf("\"ew\":[\"           \",\"pistonCollision\"]");
     41c:	82 ed       	ldi	r24, 0xD2	; 210
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	9f 93       	push	r25
     422:	8f 93       	push	r24
     424:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <printf>
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	19 c0       	rjmp	.+50     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		else if(error_jammed && !error_collision){
			printf("\"ew\":[\"cmprStalled\",\"               \"]");
		}
		// if both happend...
		else if(error_jammed && error_collision){
			printf("\"ew\":[\"cmprStalled\",\"pistonCollision\"]");
     42e:	89 ef       	ldi	r24, 0xF9	; 249
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	9f 93       	push	r25
     434:	8f 93       	push	r24
     436:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <printf>
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	10 c0       	rjmp	.+32     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		}
	}
	// if error is cleared by the user, OR no errors are present in the system...
	else if(clear_error || (!error_jammed && !error_collision)){
		printf("           "); // eleven spaces
     440:	87 e3       	ldi	r24, 0x37	; 55
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	9f 93       	push	r25
     446:	8f 93       	push	r24
     448:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <printf>
		printf("                                  "); //31 spaces
     44c:	80 e2       	ldi	r24, 0x20	; 32
     44e:	92 e0       	ldi	r25, 0x02	; 2
     450:	9f 93       	push	r25
     452:	8f 93       	push	r24
     454:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <printf>
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	0f 90       	pop	r0
	}
	printf("}");
     460:	8d e7       	ldi	r24, 0x7D	; 125
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <putchar>
	printf("}");
     468:	8d e7       	ldi	r24, 0x7D	; 125
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <putchar>
	
	// just to make the terminal look nicer...
	printf("\n");
     470:	8a e0       	ldi	r24, 0x0A	; 10
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <putchar>
	
     478:	1d c0       	rjmp	.+58     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
	// Display operating conditions...
	printf("\"param\":{\"pwr\":\"%04.1fW\",\"freq\":\"%03.0fHz\",\"curr\":\"%03.0fA\",\"volt\":\"%05.2fV\"},", expected_power, frequency, coil_current, coil_voltage);
	// if error is not cleared, when there are either of errors present...
	if(!clear_error && (error_collision || error_jammed)){
		// display error clearance message...
		printf("\"clr\":\"ew\",");
     47a:	83 e4       	ldi	r24, 0x43	; 67
     47c:	92 e0       	ldi	r25, 0x02	; 2
     47e:	9f 93       	push	r25
     480:	8f 93       	push	r24
     482:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <printf>
		if(!error_jammed && error_collision){
			printf("\"ew\":[\"           \",\"pistonCollision\"]");
		}
		// if only jam happend...
		else if(error_jammed && !error_collision){
			printf("\"ew\":[\"cmprStalled\",\"               \"]");
     486:	8f e4       	ldi	r24, 0x4F	; 79
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <printf>
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	e2 cf       	rjmp	.-60     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
	// Display operating conditions...
	printf("\"param\":{\"pwr\":\"%04.1fW\",\"freq\":\"%03.0fHz\",\"curr\":\"%03.0fA\",\"volt\":\"%05.2fV\"},", expected_power, frequency, coil_current, coil_voltage);
	// if error is not cleared, when there are either of errors present...
	if(!clear_error && (error_collision || error_jammed)){
		// display error clearance message...
		printf("\"clr\":\"ew\",");
     49c:	83 e4       	ldi	r24, 0x43	; 67
     49e:	92 e0       	ldi	r25, 0x02	; 2
     4a0:	9f 93       	push	r25
     4a2:	8f 93       	push	r24
     4a4:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <printf>
		// if only collision happend...
		if(!error_jammed && error_collision){
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	88 a1       	ldd	r24, Y+32	; 0x20
     4ae:	81 11       	cpse	r24, r1
     4b0:	be cf       	rjmp	.-132    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     4b2:	b4 cf       	rjmp	.-152    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	printf("}");
	
	// just to make the terminal look nicer...
	printf("\n");
	
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	bf 90       	pop	r11
     4ce:	af 90       	pop	r10
     4d0:	9f 90       	pop	r9
     4d2:	8f 90       	pop	r8
     4d4:	7f 90       	pop	r7
     4d6:	6f 90       	pop	r6
     4d8:	5f 90       	pop	r5
     4da:	4f 90       	pop	r4
     4dc:	3f 90       	pop	r3
     4de:	2f 90       	pop	r2
     4e0:	08 95       	ret

000004e2 <main>:
	uint16_t raw_ADC_output_PC0;
	uint16_t raw_ADC_output_PC5;
	volatile uint8_t debug_ADC_channel;
#endif

int main(void){
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
     4ea:	60 97       	sbiw	r28, 0x10	; 16
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	cd bf       	out	0x3d, r28	; 61
	
	/*** Run Once Code ***/
	/* PIN I/O Setup */
	// Set all pins to output. Change mode to input when necessary
	DDRB = 0xff;
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;
     4fa:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xff;
     4fc:	8a b9       	out	0x0a, r24	; 10
	
	// Set ADC Input Gates...
	DDRC &= ~(1 << PC0); // ADC Channel 0... Voltage Shunt Channel
     4fe:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1 << PC5); // ADC Channel 5... Current Shunt Channel
     500:	3d 98       	cbi	0x07, 5	; 7
		
	/* ATMEGA328P Module Initialization */
	// Remove double slashes to activate...
	timer2_init();	// Set up Timer 0 for Pulse Modulation
     502:	0e 94 c7 05 	call	0xb8e	; 0xb8e <timer2_init>
	adc_init();		// Set up ADC
     506:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <adc_init>
	#ifdef TRANSMIT_DEBUG_MODE
		uint8_t printf_value;
		stdout = &printf_stdout;
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <__iob+0x3>
     512:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <__iob+0x2>
		usart_init(UBRR_VALUE);
     516:	87 e6       	ldi	r24, 0x67	; 103
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 4d 01 	call	0x29a	; 0x29a <usart_init>
	#else
	#endif
	
	sei();
     51e:	78 94       	sei
				RX_sequence_complete = false;
			}
			else{
				// Wrong MOTOR ID is provided. Print Error Message.
				printf_value = RX_buffer[2];
				printf("VIOLATION: WRONG MOTOR ID '%d'\n", printf_value -'0');
     520:	0f 2e       	mov	r0, r31
     522:	fb ee       	ldi	r31, 0xEB	; 235
     524:	6f 2e       	mov	r6, r31
     526:	f2 e0       	ldi	r31, 0x02	; 2
     528:	7f 2e       	mov	r7, r31
     52a:	f0 2d       	mov	r31, r0
				RX_sequence_complete = false;
			}
		}
		#ifdef XPLAINED_MINI_LED_STROBE
			PORTB ^= (1 << PB5);
     52c:	68 94       	set
     52e:	22 24       	eor	r2, r2
     530:	25 f8       	bld	r2, 5

    /* Main Loop */
    while (1) {
		
		// When buffer is filled with info.
		if(RX_sequence_complete){
     532:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <__data_end>
     536:	88 23       	and	r24, r24
     538:	09 f4       	brne	.+2      	; 0x53c <main+0x5a>
     53a:	48 c2       	rjmp	.+1168   	; 0x9cc <__stack+0xcd>
			bool clear_error = false;
			
			uint16_t numerical_req;
			uint8_t digitized_req[3];
			//Verify Motor ID...
			if(RX_buffer[0] == '{' && RX_buffer[1] == '"' && RX_buffer[2] == '3' && RX_buffer[3] == '"' && RX_buffer[4] == ':'){
     53c:	ac e1       	ldi	r26, 0x1C	; 28
     53e:	b3 e0       	ldi	r27, 0x03	; 3
     540:	8c 91       	ld	r24, X
     542:	8b 37       	cpi	r24, 0x7B	; 123
     544:	09 f0       	breq	.+2      	; 0x548 <main+0x66>
     546:	32 c2       	rjmp	.+1124   	; 0x9ac <__stack+0xad>
     548:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <RX_buffer+0x1>
     54c:	82 32       	cpi	r24, 0x22	; 34
     54e:	09 f0       	breq	.+2      	; 0x552 <main+0x70>
     550:	2d c2       	rjmp	.+1114   	; 0x9ac <__stack+0xad>
     552:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <RX_buffer+0x2>
     556:	83 33       	cpi	r24, 0x33	; 51
     558:	09 f0       	breq	.+2      	; 0x55c <main+0x7a>
     55a:	28 c2       	rjmp	.+1104   	; 0x9ac <__stack+0xad>
     55c:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <RX_buffer+0x3>
     560:	82 32       	cpi	r24, 0x22	; 34
     562:	09 f0       	breq	.+2      	; 0x566 <main+0x84>
     564:	23 c2       	rjmp	.+1094   	; 0x9ac <__stack+0xad>
     566:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <RX_buffer+0x4>
     56a:	8a 33       	cpi	r24, 0x3A	; 58
     56c:	09 f0       	breq	.+2      	; 0x570 <main+0x8e>
     56e:	1e c2       	rjmp	.+1084   	; 0x9ac <__stack+0xad>
     570:	e5 e0       	ldi	r30, 0x05	; 5
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	24 e0       	ldi	r18, 0x04	; 4
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	62 e0       	ldi	r22, 0x02	; 2
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	1c 86       	std	Y+12, r1	; 0x0c
     582:	31 2c       	mov	r3, r1
							digitized_req[0] = 0;
							digitized_req[1] = 0;
							digitized_req[2] = (RX_buffer[i + 4]);
						}
						else if(RX_buffer[i + 6] == '"'){
							digitized_req[0] = 0;
     584:	d1 2c       	mov	r13, r1
     586:	c9 01       	movw	r24, r18
     588:	04 97       	sbiw	r24, 0x04	; 4
					is set to true. Knowing the position of command value in the fixed JSON structure, the program will
					fetch and store each of its digits into an array "digitized_req".
					*/
						
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
     58a:	dc 01       	movw	r26, r24
     58c:	a4 5e       	subi	r26, 0xE4	; 228
     58e:	bc 4f       	sbci	r27, 0xFC	; 252
     590:	ac 91       	ld	r26, X
     592:	a1 37       	cpi	r26, 0x71	; 113
     594:	09 f0       	breq	.+2      	; 0x598 <main+0xb6>
     596:	5a c0       	rjmp	.+180    	; 0x64c <main+0x16a>
     598:	da 01       	movw	r26, r20
     59a:	a4 5e       	subi	r26, 0xE4	; 228
     59c:	bc 4f       	sbci	r27, 0xFC	; 252
     59e:	ac 91       	ld	r26, X
     5a0:	a2 32       	cpi	r26, 0x22	; 34
     5a2:	09 f0       	breq	.+2      	; 0x5a6 <main+0xc4>
     5a4:	53 c0       	rjmp	.+166    	; 0x64c <main+0x16a>
     5a6:	db 01       	movw	r26, r22
     5a8:	a4 5e       	subi	r26, 0xE4	; 228
     5aa:	bc 4f       	sbci	r27, 0xFC	; 252
     5ac:	ac 91       	ld	r26, X
     5ae:	aa 33       	cpi	r26, 0x3A	; 58
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <main+0xd2>
     5b2:	4c c0       	rjmp	.+152    	; 0x64c <main+0x16a>
     5b4:	d9 01       	movw	r26, r18
     5b6:	a5 5e       	subi	r26, 0xE5	; 229
     5b8:	bc 4f       	sbci	r27, 0xFC	; 252
     5ba:	ac 91       	ld	r26, X
     5bc:	a2 32       	cpi	r26, 0x22	; 34
     5be:	09 f0       	breq	.+2      	; 0x5c2 <main+0xe0>
     5c0:	45 c0       	rjmp	.+138    	; 0x64c <main+0x16a>
						// req is present
						req_found = true;
						if(RX_buffer[i + 5] == '"'){
     5c2:	8f 01       	movw	r16, r30
     5c4:	04 5e       	subi	r16, 0xE4	; 228
     5c6:	1c 4f       	sbci	r17, 0xFC	; 252
     5c8:	d8 01       	movw	r26, r16
     5ca:	1c 91       	ld	r17, X
     5cc:	12 32       	cpi	r17, 0x22	; 34
     5ce:	51 f4       	brne	.+20     	; 0x5e4 <main+0x102>
							digitized_req[0] = 0;
							digitized_req[1] = 0;
							digitized_req[2] = (RX_buffer[i + 4]);
     5d0:	d9 01       	movw	r26, r18
     5d2:	a4 5e       	subi	r26, 0xE4	; 228
     5d4:	bc 4f       	sbci	r27, 0xFC	; 252
     5d6:	fc 90       	ld	r15, X
     5d8:	fe 86       	std	Y+14, r15	; 0x0e
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
						if(RX_buffer[i + 5] == '"'){
							digitized_req[0] = 0;
							digitized_req[1] = 0;
     5da:	dd 86       	std	Y+13, r13	; 0x0d
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
						if(RX_buffer[i + 5] == '"'){
							digitized_req[0] = 0;
     5dc:	df 86       	std	Y+15, r13	; 0x0f
					*/
						
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
     5de:	33 24       	eor	r3, r3
     5e0:	33 94       	inc	r3
     5e2:	34 c0       	rjmp	.+104    	; 0x64c <main+0x16a>
     5e4:	89 01       	movw	r16, r18
     5e6:	0e 5f       	subi	r16, 0xFE	; 254
     5e8:	1f 4f       	sbci	r17, 0xFF	; 255
						if(RX_buffer[i + 5] == '"'){
							digitized_req[0] = 0;
							digitized_req[1] = 0;
							digitized_req[2] = (RX_buffer[i + 4]);
						}
						else if(RX_buffer[i + 6] == '"'){
     5ea:	d8 01       	movw	r26, r16
     5ec:	a4 5e       	subi	r26, 0xE4	; 228
     5ee:	bc 4f       	sbci	r27, 0xFC	; 252
     5f0:	fc 90       	ld	r15, X
     5f2:	b2 e2       	ldi	r27, 0x22	; 34
     5f4:	fb 12       	cpse	r15, r27
     5f6:	0f c0       	rjmp	.+30     	; 0x616 <main+0x134>
							digitized_req[0] = 0;
							digitized_req[1] = (RX_buffer[i + 4]);
     5f8:	89 01       	movw	r16, r18
     5fa:	04 5e       	subi	r16, 0xE4	; 228
     5fc:	1c 4f       	sbci	r17, 0xFC	; 252
     5fe:	d8 01       	movw	r26, r16
     600:	bc 91       	ld	r27, X
     602:	bd 87       	std	Y+13, r27	; 0x0d
							digitized_req[2] = (RX_buffer[i + 5]);
     604:	df 01       	movw	r26, r30
     606:	a4 5e       	subi	r26, 0xE4	; 228
     608:	bc 4f       	sbci	r27, 0xFC	; 252
     60a:	fc 90       	ld	r15, X
     60c:	fe 86       	std	Y+14, r15	; 0x0e
							digitized_req[0] = 0;
							digitized_req[1] = 0;
							digitized_req[2] = (RX_buffer[i + 4]);
						}
						else if(RX_buffer[i + 6] == '"'){
							digitized_req[0] = 0;
     60e:	df 86       	std	Y+15, r13	; 0x0f
					*/
						
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
     610:	33 24       	eor	r3, r3
     612:	33 94       	inc	r3
     614:	1b c0       	rjmp	.+54     	; 0x64c <main+0x16a>
						else if(RX_buffer[i + 6] == '"'){
							digitized_req[0] = 0;
							digitized_req[1] = (RX_buffer[i + 4]);
							digitized_req[2] = (RX_buffer[i + 5]);
						}
						else if(RX_buffer[i + 7] == '"'){
     616:	d9 01       	movw	r26, r18
     618:	a1 5e       	subi	r26, 0xE1	; 225
     61a:	bc 4f       	sbci	r27, 0xFC	; 252
     61c:	fc 90       	ld	r15, X
     61e:	b2 e2       	ldi	r27, 0x22	; 34
     620:	fb 12       	cpse	r15, r27
     622:	12 c0       	rjmp	.+36     	; 0x648 <main+0x166>
							digitized_req[0] = (RX_buffer[i + 4]);
     624:	d9 01       	movw	r26, r18
     626:	a4 5e       	subi	r26, 0xE4	; 228
     628:	bc 4f       	sbci	r27, 0xFC	; 252
     62a:	bc 91       	ld	r27, X
     62c:	bf 87       	std	Y+15, r27	; 0x0f
							digitized_req[1] = (RX_buffer[i + 5]);
     62e:	df 01       	movw	r26, r30
     630:	a4 5e       	subi	r26, 0xE4	; 228
     632:	bc 4f       	sbci	r27, 0xFC	; 252
     634:	fc 90       	ld	r15, X
     636:	fd 86       	std	Y+13, r15	; 0x0d
							digitized_req[2] = (RX_buffer[i + 6]);
     638:	d8 01       	movw	r26, r16
     63a:	a4 5e       	subi	r26, 0xE4	; 228
     63c:	bc 4f       	sbci	r27, 0xFC	; 252
     63e:	1c 91       	ld	r17, X
     640:	1e 87       	std	Y+14, r17	; 0x0e
					*/
						
					//check if "req" is present...
					if((RX_buffer[i]) == 'q' && (RX_buffer[i + 1]) == '"' && (RX_buffer[i + 2]) == ':' && (RX_buffer[i + 3]) == '"'){
						// req is present
						req_found = true;
     642:	33 24       	eor	r3, r3
     644:	33 94       	inc	r3
     646:	02 c0       	rjmp	.+4      	; 0x64c <main+0x16a>
     648:	33 24       	eor	r3, r3
     64a:	33 94       	inc	r3
							digitized_req[1] = (RX_buffer[i + 5]);
							digitized_req[2] = (RX_buffer[i + 6]);
						}
					}
										
					if(RX_buffer[i] == 'r' && (RX_buffer[i + 1] == '"') && (RX_buffer[i + 2] == ':')&&(RX_buffer[i + 4] == 'e')&&(RX_buffer[i + 5] == 'w')){
     64c:	dc 01       	movw	r26, r24
     64e:	a4 5e       	subi	r26, 0xE4	; 228
     650:	bc 4f       	sbci	r27, 0xFC	; 252
     652:	8c 91       	ld	r24, X
     654:	82 37       	cpi	r24, 0x72	; 114
     656:	d1 f4       	brne	.+52     	; 0x68c <main+0x1aa>
     658:	da 01       	movw	r26, r20
     65a:	a4 5e       	subi	r26, 0xE4	; 228
     65c:	bc 4f       	sbci	r27, 0xFC	; 252
     65e:	8c 91       	ld	r24, X
     660:	82 32       	cpi	r24, 0x22	; 34
     662:	a1 f4       	brne	.+40     	; 0x68c <main+0x1aa>
     664:	db 01       	movw	r26, r22
     666:	a4 5e       	subi	r26, 0xE4	; 228
     668:	bc 4f       	sbci	r27, 0xFC	; 252
     66a:	8c 91       	ld	r24, X
     66c:	8a 33       	cpi	r24, 0x3A	; 58
     66e:	71 f4       	brne	.+28     	; 0x68c <main+0x1aa>
     670:	d9 01       	movw	r26, r18
     672:	a4 5e       	subi	r26, 0xE4	; 228
     674:	bc 4f       	sbci	r27, 0xFC	; 252
     676:	8c 91       	ld	r24, X
     678:	85 36       	cpi	r24, 0x65	; 101
     67a:	41 f4       	brne	.+16     	; 0x68c <main+0x1aa>
     67c:	df 01       	movw	r26, r30
     67e:	a4 5e       	subi	r26, 0xE4	; 228
     680:	bc 4f       	sbci	r27, 0xFC	; 252
     682:	8c 91       	ld	r24, X
     684:	87 37       	cpi	r24, 0x77	; 119
     686:	11 f4       	brne	.+4      	; 0x68c <main+0x1aa>
						//clear error warning is present...
						clear_error = true;
     688:	11 e0       	ldi	r17, 0x01	; 1
     68a:	1c 87       	std	Y+12, r17	; 0x0c
     68c:	4f 5f       	subi	r20, 0xFF	; 255
     68e:	5f 4f       	sbci	r21, 0xFF	; 255
     690:	6f 5f       	subi	r22, 0xFF	; 255
     692:	7f 4f       	sbci	r23, 0xFF	; 255
     694:	2f 5f       	subi	r18, 0xFF	; 255
     696:	3f 4f       	sbci	r19, 0xFF	; 255
     698:	31 96       	adiw	r30, 0x01	; 1
			uint16_t numerical_req;
			uint8_t digitized_req[3];
			//Verify Motor ID...
			if(RX_buffer[0] == '{' && RX_buffer[1] == '"' && RX_buffer[2] == '3' && RX_buffer[3] == '"' && RX_buffer[4] == ':'){
				// read through buffer contents
				for(uint8_t i = 0; i < JSON_FIXED_BUFFER_SIZE; i++){
     69a:	2a 32       	cpi	r18, 0x2A	; 42
     69c:	31 05       	cpc	r19, r1
     69e:	09 f0       	breq	.+2      	; 0x6a2 <main+0x1c0>
     6a0:	72 cf       	rjmp	.-284    	; 0x586 <main+0xa4>
				OVERFLOW MODE: The timed-pulse output changes to overflow mode when the flow rate command does not fall into any 
								of the specified region. The output is set to default mode (10Hz, 50% Duty Cycle).    
				*/
					
				// Finished reading through the buffer...
				numerical_req = (digitized_req[0]-'0') * 100 + (digitized_req[1]-'0') * 10 + (digitized_req[2]-'0');
     6a2:	2f 85       	ldd	r18, Y+15	; 0x0f
     6a4:	82 2f       	mov	r24, r18
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	c0 97       	sbiw	r24, 0x30	; 48
     6aa:	a4 e6       	ldi	r26, 0x64	; 100
     6ac:	a8 9f       	mul	r26, r24
     6ae:	20 01       	movw	r4, r0
     6b0:	a9 9f       	mul	r26, r25
     6b2:	50 0c       	add	r5, r0
     6b4:	11 24       	eor	r1, r1
     6b6:	bd 85       	ldd	r27, Y+13	; 0x0d
     6b8:	8b 2f       	mov	r24, r27
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	c0 97       	sbiw	r24, 0x30	; 48
     6be:	9c 01       	movw	r18, r24
     6c0:	22 0f       	add	r18, r18
     6c2:	33 1f       	adc	r19, r19
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	88 0f       	add	r24, r24
     6ca:	99 1f       	adc	r25, r25
     6cc:	88 0f       	add	r24, r24
     6ce:	99 1f       	adc	r25, r25
     6d0:	82 0f       	add	r24, r18
     6d2:	93 1f       	adc	r25, r19
     6d4:	84 0d       	add	r24, r4
     6d6:	95 1d       	adc	r25, r5
     6d8:	ee 85       	ldd	r30, Y+14	; 0x0e
     6da:	4e 2e       	mov	r4, r30
     6dc:	51 2c       	mov	r5, r1
     6de:	f0 e3       	ldi	r31, 0x30	; 48
     6e0:	4f 1a       	sub	r4, r31
     6e2:	51 08       	sbc	r5, r1
     6e4:	48 0e       	add	r4, r24
     6e6:	59 1e       	adc	r5, r25
				// Apply new operating condition to the machine
				// Only change stroke frequency when REQ is acquired...
				if(req_found){
     6e8:	33 20       	and	r3, r3
     6ea:	09 f4       	brne	.+2      	; 0x6ee <main+0x20c>
     6ec:	89 c0       	rjmp	.+274    	; 0x800 <main+0x31e>
					// If command is "MAXIMUM OUTPUT"...
					if(numerical_req == TIMER_MAX){
     6ee:	1f ef       	ldi	r17, 0xFF	; 255
     6f0:	41 16       	cp	r4, r17
     6f2:	51 04       	cpc	r5, r1
     6f4:	51 f4       	brne	.+20     	; 0x70a <main+0x228>
						PULSE_0_REACTIVATE_TIME = 133;
     6f6:	25 e8       	ldi	r18, 0x85	; 133
     6f8:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 67;
     6fc:	83 e4       	ldi	r24, 0x43	; 67
     6fe:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = 34;
     702:	92 e2       	ldi	r25, 0x22	; 34
     704:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <PULSE_KILL_TIME>
     708:	7b c0       	rjmp	.+246    	; 0x800 <main+0x31e>
					}
					// If command is "NO OUTPUT"...
					else if(numerical_req == TIMER_LOW){
     70a:	41 14       	cp	r4, r1
     70c:	51 04       	cpc	r5, r1
     70e:	49 f4       	brne	.+18     	; 0x722 <main+0x240>
						PULSE_0_REACTIVATE_TIME = 200;
     710:	a8 ec       	ldi	r26, 0xC8	; 200
     712:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 100;
     716:	b4 e6       	ldi	r27, 0x64	; 100
     718:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = 0;
     71c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <PULSE_KILL_TIME>
     720:	6f c0       	rjmp	.+222    	; 0x800 <main+0x31e>
					}
					// If command is between 1 to 177, set frequency to 10Hz, calculate the DUTY CYCLE equivalent...
					else if(numerical_req > TIMER_LOW && numerical_req != TIMER_LOW && numerical_req <= TIMER_LOW_FLOW){
     722:	c2 01       	movw	r24, r4
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	81 3b       	cpi	r24, 0xB1	; 177
     728:	91 05       	cpc	r25, r1
     72a:	60 f5       	brcc	.+88     	; 0x784 <main+0x2a2>
						PULSE_0_REACTIVATE_TIME = 200;
     72c:	e8 ec       	ldi	r30, 0xC8	; 200
     72e:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 100;
     732:	f4 e6       	ldi	r31, 0x64	; 100
     734:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = ((double)(0.3 * numerical_req) * PULSE_0_REACTIVATE_TIME)/200;
     738:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     73c:	b2 01       	movw	r22, r4
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 ee 06 	call	0xddc	; 0xddc <__floatunsisf>
     746:	2a e9       	ldi	r18, 0x9A	; 154
     748:	39 e9       	ldi	r19, 0x99	; 153
     74a:	49 e9       	ldi	r20, 0x99	; 153
     74c:	5e e3       	ldi	r21, 0x3E	; 62
     74e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulsf3>
     752:	6b 01       	movw	r12, r22
     754:	7c 01       	movw	r14, r24
     756:	61 2f       	mov	r22, r17
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 f0 06 	call	0xde0	; 0xde0 <__floatsisf>
     762:	9b 01       	movw	r18, r22
     764:	ac 01       	movw	r20, r24
     766:	c7 01       	movw	r24, r14
     768:	b6 01       	movw	r22, r12
     76a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulsf3>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	48 e4       	ldi	r20, 0x48	; 72
     774:	53 e4       	ldi	r21, 0x43	; 67
     776:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__divsf3>
     77a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fixunssfsi>
     77e:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <PULSE_KILL_TIME>
     782:	3e c0       	rjmp	.+124    	; 0x800 <main+0x31e>
					}
					// If command is between 178 to 254, set frequency to 15Hz, calculate the DUTY CYCLE equivalent...
					else if(numerical_req < TIMER_MAX && numerical_req != TIMER_MAX && numerical_req >= TIMER_HIGH_FLOW){
     784:	c2 01       	movw	r24, r4
     786:	82 5b       	subi	r24, 0xB2	; 178
     788:	91 09       	sbc	r25, r1
     78a:	8d 34       	cpi	r24, 0x4D	; 77
     78c:	91 05       	cpc	r25, r1
     78e:	78 f5       	brcc	.+94     	; 0x7ee <main+0x30c>
						PULSE_0_REACTIVATE_TIME = 133;
     790:	0f 2e       	mov	r0, r31
     792:	f5 e8       	ldi	r31, 0x85	; 133
     794:	ff 2e       	mov	r15, r31
     796:	f0 2d       	mov	r31, r0
     798:	f0 92 10 01 	sts	0x0110, r15	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 67;
     79c:	13 e4       	ldi	r17, 0x43	; 67
     79e:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = ((double)(0.3 * numerical_req) * PULSE_0_REACTIVATE_TIME)/200; //need to update this line... does more duty cycle produce more stroke distance?		
     7a2:	10 91 10 01 	lds	r17, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     7a6:	b2 01       	movw	r22, r4
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 ee 06 	call	0xddc	; 0xddc <__floatunsisf>
     7b0:	2a e9       	ldi	r18, 0x9A	; 154
     7b2:	39 e9       	ldi	r19, 0x99	; 153
     7b4:	49 e9       	ldi	r20, 0x99	; 153
     7b6:	5e e3       	ldi	r21, 0x3E	; 62
     7b8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulsf3>
     7bc:	6b 01       	movw	r12, r22
     7be:	7c 01       	movw	r14, r24
     7c0:	61 2f       	mov	r22, r17
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 f0 06 	call	0xde0	; 0xde0 <__floatsisf>
     7cc:	9b 01       	movw	r18, r22
     7ce:	ac 01       	movw	r20, r24
     7d0:	c7 01       	movw	r24, r14
     7d2:	b6 01       	movw	r22, r12
     7d4:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulsf3>
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	48 e4       	ldi	r20, 0x48	; 72
     7de:	53 e4       	ldi	r21, 0x43	; 67
     7e0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__divsf3>
     7e4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fixunssfsi>
     7e8:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <PULSE_KILL_TIME>
     7ec:	09 c0       	rjmp	.+18     	; 0x800 <main+0x31e>
					}
					// If command is invalid, reset to default frequency...
					else{
						PULSE_0_REACTIVATE_TIME = 80;
     7ee:	20 e5       	ldi	r18, 0x50	; 80
     7f0:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <PULSE_0_REACTIVATE_TIME>
						PULSE_2_START_TIME = 40;
     7f4:	88 e2       	ldi	r24, 0x28	; 40
     7f6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <PULSE_2_START_TIME>
						PULSE_KILL_TIME = 20;
     7fa:	94 e1       	ldi	r25, 0x14	; 20
     7fc:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <PULSE_KILL_TIME>
				
				When no "Req" was defined, or if "Req" was greater than 256 in the master-slave input, the corresponding report 
				will return "000". Otherwise, the program will return   
				*/
				// Analog to Digital conversion on the ADC, and display its output to the PuTTy.
				double coil_voltage = calculate_voltage(adc_digitize(raw_ADC_output_PC0));
     800:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <raw_ADC_output_PC0>
     804:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <raw_ADC_output_PC0+0x1>
     808:	0e 94 02 01 	call	0x204	; 0x204 <adc_digitize>
     80c:	0e 94 14 01 	call	0x228	; 0x228 <calculate_voltage>
     810:	69 87       	std	Y+9, r22	; 0x09
     812:	7a 87       	std	Y+10, r23	; 0x0a
     814:	8b 87       	std	Y+11, r24	; 0x0b
     816:	19 2f       	mov	r17, r25
				double coil_current = calculate_current(adc_digitize(raw_ADC_output_PC5));
     818:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <raw_ADC_output_PC5>
     81c:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <raw_ADC_output_PC5+0x1>
     820:	0e 94 02 01 	call	0x204	; 0x204 <adc_digitize>
     824:	0e 94 1b 01 	call	0x236	; 0x236 <calculate_current>
     828:	4b 01       	movw	r8, r22
     82a:	5c 01       	movw	r10, r24
				double expected_power = calculate_power(coil_voltage, debug_COIL_CURRENT, PULSE_KILL_TIME, PULSE_2_START_TIME);
     82c:	e0 90 0f 01 	lds	r14, 0x010F	; 0x80010f <PULSE_2_START_TIME>
     830:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e0       	ldi	r20, 0x00	; 0
     83a:	5f e3       	ldi	r21, 0x3F	; 63
     83c:	b9 85       	ldd	r27, Y+9	; 0x09
     83e:	aa 85       	ldd	r26, Y+10	; 0x0a
     840:	fb 85       	ldd	r31, Y+11	; 0x0b
     842:	6b 2f       	mov	r22, r27
     844:	7a 2f       	mov	r23, r26
     846:	8f 2f       	mov	r24, r31
     848:	91 2f       	mov	r25, r17
     84a:	0e 94 22 01 	call	0x244	; 0x244 <calculate_power>
     84e:	6b 01       	movw	r12, r22
     850:	7c 01       	movw	r14, r24
					bool error_collision = false;
					bool error_jammed = false;
				#endif
				
				// Fetch Motor ID from the buffer...
				uint8_t MOTOR_ID = RX_buffer[2] - '0';
     852:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <RX_buffer+0x2>
     856:	80 53       	subi	r24, 0x30	; 48
     858:	88 8b       	std	Y+16, r24	; 0x10
				// Fetch frequency from pulse reactivation time...
				double frequency = (1 / (0.5 * PULSE_0_REACTIVATE_TIME)) * 1000;
     85a:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 f0 06 	call	0xde0	; 0xde0 <__floatsisf>
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	5f e3       	ldi	r21, 0x3F	; 63
     870:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulsf3>
     874:	9b 01       	movw	r18, r22
     876:	ac 01       	movw	r20, r24
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	80 e8       	ldi	r24, 0x80	; 128
     87e:	9f e3       	ldi	r25, 0x3F	; 63
     880:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__divsf3>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	4a e7       	ldi	r20, 0x7A	; 122
     88a:	54 e4       	ldi	r21, 0x44	; 68
     88c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulsf3>
     890:	6d 83       	std	Y+5, r22	; 0x05
     892:	7e 83       	std	Y+6, r23	; 0x06
     894:	8f 83       	std	Y+7, r24	; 0x07
     896:	98 87       	std	Y+8, r25	; 0x08
				// Fetch Current Flow Rate from operating conditions...
				uint8_t Current_FL;
				// If the motor is running at low output mode OR no output mode...
				if(frequency <= 10){
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e2       	ldi	r20, 0x20	; 32
     89e:	51 e4       	ldi	r21, 0x41	; 65
     8a0:	0e 94 48 06 	call	0xc90	; 0xc90 <__cmpsf2>
     8a4:	18 16       	cp	r1, r24
     8a6:	54 f1       	brlt	.+84     	; 0x8fc <main+0x41a>
					Current_FL = (200 * PULSE_KILL_TIME) / (0.3 * PULSE_0_REACTIVATE_TIME);
     8a8:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     8ac:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     8b0:	a8 ec       	ldi	r26, 0xC8	; 200
     8b2:	a6 9f       	mul	r26, r22
     8b4:	b0 01       	movw	r22, r0
     8b6:	11 24       	eor	r1, r1
     8b8:	07 2e       	mov	r0, r23
     8ba:	00 0c       	add	r0, r0
     8bc:	88 0b       	sbc	r24, r24
     8be:	99 0b       	sbc	r25, r25
     8c0:	0e 94 f0 06 	call	0xde0	; 0xde0 <__floatsisf>
     8c4:	69 83       	std	Y+1, r22	; 0x01
     8c6:	7a 83       	std	Y+2, r23	; 0x02
     8c8:	8b 83       	std	Y+3, r24	; 0x03
     8ca:	9c 83       	std	Y+4, r25	; 0x04
     8cc:	60 2f       	mov	r22, r16
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 f0 06 	call	0xde0	; 0xde0 <__floatsisf>
     8d8:	2a e9       	ldi	r18, 0x9A	; 154
     8da:	39 e9       	ldi	r19, 0x99	; 153
     8dc:	49 e9       	ldi	r20, 0x99	; 153
     8de:	5e e3       	ldi	r21, 0x3E	; 62
     8e0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulsf3>
     8e4:	9b 01       	movw	r18, r22
     8e6:	ac 01       	movw	r20, r24
     8e8:	69 81       	ldd	r22, Y+1	; 0x01
     8ea:	7a 81       	ldd	r23, Y+2	; 0x02
     8ec:	8b 81       	ldd	r24, Y+3	; 0x03
     8ee:	9c 81       	ldd	r25, Y+4	; 0x04
     8f0:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__divsf3>
     8f4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fixunssfsi>
     8f8:	69 83       	std	Y+1, r22	; 0x01
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__stack+0x73>
				}
				// If the motor is running at high output mode OR maximum output mode..
				else if(frequency >= 15){
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 e7       	ldi	r20, 0x70	; 112
     902:	51 e4       	ldi	r21, 0x41	; 65
     904:	6d 81       	ldd	r22, Y+5	; 0x05
     906:	7e 81       	ldd	r23, Y+6	; 0x06
     908:	8f 81       	ldd	r24, Y+7	; 0x07
     90a:	98 85       	ldd	r25, Y+8	; 0x08
     90c:	0e 94 a0 07 	call	0xf40	; 0xf40 <__gesf2>
     910:	88 23       	and	r24, r24
     912:	7c f1       	brlt	.+94     	; 0x972 <__stack+0x73>
					Current_FL = (200 * PULSE_KILL_TIME) / (0.3 * PULSE_0_REACTIVATE_TIME) + 85; // This needs to be updated as equations for HIGH output mode becomes complete...
     914:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     918:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     91c:	b8 ec       	ldi	r27, 0xC8	; 200
     91e:	b6 9f       	mul	r27, r22
     920:	b0 01       	movw	r22, r0
     922:	11 24       	eor	r1, r1
     924:	07 2e       	mov	r0, r23
     926:	00 0c       	add	r0, r0
     928:	88 0b       	sbc	r24, r24
     92a:	99 0b       	sbc	r25, r25
     92c:	0e 94 f0 06 	call	0xde0	; 0xde0 <__floatsisf>
     930:	69 83       	std	Y+1, r22	; 0x01
     932:	7a 83       	std	Y+2, r23	; 0x02
     934:	8b 83       	std	Y+3, r24	; 0x03
     936:	9c 83       	std	Y+4, r25	; 0x04
     938:	60 2f       	mov	r22, r16
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 f0 06 	call	0xde0	; 0xde0 <__floatsisf>
     944:	2a e9       	ldi	r18, 0x9A	; 154
     946:	39 e9       	ldi	r19, 0x99	; 153
     948:	49 e9       	ldi	r20, 0x99	; 153
     94a:	5e e3       	ldi	r21, 0x3E	; 62
     94c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__mulsf3>
     950:	9b 01       	movw	r18, r22
     952:	ac 01       	movw	r20, r24
     954:	69 81       	ldd	r22, Y+1	; 0x01
     956:	7a 81       	ldd	r23, Y+2	; 0x02
     958:	8b 81       	ldd	r24, Y+3	; 0x03
     95a:	9c 81       	ldd	r25, Y+4	; 0x04
     95c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__divsf3>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	4a ea       	ldi	r20, 0xAA	; 170
     966:	52 e4       	ldi	r21, 0x42	; 66
     968:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <__addsf3>
     96c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__fixunssfsi>
     970:	69 83       	std	Y+1, r22	; 0x01
				}
				
				// Transmit Report...
				usart_TX_data(MOTOR_ID, Current_FL, numerical_req, frequency, expected_power, coil_current, coil_voltage, req_found, clear_error, error_collision, error_jammed);
     972:	1f 92       	push	r1
     974:	1f 92       	push	r1
     976:	ec 85       	ldd	r30, Y+12	; 0x0c
     978:	ef 93       	push	r30
     97a:	3f 92       	push	r3
     97c:	1f 93       	push	r17
     97e:	1b 85       	ldd	r17, Y+11	; 0x0b
     980:	1f 93       	push	r17
     982:	1a 85       	ldd	r17, Y+10	; 0x0a
     984:	1f 93       	push	r17
     986:	19 85       	ldd	r17, Y+9	; 0x09
     988:	1f 93       	push	r17
     98a:	0d 81       	ldd	r16, Y+5	; 0x05
     98c:	1e 81       	ldd	r17, Y+6	; 0x06
     98e:	2f 81       	ldd	r18, Y+7	; 0x07
     990:	38 85       	ldd	r19, Y+8	; 0x08
     992:	a2 01       	movw	r20, r4
     994:	69 81       	ldd	r22, Y+1	; 0x01
     996:	88 89       	ldd	r24, Y+16	; 0x10
     998:	0e 94 8a 01 	call	0x314	; 0x314 <usart_TX_data>
				// When all the procedures with the sequence is complete...
				RX_sequence_complete = false;
     99c:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <__data_end>
			bool clear_error = false;
			
			uint16_t numerical_req;
			uint8_t digitized_req[3];
			//Verify Motor ID...
			if(RX_buffer[0] == '{' && RX_buffer[1] == '"' && RX_buffer[2] == '3' && RX_buffer[3] == '"' && RX_buffer[4] == ':'){
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	10 c0       	rjmp	.+32     	; 0x9cc <__stack+0xcd>
				// When all the procedures with the sequence is complete...
				RX_sequence_complete = false;
			}
			else{
				// Wrong MOTOR ID is provided. Print Error Message.
				printf_value = RX_buffer[2];
     9ac:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <RX_buffer+0x2>
				printf("VIOLATION: WRONG MOTOR ID '%d'\n", printf_value -'0');
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	c0 97       	sbiw	r24, 0x30	; 48
     9b4:	9f 93       	push	r25
     9b6:	8f 93       	push	r24
     9b8:	7f 92       	push	r7
     9ba:	6f 92       	push	r6
     9bc:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <printf>
				RX_sequence_complete = false;
     9c0:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <__data_end>
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
			}
		}
		#ifdef XPLAINED_MINI_LED_STROBE
			PORTB ^= (1 << PB5);
     9cc:	85 b1       	in	r24, 0x05	; 5
     9ce:	82 25       	eor	r24, r2
     9d0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d2:	9f ef       	ldi	r25, 0xFF	; 255
     9d4:	a1 ee       	ldi	r26, 0xE1	; 225
     9d6:	b4 e0       	ldi	r27, 0x04	; 4
     9d8:	91 50       	subi	r25, 0x01	; 1
     9da:	a0 40       	sbci	r26, 0x00	; 0
     9dc:	b0 40       	sbci	r27, 0x00	; 0
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <__stack+0xd9>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <__stack+0xe3>
     9e2:	00 00       	nop
     9e4:	a6 cd       	rjmp	.-1204   	; 0x532 <main+0x50>

000009e6 <__vector_18>:
a. The received data (an ASCII character) is stored in an unsigned character buffer (usartRX).
b. The index counter for the buffer is incremented for the upcoming data.
c. On the 28th count (i.e. one sequence of master-slave communication is complete), reset the index position to overwrite the
	first character of the buffer.
	*/
ISR(USART_RX_vect){
     9e6:	1f 92       	push	r1
     9e8:	0f 92       	push	r0
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	0f 92       	push	r0
     9ee:	11 24       	eor	r1, r1
     9f0:	8f 93       	push	r24
     9f2:	ef 93       	push	r30
     9f4:	ff 93       	push	r31
	// Reception is complete... Need to find a way to extract information.
	if(usart_RX_index != JSON_FIXED_BUFFER_SIZE - 1){			// Starting from index of zero, the buffer will be filled with 
     9f6:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <usart_RX_index>
     9fa:	85 32       	cpi	r24, 0x25	; 37
     9fc:	71 f0       	breq	.+28     	; 0xa1a <__vector_18+0x34>
		RX_buffer[usart_RX_index] = UDR0;						// transmission up to 37th index.
     9fe:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <usart_RX_index>
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a08:	e4 5e       	subi	r30, 0xE4	; 228
     a0a:	fc 4f       	sbci	r31, 0xFC	; 252
     a0c:	80 83       	st	Z, r24
		usart_RX_index++;
     a0e:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <usart_RX_index>
     a12:	8f 5f       	subi	r24, 0xFF	; 255
     a14:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <usart_RX_index>
     a18:	11 c0       	rjmp	.+34     	; 0xa3c <__vector_18+0x56>
	}
	else if (usart_RX_index == JSON_FIXED_BUFFER_SIZE - 1){
     a1a:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <usart_RX_index>
     a1e:	85 32       	cpi	r24, 0x25	; 37
     a20:	69 f4       	brne	.+26     	; 0xa3c <__vector_18+0x56>
		// If the index counter reaches 38, which is larger than the maximum length of the fixed JSON RX...
		RX_buffer[usart_RX_index] = UDR0;						 // Record the first bit of the RX to the buffer...
     a22:	e0 91 0d 03 	lds	r30, 0x030D	; 0x80030d <usart_RX_index>
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a2c:	e4 5e       	subi	r30, 0xE4	; 228
     a2e:	fc 4f       	sbci	r31, 0xFC	; 252
     a30:	80 83       	st	Z, r24
		RX_sequence_complete = true;							 // Flag to main loop that one cycle of RX is complete.
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <__data_end>
		usart_RX_index = 0;										 // Reset the Index back to zero (hence allow new sequence of RX)...
     a38:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <usart_RX_index>
	}
		
}
     a3c:	ff 91       	pop	r31
     a3e:	ef 91       	pop	r30
     a40:	8f 91       	pop	r24
     a42:	0f 90       	pop	r0
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	0f 90       	pop	r0
     a48:	1f 90       	pop	r1
     a4a:	18 95       	reti

00000a4c <__vector_7>:
/* The following conditions are critical to correct operation of the system. 
a. When macro ENABLE_PRINTF is defined, Pulse Modulation will behave unexpectedly due to long delay between global interrupt 
	disable and global interrupt enable caused by printf function. To ensure correct functionality of the Pulse Modulation, 
	Macro ENABLE_PRINTF must first be undefined.*/
	
ISR(TIMER2_COMPA_vect){
     a4c:	1f 92       	push	r1
     a4e:	0f 92       	push	r0
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	0f 92       	push	r0
     a54:	11 24       	eor	r1, r1
     a56:	8f 93       	push	r24
     a58:	9f 93       	push	r25
	if(MATCH_COUNTER_T2 == PULSE_0_START_TIME){
     a5a:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <MATCH_COUNTER_T2>
     a5e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <PULSE_0_START_TIME>
     a62:	98 13       	cpse	r25, r24
     a64:	03 c0       	rjmp	.+6      	; 0xa6c <__vector_7+0x20>
		PORTB &= ~(1 << PB3);						// Deactivate Output on PB3
     a66:	2b 98       	cbi	0x05, 3	; 5
		PORTD |= (1 << PD6);						// Activate Output on PD6
     a68:	5e 9a       	sbi	0x0b, 6	; 11
     a6a:	15 c0       	rjmp	.+42     	; 0xa96 <__vector_7+0x4a>
	}
	else if(MATCH_COUNTER_T2 == PULSE_2_START_TIME){
     a6c:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <MATCH_COUNTER_T2>
     a70:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <PULSE_2_START_TIME>
     a74:	98 13       	cpse	r25, r24
     a76:	03 c0       	rjmp	.+6      	; 0xa7e <__vector_7+0x32>
		PORTD &= ~(1 << PD6);						// Deactivate Output on PD6
     a78:	5e 98       	cbi	0x0b, 6	; 11
		PORTB |= (1 << PB3);						// Activate Output on PB3
     a7a:	2b 9a       	sbi	0x05, 3	; 5
     a7c:	0c c0       	rjmp	.+24     	; 0xa96 <__vector_7+0x4a>
	}
	else if(MATCH_COUNTER_T2 == PULSE_0_REACTIVATE_TIME){
     a7e:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <MATCH_COUNTER_T2>
     a82:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <PULSE_0_REACTIVATE_TIME>
     a86:	98 13       	cpse	r25, r24
     a88:	06 c0       	rjmp	.+12     	; 0xa96 <__vector_7+0x4a>
		PORTB &= ~(1 << PB3);						// Deactivate Output on PB3
     a8a:	2b 98       	cbi	0x05, 3	; 5
		PORTD |=  (1 << PD6);						// Activate Output on PD6
     a8c:	5e 9a       	sbi	0x0b, 6	; 11
		MATCH_COUNTER_T2 = PULSE_0_START_TIME;		// Reset counter to zero
     a8e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <PULSE_0_START_TIME>
     a92:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <MATCH_COUNTER_T2>
	}
}
     a96:	9f 91       	pop	r25
     a98:	8f 91       	pop	r24
     a9a:	0f 90       	pop	r0
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	0f 90       	pop	r0
     aa0:	1f 90       	pop	r1
     aa2:	18 95       	reti

00000aa4 <__vector_8>:

ISR(TIMER2_COMPB_vect){
     aa4:	1f 92       	push	r1
     aa6:	0f 92       	push	r0
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	0f 92       	push	r0
     aac:	11 24       	eor	r1, r1
     aae:	2f 93       	push	r18
     ab0:	3f 93       	push	r19
     ab2:	4f 93       	push	r20
     ab4:	8f 93       	push	r24
     ab6:	9f 93       	push	r25
	if(MATCH_COUNTER_T2 == PULSE_KILL_TIME){
     ab8:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <MATCH_COUNTER_T2>
     abc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     ac0:	98 13       	cpse	r25, r24
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <__vector_8+0x22>
		PORTD &= ~(1 << PD6);						// Deactivate Output PD6
     ac4:	5e 98       	cbi	0x0b, 6	; 11
	}
	if(MATCH_COUNTER_T2 == PULSE_KILL_TIME + PULSE_2_START_TIME){
     ac6:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <MATCH_COUNTER_T2>
     aca:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <PULSE_KILL_TIME>
     ace:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <PULSE_2_START_TIME>
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	84 0f       	add	r24, r20
     ad8:	91 1d       	adc	r25, r1
     ada:	28 17       	cp	r18, r24
     adc:	39 07       	cpc	r19, r25
     ade:	09 f4       	brne	.+2      	; 0xae2 <__vector_8+0x3e>
		PORTB &= ~(1 << PB3);
     ae0:	2b 98       	cbi	0x05, 3	; 5
	}
	MATCH_COUNTER_T2++;
     ae2:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <MATCH_COUNTER_T2>
     ae6:	8f 5f       	subi	r24, 0xFF	; 255
     ae8:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <MATCH_COUNTER_T2>
}
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	4f 91       	pop	r20
     af2:	3f 91       	pop	r19
     af4:	2f 91       	pop	r18
     af6:	0f 90       	pop	r0
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	0f 90       	pop	r0
     afc:	1f 90       	pop	r1
     afe:	18 95       	reti

00000b00 <__vector_21>:
	
/*** Analog to Digital Conversion Complete Interrupt ***/
ISR(ADC_vect){
     b00:	1f 92       	push	r1
     b02:	0f 92       	push	r0
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	0f 92       	push	r0
     b08:	11 24       	eor	r1, r1
     b0a:	8f 93       	push	r24
     b0c:	9f 93       	push	r25
     b0e:	ef 93       	push	r30
     b10:	ff 93       	push	r31
	/*** WARNING ***/
	/* The following conditions are critical to correct operation of the system.
	a. As of 27.09.18. the feature to sample 24 points across the input waveform is not yet tested. */
	#ifdef ADC_DEBUG_MODE
	// Debugger Mode...
		if (ADC_next_channel == ADC_COIL_VOLTAGE_CHANNEL){
     b12:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <ADC_next_channel>
     b16:	81 11       	cpse	r24, r1
     b18:	16 c0       	rjmp	.+44     	; 0xb46 <__vector_21+0x46>
			raw_ADC_output_PC0 = ADC;
     b1a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     b1e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     b22:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <raw_ADC_output_PC0+0x1>
     b26:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <raw_ADC_output_PC0>
			debug_ADC_channel = ADC_next_channel;
     b2a:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <debug_ADC_channel>
			ADC_next_channel = ADC_COIL_CURRENT_CHANNEL;	// Next conversion is coil current shunt
     b2e:	85 e0       	ldi	r24, 0x05	; 5
     b30:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <ADC_next_channel>
			ADMUX &= 0xf0;									// Reset to Channel 0
     b34:	ec e7       	ldi	r30, 0x7C	; 124
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	80 81       	ld	r24, Z
     b3a:	80 7f       	andi	r24, 0xF0	; 240
     b3c:	80 83       	st	Z, r24
			ADMUX |= 0x05;									// Set to Channel 5. (coil current shunt)
     b3e:	80 81       	ld	r24, Z
     b40:	85 60       	ori	r24, 0x05	; 5
     b42:	80 83       	st	Z, r24
     b44:	16 c0       	rjmp	.+44     	; 0xb72 <__vector_21+0x72>
		}
		else if(ADC_next_channel == ADC_COIL_CURRENT_CHANNEL){
     b46:	85 30       	cpi	r24, 0x05	; 5
     b48:	a1 f4       	brne	.+40     	; 0xb72 <__vector_21+0x72>
			raw_ADC_output_PC5 = ADC;
     b4a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     b4e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     b52:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <raw_ADC_output_PC5+0x1>
     b56:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <raw_ADC_output_PC5>
			debug_ADC_channel = ADC_next_channel;
     b5a:	85 e0       	ldi	r24, 0x05	; 5
     b5c:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <debug_ADC_channel>
			ADC_next_channel = ADC_COIL_VOLTAGE_CHANNEL;	// Next conversion is back to coil voltage shunt
     b60:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <ADC_next_channel>
			ADMUX &= 0xf0;									// Reset to Channel 0.
     b64:	ec e7       	ldi	r30, 0x7C	; 124
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 7f       	andi	r24, 0xF0	; 240
     b6c:	80 83       	st	Z, r24
			ADMUX |= 0x00;									// Set to Channel 0. (coil voltage shunt)
     b6e:	80 81       	ld	r24, Z
     b70:	80 83       	st	Z, r24
		}
		ADCSRA |= (1 << ADSC);								// Start a new conversion...
     b72:	ea e7       	ldi	r30, 0x7A	; 122
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	80 64       	ori	r24, 0x40	; 64
     b7a:	80 83       	st	Z, r24
			ADMUX |= 0x05;									// Set to Channel 5. (coil current shunt)
		}
		ADCSRA |= (1 << ADSC);								// Start a new conversion...
	#endif
	
}
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	9f 91       	pop	r25
     b82:	8f 91       	pop	r24
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	0f 90       	pop	r0
     b8a:	1f 90       	pop	r1
     b8c:	18 95       	reti

00000b8e <timer2_init>:
	// Operate at Normal Timer Mode...
	/*** TCCR2B: TC2 Control Register B ***/
	/** Prescaler Selection **/
	#ifdef XPLAINED_MINI_MODE
	// The program is being tested on a Xplained Mini Board, and it is running at 16MHz.
		TCCR2B |=  (1 << CS22);			// Set prescaler to 64
     b8e:	e1 eb       	ldi	r30, 0xB1	; 177
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	84 60       	ori	r24, 0x04	; 4
     b96:	80 83       	st	Z, r24
		TCCR2B &= ~(1 << CS21);			// @F_CPU 16 MHz... F(Timer) = 250KHz
     b98:	80 81       	ld	r24, Z
     b9a:	8d 7f       	andi	r24, 0xFD	; 253
     b9c:	80 83       	st	Z, r24
		TCCR2B &= ~(1 << CS20);			
     b9e:	80 81       	ld	r24, Z
     ba0:	8e 7f       	andi	r24, 0xFE	; 254
     ba2:	80 83       	st	Z, r24
		TCCR2B |=  (1 << CS22);			// Set prescaler to 32
		TCCR2B &= ~(1 << CS21);			// @F_CPU 8 MHz... F(Timer) = 250KHz
		TCCR2B &= ~(1 << CS20);		    
	#endif
	/*** TIMSK0: TC0 Interrupt Mask Register ***/
	TIMSK2 |= (1 << OCIE2A);		// Timer/Counter2 Output Compare A Match Interrupt Enabled
     ba4:	e0 e7       	ldi	r30, 0x70	; 112
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	82 60       	ori	r24, 0x02	; 2
     bac:	80 83       	st	Z, r24
	TIMSK2 |= (1 << OCIE2B);		// Timer/Counter2 Output Compare B Match Interrupt Enabled
     bae:	80 81       	ld	r24, Z
     bb0:	84 60       	ori	r24, 0x04	; 4
     bb2:	80 83       	st	Z, r24
     bb4:	08 95       	ret

00000bb6 <__subsf3>:
     bb6:	50 58       	subi	r21, 0x80	; 128

00000bb8 <__addsf3>:
     bb8:	bb 27       	eor	r27, r27
     bba:	aa 27       	eor	r26, r26
     bbc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__addsf3x>
     bc0:	0c 94 66 07 	jmp	0xecc	; 0xecc <__fp_round>
     bc4:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__fp_pscA>
     bc8:	38 f0       	brcs	.+14     	; 0xbd8 <__addsf3+0x20>
     bca:	0e 94 5f 07 	call	0xebe	; 0xebe <__fp_pscB>
     bce:	20 f0       	brcs	.+8      	; 0xbd8 <__addsf3+0x20>
     bd0:	39 f4       	brne	.+14     	; 0xbe0 <__addsf3+0x28>
     bd2:	9f 3f       	cpi	r25, 0xFF	; 255
     bd4:	19 f4       	brne	.+6      	; 0xbdc <__addsf3+0x24>
     bd6:	26 f4       	brtc	.+8      	; 0xbe0 <__addsf3+0x28>
     bd8:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__fp_nan>
     bdc:	0e f4       	brtc	.+2      	; 0xbe0 <__addsf3+0x28>
     bde:	e0 95       	com	r30
     be0:	e7 fb       	bst	r30, 7
     be2:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__fp_inf>

00000be6 <__addsf3x>:
     be6:	e9 2f       	mov	r30, r25
     be8:	0e 94 77 07 	call	0xeee	; 0xeee <__fp_split3>
     bec:	58 f3       	brcs	.-42     	; 0xbc4 <__addsf3+0xc>
     bee:	ba 17       	cp	r27, r26
     bf0:	62 07       	cpc	r22, r18
     bf2:	73 07       	cpc	r23, r19
     bf4:	84 07       	cpc	r24, r20
     bf6:	95 07       	cpc	r25, r21
     bf8:	20 f0       	brcs	.+8      	; 0xc02 <__addsf3x+0x1c>
     bfa:	79 f4       	brne	.+30     	; 0xc1a <__addsf3x+0x34>
     bfc:	a6 f5       	brtc	.+104    	; 0xc66 <__addsf3x+0x80>
     bfe:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__fp_zero>
     c02:	0e f4       	brtc	.+2      	; 0xc06 <__addsf3x+0x20>
     c04:	e0 95       	com	r30
     c06:	0b 2e       	mov	r0, r27
     c08:	ba 2f       	mov	r27, r26
     c0a:	a0 2d       	mov	r26, r0
     c0c:	0b 01       	movw	r0, r22
     c0e:	b9 01       	movw	r22, r18
     c10:	90 01       	movw	r18, r0
     c12:	0c 01       	movw	r0, r24
     c14:	ca 01       	movw	r24, r20
     c16:	a0 01       	movw	r20, r0
     c18:	11 24       	eor	r1, r1
     c1a:	ff 27       	eor	r31, r31
     c1c:	59 1b       	sub	r21, r25
     c1e:	99 f0       	breq	.+38     	; 0xc46 <__addsf3x+0x60>
     c20:	59 3f       	cpi	r21, 0xF9	; 249
     c22:	50 f4       	brcc	.+20     	; 0xc38 <__addsf3x+0x52>
     c24:	50 3e       	cpi	r21, 0xE0	; 224
     c26:	68 f1       	brcs	.+90     	; 0xc82 <__addsf3x+0x9c>
     c28:	1a 16       	cp	r1, r26
     c2a:	f0 40       	sbci	r31, 0x00	; 0
     c2c:	a2 2f       	mov	r26, r18
     c2e:	23 2f       	mov	r18, r19
     c30:	34 2f       	mov	r19, r20
     c32:	44 27       	eor	r20, r20
     c34:	58 5f       	subi	r21, 0xF8	; 248
     c36:	f3 cf       	rjmp	.-26     	; 0xc1e <__addsf3x+0x38>
     c38:	46 95       	lsr	r20
     c3a:	37 95       	ror	r19
     c3c:	27 95       	ror	r18
     c3e:	a7 95       	ror	r26
     c40:	f0 40       	sbci	r31, 0x00	; 0
     c42:	53 95       	inc	r21
     c44:	c9 f7       	brne	.-14     	; 0xc38 <__addsf3x+0x52>
     c46:	7e f4       	brtc	.+30     	; 0xc66 <__addsf3x+0x80>
     c48:	1f 16       	cp	r1, r31
     c4a:	ba 0b       	sbc	r27, r26
     c4c:	62 0b       	sbc	r22, r18
     c4e:	73 0b       	sbc	r23, r19
     c50:	84 0b       	sbc	r24, r20
     c52:	ba f0       	brmi	.+46     	; 0xc82 <__addsf3x+0x9c>
     c54:	91 50       	subi	r25, 0x01	; 1
     c56:	a1 f0       	breq	.+40     	; 0xc80 <__addsf3x+0x9a>
     c58:	ff 0f       	add	r31, r31
     c5a:	bb 1f       	adc	r27, r27
     c5c:	66 1f       	adc	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	88 1f       	adc	r24, r24
     c62:	c2 f7       	brpl	.-16     	; 0xc54 <__addsf3x+0x6e>
     c64:	0e c0       	rjmp	.+28     	; 0xc82 <__addsf3x+0x9c>
     c66:	ba 0f       	add	r27, r26
     c68:	62 1f       	adc	r22, r18
     c6a:	73 1f       	adc	r23, r19
     c6c:	84 1f       	adc	r24, r20
     c6e:	48 f4       	brcc	.+18     	; 0xc82 <__addsf3x+0x9c>
     c70:	87 95       	ror	r24
     c72:	77 95       	ror	r23
     c74:	67 95       	ror	r22
     c76:	b7 95       	ror	r27
     c78:	f7 95       	ror	r31
     c7a:	9e 3f       	cpi	r25, 0xFE	; 254
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <__addsf3x+0x9a>
     c7e:	b0 cf       	rjmp	.-160    	; 0xbe0 <__addsf3+0x28>
     c80:	93 95       	inc	r25
     c82:	88 0f       	add	r24, r24
     c84:	08 f0       	brcs	.+2      	; 0xc88 <__addsf3x+0xa2>
     c86:	99 27       	eor	r25, r25
     c88:	ee 0f       	add	r30, r30
     c8a:	97 95       	ror	r25
     c8c:	87 95       	ror	r24
     c8e:	08 95       	ret

00000c90 <__cmpsf2>:
     c90:	0e 94 2b 07 	call	0xe56	; 0xe56 <__fp_cmp>
     c94:	08 f4       	brcc	.+2      	; 0xc98 <__cmpsf2+0x8>
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	08 95       	ret

00000c9a <__divsf3>:
     c9a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__divsf3x>
     c9e:	0c 94 66 07 	jmp	0xecc	; 0xecc <__fp_round>
     ca2:	0e 94 5f 07 	call	0xebe	; 0xebe <__fp_pscB>
     ca6:	58 f0       	brcs	.+22     	; 0xcbe <__divsf3+0x24>
     ca8:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__fp_pscA>
     cac:	40 f0       	brcs	.+16     	; 0xcbe <__divsf3+0x24>
     cae:	29 f4       	brne	.+10     	; 0xcba <__divsf3+0x20>
     cb0:	5f 3f       	cpi	r21, 0xFF	; 255
     cb2:	29 f0       	breq	.+10     	; 0xcbe <__divsf3+0x24>
     cb4:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__fp_inf>
     cb8:	51 11       	cpse	r21, r1
     cba:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_szero>
     cbe:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__fp_nan>

00000cc2 <__divsf3x>:
     cc2:	0e 94 77 07 	call	0xeee	; 0xeee <__fp_split3>
     cc6:	68 f3       	brcs	.-38     	; 0xca2 <__divsf3+0x8>

00000cc8 <__divsf3_pse>:
     cc8:	99 23       	and	r25, r25
     cca:	b1 f3       	breq	.-20     	; 0xcb8 <__divsf3+0x1e>
     ccc:	55 23       	and	r21, r21
     cce:	91 f3       	breq	.-28     	; 0xcb4 <__divsf3+0x1a>
     cd0:	95 1b       	sub	r25, r21
     cd2:	55 0b       	sbc	r21, r21
     cd4:	bb 27       	eor	r27, r27
     cd6:	aa 27       	eor	r26, r26
     cd8:	62 17       	cp	r22, r18
     cda:	73 07       	cpc	r23, r19
     cdc:	84 07       	cpc	r24, r20
     cde:	38 f0       	brcs	.+14     	; 0xcee <__divsf3_pse+0x26>
     ce0:	9f 5f       	subi	r25, 0xFF	; 255
     ce2:	5f 4f       	sbci	r21, 0xFF	; 255
     ce4:	22 0f       	add	r18, r18
     ce6:	33 1f       	adc	r19, r19
     ce8:	44 1f       	adc	r20, r20
     cea:	aa 1f       	adc	r26, r26
     cec:	a9 f3       	breq	.-22     	; 0xcd8 <__divsf3_pse+0x10>
     cee:	35 d0       	rcall	.+106    	; 0xd5a <__divsf3_pse+0x92>
     cf0:	0e 2e       	mov	r0, r30
     cf2:	3a f0       	brmi	.+14     	; 0xd02 <__divsf3_pse+0x3a>
     cf4:	e0 e8       	ldi	r30, 0x80	; 128
     cf6:	32 d0       	rcall	.+100    	; 0xd5c <__divsf3_pse+0x94>
     cf8:	91 50       	subi	r25, 0x01	; 1
     cfa:	50 40       	sbci	r21, 0x00	; 0
     cfc:	e6 95       	lsr	r30
     cfe:	00 1c       	adc	r0, r0
     d00:	ca f7       	brpl	.-14     	; 0xcf4 <__divsf3_pse+0x2c>
     d02:	2b d0       	rcall	.+86     	; 0xd5a <__divsf3_pse+0x92>
     d04:	fe 2f       	mov	r31, r30
     d06:	29 d0       	rcall	.+82     	; 0xd5a <__divsf3_pse+0x92>
     d08:	66 0f       	add	r22, r22
     d0a:	77 1f       	adc	r23, r23
     d0c:	88 1f       	adc	r24, r24
     d0e:	bb 1f       	adc	r27, r27
     d10:	26 17       	cp	r18, r22
     d12:	37 07       	cpc	r19, r23
     d14:	48 07       	cpc	r20, r24
     d16:	ab 07       	cpc	r26, r27
     d18:	b0 e8       	ldi	r27, 0x80	; 128
     d1a:	09 f0       	breq	.+2      	; 0xd1e <__divsf3_pse+0x56>
     d1c:	bb 0b       	sbc	r27, r27
     d1e:	80 2d       	mov	r24, r0
     d20:	bf 01       	movw	r22, r30
     d22:	ff 27       	eor	r31, r31
     d24:	93 58       	subi	r25, 0x83	; 131
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
     d28:	3a f0       	brmi	.+14     	; 0xd38 <__divsf3_pse+0x70>
     d2a:	9e 3f       	cpi	r25, 0xFE	; 254
     d2c:	51 05       	cpc	r21, r1
     d2e:	78 f0       	brcs	.+30     	; 0xd4e <__divsf3_pse+0x86>
     d30:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__fp_inf>
     d34:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_szero>
     d38:	5f 3f       	cpi	r21, 0xFF	; 255
     d3a:	e4 f3       	brlt	.-8      	; 0xd34 <__divsf3_pse+0x6c>
     d3c:	98 3e       	cpi	r25, 0xE8	; 232
     d3e:	d4 f3       	brlt	.-12     	; 0xd34 <__divsf3_pse+0x6c>
     d40:	86 95       	lsr	r24
     d42:	77 95       	ror	r23
     d44:	67 95       	ror	r22
     d46:	b7 95       	ror	r27
     d48:	f7 95       	ror	r31
     d4a:	9f 5f       	subi	r25, 0xFF	; 255
     d4c:	c9 f7       	brne	.-14     	; 0xd40 <__divsf3_pse+0x78>
     d4e:	88 0f       	add	r24, r24
     d50:	91 1d       	adc	r25, r1
     d52:	96 95       	lsr	r25
     d54:	87 95       	ror	r24
     d56:	97 f9       	bld	r25, 7
     d58:	08 95       	ret
     d5a:	e1 e0       	ldi	r30, 0x01	; 1
     d5c:	66 0f       	add	r22, r22
     d5e:	77 1f       	adc	r23, r23
     d60:	88 1f       	adc	r24, r24
     d62:	bb 1f       	adc	r27, r27
     d64:	62 17       	cp	r22, r18
     d66:	73 07       	cpc	r23, r19
     d68:	84 07       	cpc	r24, r20
     d6a:	ba 07       	cpc	r27, r26
     d6c:	20 f0       	brcs	.+8      	; 0xd76 <__divsf3_pse+0xae>
     d6e:	62 1b       	sub	r22, r18
     d70:	73 0b       	sbc	r23, r19
     d72:	84 0b       	sbc	r24, r20
     d74:	ba 0b       	sbc	r27, r26
     d76:	ee 1f       	adc	r30, r30
     d78:	88 f7       	brcc	.-30     	; 0xd5c <__divsf3_pse+0x94>
     d7a:	e0 95       	com	r30
     d7c:	08 95       	ret

00000d7e <__fixunssfsi>:
     d7e:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_splitA>
     d82:	88 f0       	brcs	.+34     	; 0xda6 <__fixunssfsi+0x28>
     d84:	9f 57       	subi	r25, 0x7F	; 127
     d86:	98 f0       	brcs	.+38     	; 0xdae <__fixunssfsi+0x30>
     d88:	b9 2f       	mov	r27, r25
     d8a:	99 27       	eor	r25, r25
     d8c:	b7 51       	subi	r27, 0x17	; 23
     d8e:	b0 f0       	brcs	.+44     	; 0xdbc <__fixunssfsi+0x3e>
     d90:	e1 f0       	breq	.+56     	; 0xdca <__fixunssfsi+0x4c>
     d92:	66 0f       	add	r22, r22
     d94:	77 1f       	adc	r23, r23
     d96:	88 1f       	adc	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	1a f0       	brmi	.+6      	; 0xda2 <__fixunssfsi+0x24>
     d9c:	ba 95       	dec	r27
     d9e:	c9 f7       	brne	.-14     	; 0xd92 <__fixunssfsi+0x14>
     da0:	14 c0       	rjmp	.+40     	; 0xdca <__fixunssfsi+0x4c>
     da2:	b1 30       	cpi	r27, 0x01	; 1
     da4:	91 f0       	breq	.+36     	; 0xdca <__fixunssfsi+0x4c>
     da6:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_zero>
     daa:	b1 e0       	ldi	r27, 0x01	; 1
     dac:	08 95       	ret
     dae:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__fp_zero>
     db2:	67 2f       	mov	r22, r23
     db4:	78 2f       	mov	r23, r24
     db6:	88 27       	eor	r24, r24
     db8:	b8 5f       	subi	r27, 0xF8	; 248
     dba:	39 f0       	breq	.+14     	; 0xdca <__fixunssfsi+0x4c>
     dbc:	b9 3f       	cpi	r27, 0xF9	; 249
     dbe:	cc f3       	brlt	.-14     	; 0xdb2 <__fixunssfsi+0x34>
     dc0:	86 95       	lsr	r24
     dc2:	77 95       	ror	r23
     dc4:	67 95       	ror	r22
     dc6:	b3 95       	inc	r27
     dc8:	d9 f7       	brne	.-10     	; 0xdc0 <__fixunssfsi+0x42>
     dca:	3e f4       	brtc	.+14     	; 0xdda <__fixunssfsi+0x5c>
     dcc:	90 95       	com	r25
     dce:	80 95       	com	r24
     dd0:	70 95       	com	r23
     dd2:	61 95       	neg	r22
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	8f 4f       	sbci	r24, 0xFF	; 255
     dd8:	9f 4f       	sbci	r25, 0xFF	; 255
     dda:	08 95       	ret

00000ddc <__floatunsisf>:
     ddc:	e8 94       	clt
     dde:	09 c0       	rjmp	.+18     	; 0xdf2 <__floatsisf+0x12>

00000de0 <__floatsisf>:
     de0:	97 fb       	bst	r25, 7
     de2:	3e f4       	brtc	.+14     	; 0xdf2 <__floatsisf+0x12>
     de4:	90 95       	com	r25
     de6:	80 95       	com	r24
     de8:	70 95       	com	r23
     dea:	61 95       	neg	r22
     dec:	7f 4f       	sbci	r23, 0xFF	; 255
     dee:	8f 4f       	sbci	r24, 0xFF	; 255
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	99 23       	and	r25, r25
     df4:	a9 f0       	breq	.+42     	; 0xe20 <__floatsisf+0x40>
     df6:	f9 2f       	mov	r31, r25
     df8:	96 e9       	ldi	r25, 0x96	; 150
     dfa:	bb 27       	eor	r27, r27
     dfc:	93 95       	inc	r25
     dfe:	f6 95       	lsr	r31
     e00:	87 95       	ror	r24
     e02:	77 95       	ror	r23
     e04:	67 95       	ror	r22
     e06:	b7 95       	ror	r27
     e08:	f1 11       	cpse	r31, r1
     e0a:	f8 cf       	rjmp	.-16     	; 0xdfc <__floatsisf+0x1c>
     e0c:	fa f4       	brpl	.+62     	; 0xe4c <__floatsisf+0x6c>
     e0e:	bb 0f       	add	r27, r27
     e10:	11 f4       	brne	.+4      	; 0xe16 <__floatsisf+0x36>
     e12:	60 ff       	sbrs	r22, 0
     e14:	1b c0       	rjmp	.+54     	; 0xe4c <__floatsisf+0x6c>
     e16:	6f 5f       	subi	r22, 0xFF	; 255
     e18:	7f 4f       	sbci	r23, 0xFF	; 255
     e1a:	8f 4f       	sbci	r24, 0xFF	; 255
     e1c:	9f 4f       	sbci	r25, 0xFF	; 255
     e1e:	16 c0       	rjmp	.+44     	; 0xe4c <__floatsisf+0x6c>
     e20:	88 23       	and	r24, r24
     e22:	11 f0       	breq	.+4      	; 0xe28 <__floatsisf+0x48>
     e24:	96 e9       	ldi	r25, 0x96	; 150
     e26:	11 c0       	rjmp	.+34     	; 0xe4a <__floatsisf+0x6a>
     e28:	77 23       	and	r23, r23
     e2a:	21 f0       	breq	.+8      	; 0xe34 <__floatsisf+0x54>
     e2c:	9e e8       	ldi	r25, 0x8E	; 142
     e2e:	87 2f       	mov	r24, r23
     e30:	76 2f       	mov	r23, r22
     e32:	05 c0       	rjmp	.+10     	; 0xe3e <__floatsisf+0x5e>
     e34:	66 23       	and	r22, r22
     e36:	71 f0       	breq	.+28     	; 0xe54 <__floatsisf+0x74>
     e38:	96 e8       	ldi	r25, 0x86	; 134
     e3a:	86 2f       	mov	r24, r22
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	2a f0       	brmi	.+10     	; 0xe4c <__floatsisf+0x6c>
     e42:	9a 95       	dec	r25
     e44:	66 0f       	add	r22, r22
     e46:	77 1f       	adc	r23, r23
     e48:	88 1f       	adc	r24, r24
     e4a:	da f7       	brpl	.-10     	; 0xe42 <__floatsisf+0x62>
     e4c:	88 0f       	add	r24, r24
     e4e:	96 95       	lsr	r25
     e50:	87 95       	ror	r24
     e52:	97 f9       	bld	r25, 7
     e54:	08 95       	ret

00000e56 <__fp_cmp>:
     e56:	99 0f       	add	r25, r25
     e58:	00 08       	sbc	r0, r0
     e5a:	55 0f       	add	r21, r21
     e5c:	aa 0b       	sbc	r26, r26
     e5e:	e0 e8       	ldi	r30, 0x80	; 128
     e60:	fe ef       	ldi	r31, 0xFE	; 254
     e62:	16 16       	cp	r1, r22
     e64:	17 06       	cpc	r1, r23
     e66:	e8 07       	cpc	r30, r24
     e68:	f9 07       	cpc	r31, r25
     e6a:	c0 f0       	brcs	.+48     	; 0xe9c <__fp_cmp+0x46>
     e6c:	12 16       	cp	r1, r18
     e6e:	13 06       	cpc	r1, r19
     e70:	e4 07       	cpc	r30, r20
     e72:	f5 07       	cpc	r31, r21
     e74:	98 f0       	brcs	.+38     	; 0xe9c <__fp_cmp+0x46>
     e76:	62 1b       	sub	r22, r18
     e78:	73 0b       	sbc	r23, r19
     e7a:	84 0b       	sbc	r24, r20
     e7c:	95 0b       	sbc	r25, r21
     e7e:	39 f4       	brne	.+14     	; 0xe8e <__fp_cmp+0x38>
     e80:	0a 26       	eor	r0, r26
     e82:	61 f0       	breq	.+24     	; 0xe9c <__fp_cmp+0x46>
     e84:	23 2b       	or	r18, r19
     e86:	24 2b       	or	r18, r20
     e88:	25 2b       	or	r18, r21
     e8a:	21 f4       	brne	.+8      	; 0xe94 <__fp_cmp+0x3e>
     e8c:	08 95       	ret
     e8e:	0a 26       	eor	r0, r26
     e90:	09 f4       	brne	.+2      	; 0xe94 <__fp_cmp+0x3e>
     e92:	a1 40       	sbci	r26, 0x01	; 1
     e94:	a6 95       	lsr	r26
     e96:	8f ef       	ldi	r24, 0xFF	; 255
     e98:	81 1d       	adc	r24, r1
     e9a:	81 1d       	adc	r24, r1
     e9c:	08 95       	ret

00000e9e <__fp_inf>:
     e9e:	97 f9       	bld	r25, 7
     ea0:	9f 67       	ori	r25, 0x7F	; 127
     ea2:	80 e8       	ldi	r24, 0x80	; 128
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	08 95       	ret

00000eaa <__fp_nan>:
     eaa:	9f ef       	ldi	r25, 0xFF	; 255
     eac:	80 ec       	ldi	r24, 0xC0	; 192
     eae:	08 95       	ret

00000eb0 <__fp_pscA>:
     eb0:	00 24       	eor	r0, r0
     eb2:	0a 94       	dec	r0
     eb4:	16 16       	cp	r1, r22
     eb6:	17 06       	cpc	r1, r23
     eb8:	18 06       	cpc	r1, r24
     eba:	09 06       	cpc	r0, r25
     ebc:	08 95       	ret

00000ebe <__fp_pscB>:
     ebe:	00 24       	eor	r0, r0
     ec0:	0a 94       	dec	r0
     ec2:	12 16       	cp	r1, r18
     ec4:	13 06       	cpc	r1, r19
     ec6:	14 06       	cpc	r1, r20
     ec8:	05 06       	cpc	r0, r21
     eca:	08 95       	ret

00000ecc <__fp_round>:
     ecc:	09 2e       	mov	r0, r25
     ece:	03 94       	inc	r0
     ed0:	00 0c       	add	r0, r0
     ed2:	11 f4       	brne	.+4      	; 0xed8 <__fp_round+0xc>
     ed4:	88 23       	and	r24, r24
     ed6:	52 f0       	brmi	.+20     	; 0xeec <__fp_round+0x20>
     ed8:	bb 0f       	add	r27, r27
     eda:	40 f4       	brcc	.+16     	; 0xeec <__fp_round+0x20>
     edc:	bf 2b       	or	r27, r31
     ede:	11 f4       	brne	.+4      	; 0xee4 <__fp_round+0x18>
     ee0:	60 ff       	sbrs	r22, 0
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <__fp_round+0x20>
     ee4:	6f 5f       	subi	r22, 0xFF	; 255
     ee6:	7f 4f       	sbci	r23, 0xFF	; 255
     ee8:	8f 4f       	sbci	r24, 0xFF	; 255
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	08 95       	ret

00000eee <__fp_split3>:
     eee:	57 fd       	sbrc	r21, 7
     ef0:	90 58       	subi	r25, 0x80	; 128
     ef2:	44 0f       	add	r20, r20
     ef4:	55 1f       	adc	r21, r21
     ef6:	59 f0       	breq	.+22     	; 0xf0e <__fp_splitA+0x10>
     ef8:	5f 3f       	cpi	r21, 0xFF	; 255
     efa:	71 f0       	breq	.+28     	; 0xf18 <__fp_splitA+0x1a>
     efc:	47 95       	ror	r20

00000efe <__fp_splitA>:
     efe:	88 0f       	add	r24, r24
     f00:	97 fb       	bst	r25, 7
     f02:	99 1f       	adc	r25, r25
     f04:	61 f0       	breq	.+24     	; 0xf1e <__fp_splitA+0x20>
     f06:	9f 3f       	cpi	r25, 0xFF	; 255
     f08:	79 f0       	breq	.+30     	; 0xf28 <__fp_splitA+0x2a>
     f0a:	87 95       	ror	r24
     f0c:	08 95       	ret
     f0e:	12 16       	cp	r1, r18
     f10:	13 06       	cpc	r1, r19
     f12:	14 06       	cpc	r1, r20
     f14:	55 1f       	adc	r21, r21
     f16:	f2 cf       	rjmp	.-28     	; 0xefc <__fp_split3+0xe>
     f18:	46 95       	lsr	r20
     f1a:	f1 df       	rcall	.-30     	; 0xefe <__fp_splitA>
     f1c:	08 c0       	rjmp	.+16     	; 0xf2e <__fp_splitA+0x30>
     f1e:	16 16       	cp	r1, r22
     f20:	17 06       	cpc	r1, r23
     f22:	18 06       	cpc	r1, r24
     f24:	99 1f       	adc	r25, r25
     f26:	f1 cf       	rjmp	.-30     	; 0xf0a <__fp_splitA+0xc>
     f28:	86 95       	lsr	r24
     f2a:	71 05       	cpc	r23, r1
     f2c:	61 05       	cpc	r22, r1
     f2e:	08 94       	sec
     f30:	08 95       	ret

00000f32 <__fp_zero>:
     f32:	e8 94       	clt

00000f34 <__fp_szero>:
     f34:	bb 27       	eor	r27, r27
     f36:	66 27       	eor	r22, r22
     f38:	77 27       	eor	r23, r23
     f3a:	cb 01       	movw	r24, r22
     f3c:	97 f9       	bld	r25, 7
     f3e:	08 95       	ret

00000f40 <__gesf2>:
     f40:	0e 94 2b 07 	call	0xe56	; 0xe56 <__fp_cmp>
     f44:	08 f4       	brcc	.+2      	; 0xf48 <__gesf2+0x8>
     f46:	8f ef       	ldi	r24, 0xFF	; 255
     f48:	08 95       	ret

00000f4a <__mulsf3>:
     f4a:	0e 94 b8 07 	call	0xf70	; 0xf70 <__mulsf3x>
     f4e:	0c 94 66 07 	jmp	0xecc	; 0xecc <__fp_round>
     f52:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__fp_pscA>
     f56:	38 f0       	brcs	.+14     	; 0xf66 <__mulsf3+0x1c>
     f58:	0e 94 5f 07 	call	0xebe	; 0xebe <__fp_pscB>
     f5c:	20 f0       	brcs	.+8      	; 0xf66 <__mulsf3+0x1c>
     f5e:	95 23       	and	r25, r21
     f60:	11 f0       	breq	.+4      	; 0xf66 <__mulsf3+0x1c>
     f62:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__fp_inf>
     f66:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__fp_nan>
     f6a:	11 24       	eor	r1, r1
     f6c:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_szero>

00000f70 <__mulsf3x>:
     f70:	0e 94 77 07 	call	0xeee	; 0xeee <__fp_split3>
     f74:	70 f3       	brcs	.-36     	; 0xf52 <__mulsf3+0x8>

00000f76 <__mulsf3_pse>:
     f76:	95 9f       	mul	r25, r21
     f78:	c1 f3       	breq	.-16     	; 0xf6a <__mulsf3+0x20>
     f7a:	95 0f       	add	r25, r21
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	55 1f       	adc	r21, r21
     f80:	62 9f       	mul	r22, r18
     f82:	f0 01       	movw	r30, r0
     f84:	72 9f       	mul	r23, r18
     f86:	bb 27       	eor	r27, r27
     f88:	f0 0d       	add	r31, r0
     f8a:	b1 1d       	adc	r27, r1
     f8c:	63 9f       	mul	r22, r19
     f8e:	aa 27       	eor	r26, r26
     f90:	f0 0d       	add	r31, r0
     f92:	b1 1d       	adc	r27, r1
     f94:	aa 1f       	adc	r26, r26
     f96:	64 9f       	mul	r22, r20
     f98:	66 27       	eor	r22, r22
     f9a:	b0 0d       	add	r27, r0
     f9c:	a1 1d       	adc	r26, r1
     f9e:	66 1f       	adc	r22, r22
     fa0:	82 9f       	mul	r24, r18
     fa2:	22 27       	eor	r18, r18
     fa4:	b0 0d       	add	r27, r0
     fa6:	a1 1d       	adc	r26, r1
     fa8:	62 1f       	adc	r22, r18
     faa:	73 9f       	mul	r23, r19
     fac:	b0 0d       	add	r27, r0
     fae:	a1 1d       	adc	r26, r1
     fb0:	62 1f       	adc	r22, r18
     fb2:	83 9f       	mul	r24, r19
     fb4:	a0 0d       	add	r26, r0
     fb6:	61 1d       	adc	r22, r1
     fb8:	22 1f       	adc	r18, r18
     fba:	74 9f       	mul	r23, r20
     fbc:	33 27       	eor	r19, r19
     fbe:	a0 0d       	add	r26, r0
     fc0:	61 1d       	adc	r22, r1
     fc2:	23 1f       	adc	r18, r19
     fc4:	84 9f       	mul	r24, r20
     fc6:	60 0d       	add	r22, r0
     fc8:	21 1d       	adc	r18, r1
     fca:	82 2f       	mov	r24, r18
     fcc:	76 2f       	mov	r23, r22
     fce:	6a 2f       	mov	r22, r26
     fd0:	11 24       	eor	r1, r1
     fd2:	9f 57       	subi	r25, 0x7F	; 127
     fd4:	50 40       	sbci	r21, 0x00	; 0
     fd6:	9a f0       	brmi	.+38     	; 0xffe <__mulsf3_pse+0x88>
     fd8:	f1 f0       	breq	.+60     	; 0x1016 <__mulsf3_pse+0xa0>
     fda:	88 23       	and	r24, r24
     fdc:	4a f0       	brmi	.+18     	; 0xff0 <__mulsf3_pse+0x7a>
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	bb 1f       	adc	r27, r27
     fe4:	66 1f       	adc	r22, r22
     fe6:	77 1f       	adc	r23, r23
     fe8:	88 1f       	adc	r24, r24
     fea:	91 50       	subi	r25, 0x01	; 1
     fec:	50 40       	sbci	r21, 0x00	; 0
     fee:	a9 f7       	brne	.-22     	; 0xfda <__mulsf3_pse+0x64>
     ff0:	9e 3f       	cpi	r25, 0xFE	; 254
     ff2:	51 05       	cpc	r21, r1
     ff4:	80 f0       	brcs	.+32     	; 0x1016 <__mulsf3_pse+0xa0>
     ff6:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__fp_inf>
     ffa:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_szero>
     ffe:	5f 3f       	cpi	r21, 0xFF	; 255
    1000:	e4 f3       	brlt	.-8      	; 0xffa <__mulsf3_pse+0x84>
    1002:	98 3e       	cpi	r25, 0xE8	; 232
    1004:	d4 f3       	brlt	.-12     	; 0xffa <__mulsf3_pse+0x84>
    1006:	86 95       	lsr	r24
    1008:	77 95       	ror	r23
    100a:	67 95       	ror	r22
    100c:	b7 95       	ror	r27
    100e:	f7 95       	ror	r31
    1010:	e7 95       	ror	r30
    1012:	9f 5f       	subi	r25, 0xFF	; 255
    1014:	c1 f7       	brne	.-16     	; 0x1006 <__mulsf3_pse+0x90>
    1016:	fe 2b       	or	r31, r30
    1018:	88 0f       	add	r24, r24
    101a:	91 1d       	adc	r25, r1
    101c:	96 95       	lsr	r25
    101e:	87 95       	ror	r24
    1020:	97 f9       	bld	r25, 7
    1022:	08 95       	ret

00001024 <vfprintf>:
    1024:	a0 e1       	ldi	r26, 0x10	; 16
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e8 e1       	ldi	r30, 0x18	; 24
    102a:	f8 e0       	ldi	r31, 0x08	; 8
    102c:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__prologue_saves__>
    1030:	7c 01       	movw	r14, r24
    1032:	1b 01       	movw	r2, r22
    1034:	6a 01       	movw	r12, r20
    1036:	fc 01       	movw	r30, r24
    1038:	17 82       	std	Z+7, r1	; 0x07
    103a:	16 82       	std	Z+6, r1	; 0x06
    103c:	83 81       	ldd	r24, Z+3	; 0x03
    103e:	81 ff       	sbrs	r24, 1
    1040:	44 c3       	rjmp	.+1672   	; 0x16ca <vfprintf+0x6a6>
    1042:	9e 01       	movw	r18, r28
    1044:	2f 5f       	subi	r18, 0xFF	; 255
    1046:	3f 4f       	sbci	r19, 0xFF	; 255
    1048:	39 01       	movw	r6, r18
    104a:	f7 01       	movw	r30, r14
    104c:	93 81       	ldd	r25, Z+3	; 0x03
    104e:	f1 01       	movw	r30, r2
    1050:	93 fd       	sbrc	r25, 3
    1052:	85 91       	lpm	r24, Z+
    1054:	93 ff       	sbrs	r25, 3
    1056:	81 91       	ld	r24, Z+
    1058:	1f 01       	movw	r2, r30
    105a:	88 23       	and	r24, r24
    105c:	09 f4       	brne	.+2      	; 0x1060 <vfprintf+0x3c>
    105e:	31 c3       	rjmp	.+1634   	; 0x16c2 <vfprintf+0x69e>
    1060:	85 32       	cpi	r24, 0x25	; 37
    1062:	39 f4       	brne	.+14     	; 0x1072 <vfprintf+0x4e>
    1064:	93 fd       	sbrc	r25, 3
    1066:	85 91       	lpm	r24, Z+
    1068:	93 ff       	sbrs	r25, 3
    106a:	81 91       	ld	r24, Z+
    106c:	1f 01       	movw	r2, r30
    106e:	85 32       	cpi	r24, 0x25	; 37
    1070:	39 f4       	brne	.+14     	; 0x1080 <vfprintf+0x5c>
    1072:	b7 01       	movw	r22, r14
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    107a:	56 01       	movw	r10, r12
    107c:	65 01       	movw	r12, r10
    107e:	e5 cf       	rjmp	.-54     	; 0x104a <vfprintf+0x26>
    1080:	10 e0       	ldi	r17, 0x00	; 0
    1082:	51 2c       	mov	r5, r1
    1084:	91 2c       	mov	r9, r1
    1086:	ff e1       	ldi	r31, 0x1F	; 31
    1088:	f9 15       	cp	r31, r9
    108a:	d8 f0       	brcs	.+54     	; 0x10c2 <vfprintf+0x9e>
    108c:	8b 32       	cpi	r24, 0x2B	; 43
    108e:	79 f0       	breq	.+30     	; 0x10ae <vfprintf+0x8a>
    1090:	38 f4       	brcc	.+14     	; 0x10a0 <vfprintf+0x7c>
    1092:	80 32       	cpi	r24, 0x20	; 32
    1094:	79 f0       	breq	.+30     	; 0x10b4 <vfprintf+0x90>
    1096:	83 32       	cpi	r24, 0x23	; 35
    1098:	a1 f4       	brne	.+40     	; 0x10c2 <vfprintf+0x9e>
    109a:	f9 2d       	mov	r31, r9
    109c:	f0 61       	ori	r31, 0x10	; 16
    109e:	2e c0       	rjmp	.+92     	; 0x10fc <vfprintf+0xd8>
    10a0:	8d 32       	cpi	r24, 0x2D	; 45
    10a2:	61 f0       	breq	.+24     	; 0x10bc <vfprintf+0x98>
    10a4:	80 33       	cpi	r24, 0x30	; 48
    10a6:	69 f4       	brne	.+26     	; 0x10c2 <vfprintf+0x9e>
    10a8:	29 2d       	mov	r18, r9
    10aa:	21 60       	ori	r18, 0x01	; 1
    10ac:	2d c0       	rjmp	.+90     	; 0x1108 <vfprintf+0xe4>
    10ae:	39 2d       	mov	r19, r9
    10b0:	32 60       	ori	r19, 0x02	; 2
    10b2:	93 2e       	mov	r9, r19
    10b4:	89 2d       	mov	r24, r9
    10b6:	84 60       	ori	r24, 0x04	; 4
    10b8:	98 2e       	mov	r9, r24
    10ba:	2a c0       	rjmp	.+84     	; 0x1110 <vfprintf+0xec>
    10bc:	e9 2d       	mov	r30, r9
    10be:	e8 60       	ori	r30, 0x08	; 8
    10c0:	15 c0       	rjmp	.+42     	; 0x10ec <vfprintf+0xc8>
    10c2:	97 fc       	sbrc	r9, 7
    10c4:	2d c0       	rjmp	.+90     	; 0x1120 <vfprintf+0xfc>
    10c6:	20 ed       	ldi	r18, 0xD0	; 208
    10c8:	28 0f       	add	r18, r24
    10ca:	2a 30       	cpi	r18, 0x0A	; 10
    10cc:	88 f4       	brcc	.+34     	; 0x10f0 <vfprintf+0xcc>
    10ce:	96 fe       	sbrs	r9, 6
    10d0:	06 c0       	rjmp	.+12     	; 0x10de <vfprintf+0xba>
    10d2:	3a e0       	ldi	r19, 0x0A	; 10
    10d4:	13 9f       	mul	r17, r19
    10d6:	20 0d       	add	r18, r0
    10d8:	11 24       	eor	r1, r1
    10da:	12 2f       	mov	r17, r18
    10dc:	19 c0       	rjmp	.+50     	; 0x1110 <vfprintf+0xec>
    10de:	8a e0       	ldi	r24, 0x0A	; 10
    10e0:	58 9e       	mul	r5, r24
    10e2:	20 0d       	add	r18, r0
    10e4:	11 24       	eor	r1, r1
    10e6:	52 2e       	mov	r5, r18
    10e8:	e9 2d       	mov	r30, r9
    10ea:	e0 62       	ori	r30, 0x20	; 32
    10ec:	9e 2e       	mov	r9, r30
    10ee:	10 c0       	rjmp	.+32     	; 0x1110 <vfprintf+0xec>
    10f0:	8e 32       	cpi	r24, 0x2E	; 46
    10f2:	31 f4       	brne	.+12     	; 0x1100 <vfprintf+0xdc>
    10f4:	96 fc       	sbrc	r9, 6
    10f6:	e5 c2       	rjmp	.+1482   	; 0x16c2 <vfprintf+0x69e>
    10f8:	f9 2d       	mov	r31, r9
    10fa:	f0 64       	ori	r31, 0x40	; 64
    10fc:	9f 2e       	mov	r9, r31
    10fe:	08 c0       	rjmp	.+16     	; 0x1110 <vfprintf+0xec>
    1100:	8c 36       	cpi	r24, 0x6C	; 108
    1102:	21 f4       	brne	.+8      	; 0x110c <vfprintf+0xe8>
    1104:	29 2d       	mov	r18, r9
    1106:	20 68       	ori	r18, 0x80	; 128
    1108:	92 2e       	mov	r9, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <vfprintf+0xec>
    110c:	88 36       	cpi	r24, 0x68	; 104
    110e:	41 f4       	brne	.+16     	; 0x1120 <vfprintf+0xfc>
    1110:	f1 01       	movw	r30, r2
    1112:	93 fd       	sbrc	r25, 3
    1114:	85 91       	lpm	r24, Z+
    1116:	93 ff       	sbrs	r25, 3
    1118:	81 91       	ld	r24, Z+
    111a:	1f 01       	movw	r2, r30
    111c:	81 11       	cpse	r24, r1
    111e:	b3 cf       	rjmp	.-154    	; 0x1086 <vfprintf+0x62>
    1120:	9b eb       	ldi	r25, 0xBB	; 187
    1122:	98 0f       	add	r25, r24
    1124:	93 30       	cpi	r25, 0x03	; 3
    1126:	20 f4       	brcc	.+8      	; 0x1130 <vfprintf+0x10c>
    1128:	99 2d       	mov	r25, r9
    112a:	90 61       	ori	r25, 0x10	; 16
    112c:	80 5e       	subi	r24, 0xE0	; 224
    112e:	07 c0       	rjmp	.+14     	; 0x113e <vfprintf+0x11a>
    1130:	9b e9       	ldi	r25, 0x9B	; 155
    1132:	98 0f       	add	r25, r24
    1134:	93 30       	cpi	r25, 0x03	; 3
    1136:	08 f0       	brcs	.+2      	; 0x113a <vfprintf+0x116>
    1138:	66 c1       	rjmp	.+716    	; 0x1406 <vfprintf+0x3e2>
    113a:	99 2d       	mov	r25, r9
    113c:	9f 7e       	andi	r25, 0xEF	; 239
    113e:	96 ff       	sbrs	r25, 6
    1140:	16 e0       	ldi	r17, 0x06	; 6
    1142:	9f 73       	andi	r25, 0x3F	; 63
    1144:	99 2e       	mov	r9, r25
    1146:	85 36       	cpi	r24, 0x65	; 101
    1148:	19 f4       	brne	.+6      	; 0x1150 <vfprintf+0x12c>
    114a:	90 64       	ori	r25, 0x40	; 64
    114c:	99 2e       	mov	r9, r25
    114e:	08 c0       	rjmp	.+16     	; 0x1160 <vfprintf+0x13c>
    1150:	86 36       	cpi	r24, 0x66	; 102
    1152:	21 f4       	brne	.+8      	; 0x115c <vfprintf+0x138>
    1154:	39 2f       	mov	r19, r25
    1156:	30 68       	ori	r19, 0x80	; 128
    1158:	93 2e       	mov	r9, r19
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <vfprintf+0x13c>
    115c:	11 11       	cpse	r17, r1
    115e:	11 50       	subi	r17, 0x01	; 1
    1160:	97 fe       	sbrs	r9, 7
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <vfprintf+0x14e>
    1164:	1c 33       	cpi	r17, 0x3C	; 60
    1166:	50 f4       	brcc	.+20     	; 0x117c <vfprintf+0x158>
    1168:	44 24       	eor	r4, r4
    116a:	43 94       	inc	r4
    116c:	41 0e       	add	r4, r17
    116e:	27 e0       	ldi	r18, 0x07	; 7
    1170:	0b c0       	rjmp	.+22     	; 0x1188 <vfprintf+0x164>
    1172:	18 30       	cpi	r17, 0x08	; 8
    1174:	38 f0       	brcs	.+14     	; 0x1184 <vfprintf+0x160>
    1176:	27 e0       	ldi	r18, 0x07	; 7
    1178:	17 e0       	ldi	r17, 0x07	; 7
    117a:	05 c0       	rjmp	.+10     	; 0x1186 <vfprintf+0x162>
    117c:	27 e0       	ldi	r18, 0x07	; 7
    117e:	9c e3       	ldi	r25, 0x3C	; 60
    1180:	49 2e       	mov	r4, r25
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <vfprintf+0x164>
    1184:	21 2f       	mov	r18, r17
    1186:	41 2c       	mov	r4, r1
    1188:	56 01       	movw	r10, r12
    118a:	84 e0       	ldi	r24, 0x04	; 4
    118c:	a8 0e       	add	r10, r24
    118e:	b1 1c       	adc	r11, r1
    1190:	f6 01       	movw	r30, r12
    1192:	60 81       	ld	r22, Z
    1194:	71 81       	ldd	r23, Z+1	; 0x01
    1196:	82 81       	ldd	r24, Z+2	; 0x02
    1198:	93 81       	ldd	r25, Z+3	; 0x03
    119a:	04 2d       	mov	r16, r4
    119c:	a3 01       	movw	r20, r6
    119e:	0e 94 c6 0b 	call	0x178c	; 0x178c <__ftoa_engine>
    11a2:	6c 01       	movw	r12, r24
    11a4:	f9 81       	ldd	r31, Y+1	; 0x01
    11a6:	fc 87       	std	Y+12, r31	; 0x0c
    11a8:	f0 ff       	sbrs	r31, 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <vfprintf+0x18c>
    11ac:	f3 ff       	sbrs	r31, 3
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <vfprintf+0x198>
    11b0:	91 fc       	sbrc	r9, 1
    11b2:	06 c0       	rjmp	.+12     	; 0x11c0 <vfprintf+0x19c>
    11b4:	92 fe       	sbrs	r9, 2
    11b6:	06 c0       	rjmp	.+12     	; 0x11c4 <vfprintf+0x1a0>
    11b8:	00 e2       	ldi	r16, 0x20	; 32
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <vfprintf+0x1a2>
    11bc:	0d e2       	ldi	r16, 0x2D	; 45
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <vfprintf+0x1a2>
    11c0:	0b e2       	ldi	r16, 0x2B	; 43
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <vfprintf+0x1a2>
    11c4:	00 e0       	ldi	r16, 0x00	; 0
    11c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    11c8:	8c 70       	andi	r24, 0x0C	; 12
    11ca:	19 f0       	breq	.+6      	; 0x11d2 <vfprintf+0x1ae>
    11cc:	01 11       	cpse	r16, r1
    11ce:	5a c2       	rjmp	.+1204   	; 0x1684 <vfprintf+0x660>
    11d0:	9b c2       	rjmp	.+1334   	; 0x1708 <vfprintf+0x6e4>
    11d2:	97 fe       	sbrs	r9, 7
    11d4:	10 c0       	rjmp	.+32     	; 0x11f6 <vfprintf+0x1d2>
    11d6:	4c 0c       	add	r4, r12
    11d8:	fc 85       	ldd	r31, Y+12	; 0x0c
    11da:	f4 ff       	sbrs	r31, 4
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <vfprintf+0x1c2>
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	81 33       	cpi	r24, 0x31	; 49
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <vfprintf+0x1c2>
    11e4:	4a 94       	dec	r4
    11e6:	14 14       	cp	r1, r4
    11e8:	74 f5       	brge	.+92     	; 0x1246 <vfprintf+0x222>
    11ea:	28 e0       	ldi	r18, 0x08	; 8
    11ec:	24 15       	cp	r18, r4
    11ee:	78 f5       	brcc	.+94     	; 0x124e <vfprintf+0x22a>
    11f0:	88 e0       	ldi	r24, 0x08	; 8
    11f2:	48 2e       	mov	r4, r24
    11f4:	2c c0       	rjmp	.+88     	; 0x124e <vfprintf+0x22a>
    11f6:	96 fc       	sbrc	r9, 6
    11f8:	2a c0       	rjmp	.+84     	; 0x124e <vfprintf+0x22a>
    11fa:	81 2f       	mov	r24, r17
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	8c 15       	cp	r24, r12
    1200:	9d 05       	cpc	r25, r13
    1202:	9c f0       	brlt	.+38     	; 0x122a <vfprintf+0x206>
    1204:	3c ef       	ldi	r19, 0xFC	; 252
    1206:	c3 16       	cp	r12, r19
    1208:	3f ef       	ldi	r19, 0xFF	; 255
    120a:	d3 06       	cpc	r13, r19
    120c:	74 f0       	brlt	.+28     	; 0x122a <vfprintf+0x206>
    120e:	89 2d       	mov	r24, r9
    1210:	80 68       	ori	r24, 0x80	; 128
    1212:	98 2e       	mov	r9, r24
    1214:	0a c0       	rjmp	.+20     	; 0x122a <vfprintf+0x206>
    1216:	e2 e0       	ldi	r30, 0x02	; 2
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	ec 0f       	add	r30, r28
    121c:	fd 1f       	adc	r31, r29
    121e:	e1 0f       	add	r30, r17
    1220:	f1 1d       	adc	r31, r1
    1222:	80 81       	ld	r24, Z
    1224:	80 33       	cpi	r24, 0x30	; 48
    1226:	19 f4       	brne	.+6      	; 0x122e <vfprintf+0x20a>
    1228:	11 50       	subi	r17, 0x01	; 1
    122a:	11 11       	cpse	r17, r1
    122c:	f4 cf       	rjmp	.-24     	; 0x1216 <vfprintf+0x1f2>
    122e:	97 fe       	sbrs	r9, 7
    1230:	0e c0       	rjmp	.+28     	; 0x124e <vfprintf+0x22a>
    1232:	44 24       	eor	r4, r4
    1234:	43 94       	inc	r4
    1236:	41 0e       	add	r4, r17
    1238:	81 2f       	mov	r24, r17
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	c8 16       	cp	r12, r24
    123e:	d9 06       	cpc	r13, r25
    1240:	2c f4       	brge	.+10     	; 0x124c <vfprintf+0x228>
    1242:	1c 19       	sub	r17, r12
    1244:	04 c0       	rjmp	.+8      	; 0x124e <vfprintf+0x22a>
    1246:	44 24       	eor	r4, r4
    1248:	43 94       	inc	r4
    124a:	01 c0       	rjmp	.+2      	; 0x124e <vfprintf+0x22a>
    124c:	10 e0       	ldi	r17, 0x00	; 0
    124e:	97 fe       	sbrs	r9, 7
    1250:	06 c0       	rjmp	.+12     	; 0x125e <vfprintf+0x23a>
    1252:	1c 14       	cp	r1, r12
    1254:	1d 04       	cpc	r1, r13
    1256:	34 f4       	brge	.+12     	; 0x1264 <vfprintf+0x240>
    1258:	c6 01       	movw	r24, r12
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	05 c0       	rjmp	.+10     	; 0x1268 <vfprintf+0x244>
    125e:	85 e0       	ldi	r24, 0x05	; 5
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <vfprintf+0x244>
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	01 11       	cpse	r16, r1
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	11 23       	and	r17, r17
    126e:	31 f0       	breq	.+12     	; 0x127c <vfprintf+0x258>
    1270:	21 2f       	mov	r18, r17
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	2f 5f       	subi	r18, 0xFF	; 255
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
    1278:	82 0f       	add	r24, r18
    127a:	93 1f       	adc	r25, r19
    127c:	25 2d       	mov	r18, r5
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	82 17       	cp	r24, r18
    1282:	93 07       	cpc	r25, r19
    1284:	14 f4       	brge	.+4      	; 0x128a <vfprintf+0x266>
    1286:	58 1a       	sub	r5, r24
    1288:	01 c0       	rjmp	.+2      	; 0x128c <vfprintf+0x268>
    128a:	51 2c       	mov	r5, r1
    128c:	89 2d       	mov	r24, r9
    128e:	89 70       	andi	r24, 0x09	; 9
    1290:	49 f4       	brne	.+18     	; 0x12a4 <vfprintf+0x280>
    1292:	55 20       	and	r5, r5
    1294:	39 f0       	breq	.+14     	; 0x12a4 <vfprintf+0x280>
    1296:	b7 01       	movw	r22, r14
    1298:	80 e2       	ldi	r24, 0x20	; 32
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    12a0:	5a 94       	dec	r5
    12a2:	f7 cf       	rjmp	.-18     	; 0x1292 <vfprintf+0x26e>
    12a4:	00 23       	and	r16, r16
    12a6:	29 f0       	breq	.+10     	; 0x12b2 <vfprintf+0x28e>
    12a8:	b7 01       	movw	r22, r14
    12aa:	80 2f       	mov	r24, r16
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    12b2:	93 fc       	sbrc	r9, 3
    12b4:	09 c0       	rjmp	.+18     	; 0x12c8 <vfprintf+0x2a4>
    12b6:	55 20       	and	r5, r5
    12b8:	39 f0       	breq	.+14     	; 0x12c8 <vfprintf+0x2a4>
    12ba:	b7 01       	movw	r22, r14
    12bc:	80 e3       	ldi	r24, 0x30	; 48
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    12c4:	5a 94       	dec	r5
    12c6:	f7 cf       	rjmp	.-18     	; 0x12b6 <vfprintf+0x292>
    12c8:	97 fe       	sbrs	r9, 7
    12ca:	4c c0       	rjmp	.+152    	; 0x1364 <vfprintf+0x340>
    12cc:	46 01       	movw	r8, r12
    12ce:	d7 fe       	sbrs	r13, 7
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <vfprintf+0x2b2>
    12d2:	81 2c       	mov	r8, r1
    12d4:	91 2c       	mov	r9, r1
    12d6:	c6 01       	movw	r24, r12
    12d8:	88 19       	sub	r24, r8
    12da:	99 09       	sbc	r25, r9
    12dc:	f3 01       	movw	r30, r6
    12de:	e8 0f       	add	r30, r24
    12e0:	f9 1f       	adc	r31, r25
    12e2:	fe 87       	std	Y+14, r31	; 0x0e
    12e4:	ed 87       	std	Y+13, r30	; 0x0d
    12e6:	96 01       	movw	r18, r12
    12e8:	24 19       	sub	r18, r4
    12ea:	31 09       	sbc	r19, r1
    12ec:	38 8b       	std	Y+16, r19	; 0x10
    12ee:	2f 87       	std	Y+15, r18	; 0x0f
    12f0:	01 2f       	mov	r16, r17
    12f2:	10 e0       	ldi	r17, 0x00	; 0
    12f4:	11 95       	neg	r17
    12f6:	01 95       	neg	r16
    12f8:	11 09       	sbc	r17, r1
    12fa:	3f ef       	ldi	r19, 0xFF	; 255
    12fc:	83 16       	cp	r8, r19
    12fe:	93 06       	cpc	r9, r19
    1300:	29 f4       	brne	.+10     	; 0x130c <vfprintf+0x2e8>
    1302:	b7 01       	movw	r22, r14
    1304:	8e e2       	ldi	r24, 0x2E	; 46
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    130c:	c8 14       	cp	r12, r8
    130e:	d9 04       	cpc	r13, r9
    1310:	4c f0       	brlt	.+18     	; 0x1324 <vfprintf+0x300>
    1312:	8f 85       	ldd	r24, Y+15	; 0x0f
    1314:	98 89       	ldd	r25, Y+16	; 0x10
    1316:	88 15       	cp	r24, r8
    1318:	99 05       	cpc	r25, r9
    131a:	24 f4       	brge	.+8      	; 0x1324 <vfprintf+0x300>
    131c:	ed 85       	ldd	r30, Y+13	; 0x0d
    131e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1320:	81 81       	ldd	r24, Z+1	; 0x01
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <vfprintf+0x302>
    1324:	80 e3       	ldi	r24, 0x30	; 48
    1326:	f1 e0       	ldi	r31, 0x01	; 1
    1328:	8f 1a       	sub	r8, r31
    132a:	91 08       	sbc	r9, r1
    132c:	2d 85       	ldd	r18, Y+13	; 0x0d
    132e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1330:	2f 5f       	subi	r18, 0xFF	; 255
    1332:	3f 4f       	sbci	r19, 0xFF	; 255
    1334:	3e 87       	std	Y+14, r19	; 0x0e
    1336:	2d 87       	std	Y+13, r18	; 0x0d
    1338:	80 16       	cp	r8, r16
    133a:	91 06       	cpc	r9, r17
    133c:	2c f0       	brlt	.+10     	; 0x1348 <vfprintf+0x324>
    133e:	b7 01       	movw	r22, r14
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    1346:	d9 cf       	rjmp	.-78     	; 0x12fa <vfprintf+0x2d6>
    1348:	c8 14       	cp	r12, r8
    134a:	d9 04       	cpc	r13, r9
    134c:	41 f4       	brne	.+16     	; 0x135e <vfprintf+0x33a>
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	96 33       	cpi	r25, 0x36	; 54
    1352:	20 f4       	brcc	.+8      	; 0x135c <vfprintf+0x338>
    1354:	95 33       	cpi	r25, 0x35	; 53
    1356:	19 f4       	brne	.+6      	; 0x135e <vfprintf+0x33a>
    1358:	3c 85       	ldd	r19, Y+12	; 0x0c
    135a:	34 ff       	sbrs	r19, 4
    135c:	81 e3       	ldi	r24, 0x31	; 49
    135e:	b7 01       	movw	r22, r14
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	4e c0       	rjmp	.+156    	; 0x1400 <vfprintf+0x3dc>
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	81 33       	cpi	r24, 0x31	; 49
    1368:	19 f0       	breq	.+6      	; 0x1370 <vfprintf+0x34c>
    136a:	9c 85       	ldd	r25, Y+12	; 0x0c
    136c:	9f 7e       	andi	r25, 0xEF	; 239
    136e:	9c 87       	std	Y+12, r25	; 0x0c
    1370:	b7 01       	movw	r22, r14
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    1378:	11 11       	cpse	r17, r1
    137a:	05 c0       	rjmp	.+10     	; 0x1386 <vfprintf+0x362>
    137c:	94 fc       	sbrc	r9, 4
    137e:	18 c0       	rjmp	.+48     	; 0x13b0 <vfprintf+0x38c>
    1380:	85 e6       	ldi	r24, 0x65	; 101
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	17 c0       	rjmp	.+46     	; 0x13b4 <vfprintf+0x390>
    1386:	b7 01       	movw	r22, r14
    1388:	8e e2       	ldi	r24, 0x2E	; 46
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    1390:	1e 5f       	subi	r17, 0xFE	; 254
    1392:	82 e0       	ldi	r24, 0x02	; 2
    1394:	01 e0       	ldi	r16, 0x01	; 1
    1396:	08 0f       	add	r16, r24
    1398:	f3 01       	movw	r30, r6
    139a:	e8 0f       	add	r30, r24
    139c:	f1 1d       	adc	r31, r1
    139e:	80 81       	ld	r24, Z
    13a0:	b7 01       	movw	r22, r14
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    13a8:	80 2f       	mov	r24, r16
    13aa:	01 13       	cpse	r16, r17
    13ac:	f3 cf       	rjmp	.-26     	; 0x1394 <vfprintf+0x370>
    13ae:	e6 cf       	rjmp	.-52     	; 0x137c <vfprintf+0x358>
    13b0:	85 e4       	ldi	r24, 0x45	; 69
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	b7 01       	movw	r22, r14
    13b6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    13ba:	d7 fc       	sbrc	r13, 7
    13bc:	06 c0       	rjmp	.+12     	; 0x13ca <vfprintf+0x3a6>
    13be:	c1 14       	cp	r12, r1
    13c0:	d1 04       	cpc	r13, r1
    13c2:	41 f4       	brne	.+16     	; 0x13d4 <vfprintf+0x3b0>
    13c4:	ec 85       	ldd	r30, Y+12	; 0x0c
    13c6:	e4 ff       	sbrs	r30, 4
    13c8:	05 c0       	rjmp	.+10     	; 0x13d4 <vfprintf+0x3b0>
    13ca:	d1 94       	neg	r13
    13cc:	c1 94       	neg	r12
    13ce:	d1 08       	sbc	r13, r1
    13d0:	8d e2       	ldi	r24, 0x2D	; 45
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <vfprintf+0x3b2>
    13d4:	8b e2       	ldi	r24, 0x2B	; 43
    13d6:	b7 01       	movw	r22, r14
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    13de:	80 e3       	ldi	r24, 0x30	; 48
    13e0:	2a e0       	ldi	r18, 0x0A	; 10
    13e2:	c2 16       	cp	r12, r18
    13e4:	d1 04       	cpc	r13, r1
    13e6:	2c f0       	brlt	.+10     	; 0x13f2 <vfprintf+0x3ce>
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	fa e0       	ldi	r31, 0x0A	; 10
    13ec:	cf 1a       	sub	r12, r31
    13ee:	d1 08       	sbc	r13, r1
    13f0:	f7 cf       	rjmp	.-18     	; 0x13e0 <vfprintf+0x3bc>
    13f2:	b7 01       	movw	r22, r14
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    13fa:	b7 01       	movw	r22, r14
    13fc:	c6 01       	movw	r24, r12
    13fe:	c0 96       	adiw	r24, 0x30	; 48
    1400:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    1404:	54 c1       	rjmp	.+680    	; 0x16ae <vfprintf+0x68a>
    1406:	83 36       	cpi	r24, 0x63	; 99
    1408:	31 f0       	breq	.+12     	; 0x1416 <vfprintf+0x3f2>
    140a:	83 37       	cpi	r24, 0x73	; 115
    140c:	79 f0       	breq	.+30     	; 0x142c <vfprintf+0x408>
    140e:	83 35       	cpi	r24, 0x53	; 83
    1410:	09 f0       	breq	.+2      	; 0x1414 <vfprintf+0x3f0>
    1412:	56 c0       	rjmp	.+172    	; 0x14c0 <vfprintf+0x49c>
    1414:	20 c0       	rjmp	.+64     	; 0x1456 <vfprintf+0x432>
    1416:	56 01       	movw	r10, r12
    1418:	32 e0       	ldi	r19, 0x02	; 2
    141a:	a3 0e       	add	r10, r19
    141c:	b1 1c       	adc	r11, r1
    141e:	f6 01       	movw	r30, r12
    1420:	80 81       	ld	r24, Z
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	01 e0       	ldi	r16, 0x01	; 1
    1426:	10 e0       	ldi	r17, 0x00	; 0
    1428:	63 01       	movw	r12, r6
    142a:	12 c0       	rjmp	.+36     	; 0x1450 <vfprintf+0x42c>
    142c:	56 01       	movw	r10, r12
    142e:	f2 e0       	ldi	r31, 0x02	; 2
    1430:	af 0e       	add	r10, r31
    1432:	b1 1c       	adc	r11, r1
    1434:	f6 01       	movw	r30, r12
    1436:	c0 80       	ld	r12, Z
    1438:	d1 80       	ldd	r13, Z+1	; 0x01
    143a:	96 fe       	sbrs	r9, 6
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <vfprintf+0x420>
    143e:	61 2f       	mov	r22, r17
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <vfprintf+0x424>
    1444:	6f ef       	ldi	r22, 0xFF	; 255
    1446:	7f ef       	ldi	r23, 0xFF	; 255
    1448:	c6 01       	movw	r24, r12
    144a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <strnlen>
    144e:	8c 01       	movw	r16, r24
    1450:	f9 2d       	mov	r31, r9
    1452:	ff 77       	andi	r31, 0x7F	; 127
    1454:	14 c0       	rjmp	.+40     	; 0x147e <vfprintf+0x45a>
    1456:	56 01       	movw	r10, r12
    1458:	22 e0       	ldi	r18, 0x02	; 2
    145a:	a2 0e       	add	r10, r18
    145c:	b1 1c       	adc	r11, r1
    145e:	f6 01       	movw	r30, r12
    1460:	c0 80       	ld	r12, Z
    1462:	d1 80       	ldd	r13, Z+1	; 0x01
    1464:	96 fe       	sbrs	r9, 6
    1466:	03 c0       	rjmp	.+6      	; 0x146e <vfprintf+0x44a>
    1468:	61 2f       	mov	r22, r17
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <vfprintf+0x44e>
    146e:	6f ef       	ldi	r22, 0xFF	; 255
    1470:	7f ef       	ldi	r23, 0xFF	; 255
    1472:	c6 01       	movw	r24, r12
    1474:	0e 94 9e 0c 	call	0x193c	; 0x193c <strnlen_P>
    1478:	8c 01       	movw	r16, r24
    147a:	f9 2d       	mov	r31, r9
    147c:	f0 68       	ori	r31, 0x80	; 128
    147e:	9f 2e       	mov	r9, r31
    1480:	f3 fd       	sbrc	r31, 3
    1482:	1a c0       	rjmp	.+52     	; 0x14b8 <vfprintf+0x494>
    1484:	85 2d       	mov	r24, r5
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	08 17       	cp	r16, r24
    148a:	19 07       	cpc	r17, r25
    148c:	a8 f4       	brcc	.+42     	; 0x14b8 <vfprintf+0x494>
    148e:	b7 01       	movw	r22, r14
    1490:	80 e2       	ldi	r24, 0x20	; 32
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    1498:	5a 94       	dec	r5
    149a:	f4 cf       	rjmp	.-24     	; 0x1484 <vfprintf+0x460>
    149c:	f6 01       	movw	r30, r12
    149e:	97 fc       	sbrc	r9, 7
    14a0:	85 91       	lpm	r24, Z+
    14a2:	97 fe       	sbrs	r9, 7
    14a4:	81 91       	ld	r24, Z+
    14a6:	6f 01       	movw	r12, r30
    14a8:	b7 01       	movw	r22, r14
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    14b0:	51 10       	cpse	r5, r1
    14b2:	5a 94       	dec	r5
    14b4:	01 50       	subi	r16, 0x01	; 1
    14b6:	11 09       	sbc	r17, r1
    14b8:	01 15       	cp	r16, r1
    14ba:	11 05       	cpc	r17, r1
    14bc:	79 f7       	brne	.-34     	; 0x149c <vfprintf+0x478>
    14be:	f7 c0       	rjmp	.+494    	; 0x16ae <vfprintf+0x68a>
    14c0:	84 36       	cpi	r24, 0x64	; 100
    14c2:	11 f0       	breq	.+4      	; 0x14c8 <vfprintf+0x4a4>
    14c4:	89 36       	cpi	r24, 0x69	; 105
    14c6:	61 f5       	brne	.+88     	; 0x1520 <vfprintf+0x4fc>
    14c8:	56 01       	movw	r10, r12
    14ca:	97 fe       	sbrs	r9, 7
    14cc:	09 c0       	rjmp	.+18     	; 0x14e0 <vfprintf+0x4bc>
    14ce:	24 e0       	ldi	r18, 0x04	; 4
    14d0:	a2 0e       	add	r10, r18
    14d2:	b1 1c       	adc	r11, r1
    14d4:	f6 01       	movw	r30, r12
    14d6:	60 81       	ld	r22, Z
    14d8:	71 81       	ldd	r23, Z+1	; 0x01
    14da:	82 81       	ldd	r24, Z+2	; 0x02
    14dc:	93 81       	ldd	r25, Z+3	; 0x03
    14de:	0a c0       	rjmp	.+20     	; 0x14f4 <vfprintf+0x4d0>
    14e0:	f2 e0       	ldi	r31, 0x02	; 2
    14e2:	af 0e       	add	r10, r31
    14e4:	b1 1c       	adc	r11, r1
    14e6:	f6 01       	movw	r30, r12
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	07 2e       	mov	r0, r23
    14ee:	00 0c       	add	r0, r0
    14f0:	88 0b       	sbc	r24, r24
    14f2:	99 0b       	sbc	r25, r25
    14f4:	f9 2d       	mov	r31, r9
    14f6:	ff 76       	andi	r31, 0x6F	; 111
    14f8:	9f 2e       	mov	r9, r31
    14fa:	97 ff       	sbrs	r25, 7
    14fc:	09 c0       	rjmp	.+18     	; 0x1510 <vfprintf+0x4ec>
    14fe:	90 95       	com	r25
    1500:	80 95       	com	r24
    1502:	70 95       	com	r23
    1504:	61 95       	neg	r22
    1506:	7f 4f       	sbci	r23, 0xFF	; 255
    1508:	8f 4f       	sbci	r24, 0xFF	; 255
    150a:	9f 4f       	sbci	r25, 0xFF	; 255
    150c:	f0 68       	ori	r31, 0x80	; 128
    150e:	9f 2e       	mov	r9, r31
    1510:	2a e0       	ldi	r18, 0x0A	; 10
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	a3 01       	movw	r20, r6
    1516:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__ultoa_invert>
    151a:	c8 2e       	mov	r12, r24
    151c:	c6 18       	sub	r12, r6
    151e:	3f c0       	rjmp	.+126    	; 0x159e <vfprintf+0x57a>
    1520:	09 2d       	mov	r16, r9
    1522:	85 37       	cpi	r24, 0x75	; 117
    1524:	21 f4       	brne	.+8      	; 0x152e <vfprintf+0x50a>
    1526:	0f 7e       	andi	r16, 0xEF	; 239
    1528:	2a e0       	ldi	r18, 0x0A	; 10
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	1d c0       	rjmp	.+58     	; 0x1568 <vfprintf+0x544>
    152e:	09 7f       	andi	r16, 0xF9	; 249
    1530:	8f 36       	cpi	r24, 0x6F	; 111
    1532:	91 f0       	breq	.+36     	; 0x1558 <vfprintf+0x534>
    1534:	18 f4       	brcc	.+6      	; 0x153c <vfprintf+0x518>
    1536:	88 35       	cpi	r24, 0x58	; 88
    1538:	59 f0       	breq	.+22     	; 0x1550 <vfprintf+0x52c>
    153a:	c3 c0       	rjmp	.+390    	; 0x16c2 <vfprintf+0x69e>
    153c:	80 37       	cpi	r24, 0x70	; 112
    153e:	19 f0       	breq	.+6      	; 0x1546 <vfprintf+0x522>
    1540:	88 37       	cpi	r24, 0x78	; 120
    1542:	11 f0       	breq	.+4      	; 0x1548 <vfprintf+0x524>
    1544:	be c0       	rjmp	.+380    	; 0x16c2 <vfprintf+0x69e>
    1546:	00 61       	ori	r16, 0x10	; 16
    1548:	04 ff       	sbrs	r16, 4
    154a:	09 c0       	rjmp	.+18     	; 0x155e <vfprintf+0x53a>
    154c:	04 60       	ori	r16, 0x04	; 4
    154e:	07 c0       	rjmp	.+14     	; 0x155e <vfprintf+0x53a>
    1550:	94 fe       	sbrs	r9, 4
    1552:	08 c0       	rjmp	.+16     	; 0x1564 <vfprintf+0x540>
    1554:	06 60       	ori	r16, 0x06	; 6
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <vfprintf+0x540>
    1558:	28 e0       	ldi	r18, 0x08	; 8
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	05 c0       	rjmp	.+10     	; 0x1568 <vfprintf+0x544>
    155e:	20 e1       	ldi	r18, 0x10	; 16
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <vfprintf+0x544>
    1564:	20 e1       	ldi	r18, 0x10	; 16
    1566:	32 e0       	ldi	r19, 0x02	; 2
    1568:	56 01       	movw	r10, r12
    156a:	07 ff       	sbrs	r16, 7
    156c:	09 c0       	rjmp	.+18     	; 0x1580 <vfprintf+0x55c>
    156e:	84 e0       	ldi	r24, 0x04	; 4
    1570:	a8 0e       	add	r10, r24
    1572:	b1 1c       	adc	r11, r1
    1574:	f6 01       	movw	r30, r12
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	08 c0       	rjmp	.+16     	; 0x1590 <vfprintf+0x56c>
    1580:	f2 e0       	ldi	r31, 0x02	; 2
    1582:	af 0e       	add	r10, r31
    1584:	b1 1c       	adc	r11, r1
    1586:	f6 01       	movw	r30, r12
    1588:	60 81       	ld	r22, Z
    158a:	71 81       	ldd	r23, Z+1	; 0x01
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	a3 01       	movw	r20, r6
    1592:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__ultoa_invert>
    1596:	c8 2e       	mov	r12, r24
    1598:	c6 18       	sub	r12, r6
    159a:	0f 77       	andi	r16, 0x7F	; 127
    159c:	90 2e       	mov	r9, r16
    159e:	96 fe       	sbrs	r9, 6
    15a0:	0b c0       	rjmp	.+22     	; 0x15b8 <vfprintf+0x594>
    15a2:	09 2d       	mov	r16, r9
    15a4:	0e 7f       	andi	r16, 0xFE	; 254
    15a6:	c1 16       	cp	r12, r17
    15a8:	50 f4       	brcc	.+20     	; 0x15be <vfprintf+0x59a>
    15aa:	94 fe       	sbrs	r9, 4
    15ac:	0a c0       	rjmp	.+20     	; 0x15c2 <vfprintf+0x59e>
    15ae:	92 fc       	sbrc	r9, 2
    15b0:	08 c0       	rjmp	.+16     	; 0x15c2 <vfprintf+0x59e>
    15b2:	09 2d       	mov	r16, r9
    15b4:	0e 7e       	andi	r16, 0xEE	; 238
    15b6:	05 c0       	rjmp	.+10     	; 0x15c2 <vfprintf+0x59e>
    15b8:	dc 2c       	mov	r13, r12
    15ba:	09 2d       	mov	r16, r9
    15bc:	03 c0       	rjmp	.+6      	; 0x15c4 <vfprintf+0x5a0>
    15be:	dc 2c       	mov	r13, r12
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <vfprintf+0x5a0>
    15c2:	d1 2e       	mov	r13, r17
    15c4:	04 ff       	sbrs	r16, 4
    15c6:	0d c0       	rjmp	.+26     	; 0x15e2 <vfprintf+0x5be>
    15c8:	fe 01       	movw	r30, r28
    15ca:	ec 0d       	add	r30, r12
    15cc:	f1 1d       	adc	r31, r1
    15ce:	80 81       	ld	r24, Z
    15d0:	80 33       	cpi	r24, 0x30	; 48
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <vfprintf+0x5b4>
    15d4:	09 7e       	andi	r16, 0xE9	; 233
    15d6:	09 c0       	rjmp	.+18     	; 0x15ea <vfprintf+0x5c6>
    15d8:	02 ff       	sbrs	r16, 2
    15da:	06 c0       	rjmp	.+12     	; 0x15e8 <vfprintf+0x5c4>
    15dc:	d3 94       	inc	r13
    15de:	d3 94       	inc	r13
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <vfprintf+0x5c6>
    15e2:	80 2f       	mov	r24, r16
    15e4:	86 78       	andi	r24, 0x86	; 134
    15e6:	09 f0       	breq	.+2      	; 0x15ea <vfprintf+0x5c6>
    15e8:	d3 94       	inc	r13
    15ea:	03 fd       	sbrc	r16, 3
    15ec:	11 c0       	rjmp	.+34     	; 0x1610 <vfprintf+0x5ec>
    15ee:	00 ff       	sbrs	r16, 0
    15f0:	06 c0       	rjmp	.+12     	; 0x15fe <vfprintf+0x5da>
    15f2:	1c 2d       	mov	r17, r12
    15f4:	d5 14       	cp	r13, r5
    15f6:	80 f4       	brcc	.+32     	; 0x1618 <vfprintf+0x5f4>
    15f8:	15 0d       	add	r17, r5
    15fa:	1d 19       	sub	r17, r13
    15fc:	0d c0       	rjmp	.+26     	; 0x1618 <vfprintf+0x5f4>
    15fe:	d5 14       	cp	r13, r5
    1600:	58 f4       	brcc	.+22     	; 0x1618 <vfprintf+0x5f4>
    1602:	b7 01       	movw	r22, r14
    1604:	80 e2       	ldi	r24, 0x20	; 32
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    160c:	d3 94       	inc	r13
    160e:	f7 cf       	rjmp	.-18     	; 0x15fe <vfprintf+0x5da>
    1610:	d5 14       	cp	r13, r5
    1612:	10 f4       	brcc	.+4      	; 0x1618 <vfprintf+0x5f4>
    1614:	5d 18       	sub	r5, r13
    1616:	01 c0       	rjmp	.+2      	; 0x161a <vfprintf+0x5f6>
    1618:	51 2c       	mov	r5, r1
    161a:	04 ff       	sbrs	r16, 4
    161c:	10 c0       	rjmp	.+32     	; 0x163e <vfprintf+0x61a>
    161e:	b7 01       	movw	r22, r14
    1620:	80 e3       	ldi	r24, 0x30	; 48
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    1628:	02 ff       	sbrs	r16, 2
    162a:	17 c0       	rjmp	.+46     	; 0x165a <vfprintf+0x636>
    162c:	01 fd       	sbrc	r16, 1
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <vfprintf+0x612>
    1630:	88 e7       	ldi	r24, 0x78	; 120
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 c0       	rjmp	.+4      	; 0x163a <vfprintf+0x616>
    1636:	88 e5       	ldi	r24, 0x58	; 88
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	b7 01       	movw	r22, r14
    163c:	0c c0       	rjmp	.+24     	; 0x1656 <vfprintf+0x632>
    163e:	80 2f       	mov	r24, r16
    1640:	86 78       	andi	r24, 0x86	; 134
    1642:	59 f0       	breq	.+22     	; 0x165a <vfprintf+0x636>
    1644:	01 ff       	sbrs	r16, 1
    1646:	02 c0       	rjmp	.+4      	; 0x164c <vfprintf+0x628>
    1648:	8b e2       	ldi	r24, 0x2B	; 43
    164a:	01 c0       	rjmp	.+2      	; 0x164e <vfprintf+0x62a>
    164c:	80 e2       	ldi	r24, 0x20	; 32
    164e:	07 fd       	sbrc	r16, 7
    1650:	8d e2       	ldi	r24, 0x2D	; 45
    1652:	b7 01       	movw	r22, r14
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    165a:	c1 16       	cp	r12, r17
    165c:	38 f4       	brcc	.+14     	; 0x166c <vfprintf+0x648>
    165e:	b7 01       	movw	r22, r14
    1660:	80 e3       	ldi	r24, 0x30	; 48
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    1668:	11 50       	subi	r17, 0x01	; 1
    166a:	f7 cf       	rjmp	.-18     	; 0x165a <vfprintf+0x636>
    166c:	ca 94       	dec	r12
    166e:	f3 01       	movw	r30, r6
    1670:	ec 0d       	add	r30, r12
    1672:	f1 1d       	adc	r31, r1
    1674:	80 81       	ld	r24, Z
    1676:	b7 01       	movw	r22, r14
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    167e:	c1 10       	cpse	r12, r1
    1680:	f5 cf       	rjmp	.-22     	; 0x166c <vfprintf+0x648>
    1682:	15 c0       	rjmp	.+42     	; 0x16ae <vfprintf+0x68a>
    1684:	f4 e0       	ldi	r31, 0x04	; 4
    1686:	f5 15       	cp	r31, r5
    1688:	60 f5       	brcc	.+88     	; 0x16e2 <vfprintf+0x6be>
    168a:	84 e0       	ldi	r24, 0x04	; 4
    168c:	58 1a       	sub	r5, r24
    168e:	93 fe       	sbrs	r9, 3
    1690:	1f c0       	rjmp	.+62     	; 0x16d0 <vfprintf+0x6ac>
    1692:	01 11       	cpse	r16, r1
    1694:	27 c0       	rjmp	.+78     	; 0x16e4 <vfprintf+0x6c0>
    1696:	2c 85       	ldd	r18, Y+12	; 0x0c
    1698:	23 ff       	sbrs	r18, 3
    169a:	2a c0       	rjmp	.+84     	; 0x16f0 <vfprintf+0x6cc>
    169c:	08 e6       	ldi	r16, 0x68	; 104
    169e:	10 e0       	ldi	r17, 0x00	; 0
    16a0:	39 2d       	mov	r19, r9
    16a2:	30 71       	andi	r19, 0x10	; 16
    16a4:	93 2e       	mov	r9, r19
    16a6:	f8 01       	movw	r30, r16
    16a8:	84 91       	lpm	r24, Z
    16aa:	81 11       	cpse	r24, r1
    16ac:	24 c0       	rjmp	.+72     	; 0x16f6 <vfprintf+0x6d2>
    16ae:	55 20       	and	r5, r5
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <vfprintf+0x690>
    16b2:	e4 cc       	rjmp	.-1592   	; 0x107c <vfprintf+0x58>
    16b4:	b7 01       	movw	r22, r14
    16b6:	80 e2       	ldi	r24, 0x20	; 32
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    16be:	5a 94       	dec	r5
    16c0:	f6 cf       	rjmp	.-20     	; 0x16ae <vfprintf+0x68a>
    16c2:	f7 01       	movw	r30, r14
    16c4:	86 81       	ldd	r24, Z+6	; 0x06
    16c6:	97 81       	ldd	r25, Z+7	; 0x07
    16c8:	26 c0       	rjmp	.+76     	; 0x1716 <vfprintf+0x6f2>
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	9f ef       	ldi	r25, 0xFF	; 255
    16ce:	23 c0       	rjmp	.+70     	; 0x1716 <vfprintf+0x6f2>
    16d0:	b7 01       	movw	r22, r14
    16d2:	80 e2       	ldi	r24, 0x20	; 32
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    16da:	5a 94       	dec	r5
    16dc:	51 10       	cpse	r5, r1
    16de:	f8 cf       	rjmp	.-16     	; 0x16d0 <vfprintf+0x6ac>
    16e0:	d8 cf       	rjmp	.-80     	; 0x1692 <vfprintf+0x66e>
    16e2:	51 2c       	mov	r5, r1
    16e4:	b7 01       	movw	r22, r14
    16e6:	80 2f       	mov	r24, r16
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    16ee:	d3 cf       	rjmp	.-90     	; 0x1696 <vfprintf+0x672>
    16f0:	0c e6       	ldi	r16, 0x6C	; 108
    16f2:	10 e0       	ldi	r17, 0x00	; 0
    16f4:	d5 cf       	rjmp	.-86     	; 0x16a0 <vfprintf+0x67c>
    16f6:	91 10       	cpse	r9, r1
    16f8:	80 52       	subi	r24, 0x20	; 32
    16fa:	b7 01       	movw	r22, r14
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    1702:	0f 5f       	subi	r16, 0xFF	; 255
    1704:	1f 4f       	sbci	r17, 0xFF	; 255
    1706:	cf cf       	rjmp	.-98     	; 0x16a6 <vfprintf+0x682>
    1708:	23 e0       	ldi	r18, 0x03	; 3
    170a:	25 15       	cp	r18, r5
    170c:	10 f4       	brcc	.+4      	; 0x1712 <vfprintf+0x6ee>
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	bd cf       	rjmp	.-134    	; 0x168c <vfprintf+0x668>
    1712:	51 2c       	mov	r5, r1
    1714:	c0 cf       	rjmp	.-128    	; 0x1696 <vfprintf+0x672>
    1716:	60 96       	adiw	r28, 0x10	; 16
    1718:	e2 e1       	ldi	r30, 0x12	; 18
    171a:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__epilogue_restores__>

0000171e <__prologue_saves__>:
    171e:	2f 92       	push	r2
    1720:	3f 92       	push	r3
    1722:	4f 92       	push	r4
    1724:	5f 92       	push	r5
    1726:	6f 92       	push	r6
    1728:	7f 92       	push	r7
    172a:	8f 92       	push	r8
    172c:	9f 92       	push	r9
    172e:	af 92       	push	r10
    1730:	bf 92       	push	r11
    1732:	cf 92       	push	r12
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	ca 1b       	sub	r28, r26
    1748:	db 0b       	sbc	r29, r27
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	09 94       	ijmp

00001756 <__epilogue_restores__>:
    1756:	2a 88       	ldd	r2, Y+18	; 0x12
    1758:	39 88       	ldd	r3, Y+17	; 0x11
    175a:	48 88       	ldd	r4, Y+16	; 0x10
    175c:	5f 84       	ldd	r5, Y+15	; 0x0f
    175e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1760:	7d 84       	ldd	r7, Y+13	; 0x0d
    1762:	8c 84       	ldd	r8, Y+12	; 0x0c
    1764:	9b 84       	ldd	r9, Y+11	; 0x0b
    1766:	aa 84       	ldd	r10, Y+10	; 0x0a
    1768:	b9 84       	ldd	r11, Y+9	; 0x09
    176a:	c8 84       	ldd	r12, Y+8	; 0x08
    176c:	df 80       	ldd	r13, Y+7	; 0x07
    176e:	ee 80       	ldd	r14, Y+6	; 0x06
    1770:	fd 80       	ldd	r15, Y+5	; 0x05
    1772:	0c 81       	ldd	r16, Y+4	; 0x04
    1774:	1b 81       	ldd	r17, Y+3	; 0x03
    1776:	aa 81       	ldd	r26, Y+2	; 0x02
    1778:	b9 81       	ldd	r27, Y+1	; 0x01
    177a:	ce 0f       	add	r28, r30
    177c:	d1 1d       	adc	r29, r1
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	ed 01       	movw	r28, r26
    178a:	08 95       	ret

0000178c <__ftoa_engine>:
    178c:	28 30       	cpi	r18, 0x08	; 8
    178e:	08 f0       	brcs	.+2      	; 0x1792 <__ftoa_engine+0x6>
    1790:	27 e0       	ldi	r18, 0x07	; 7
    1792:	33 27       	eor	r19, r19
    1794:	da 01       	movw	r26, r20
    1796:	99 0f       	add	r25, r25
    1798:	31 1d       	adc	r19, r1
    179a:	87 fd       	sbrc	r24, 7
    179c:	91 60       	ori	r25, 0x01	; 1
    179e:	00 96       	adiw	r24, 0x00	; 0
    17a0:	61 05       	cpc	r22, r1
    17a2:	71 05       	cpc	r23, r1
    17a4:	39 f4       	brne	.+14     	; 0x17b4 <__ftoa_engine+0x28>
    17a6:	32 60       	ori	r19, 0x02	; 2
    17a8:	2e 5f       	subi	r18, 0xFE	; 254
    17aa:	3d 93       	st	X+, r19
    17ac:	30 e3       	ldi	r19, 0x30	; 48
    17ae:	2a 95       	dec	r18
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <__ftoa_engine+0x1e>
    17b2:	08 95       	ret
    17b4:	9f 3f       	cpi	r25, 0xFF	; 255
    17b6:	30 f0       	brcs	.+12     	; 0x17c4 <__ftoa_engine+0x38>
    17b8:	80 38       	cpi	r24, 0x80	; 128
    17ba:	71 05       	cpc	r23, r1
    17bc:	61 05       	cpc	r22, r1
    17be:	09 f0       	breq	.+2      	; 0x17c2 <__ftoa_engine+0x36>
    17c0:	3c 5f       	subi	r19, 0xFC	; 252
    17c2:	3c 5f       	subi	r19, 0xFC	; 252
    17c4:	3d 93       	st	X+, r19
    17c6:	91 30       	cpi	r25, 0x01	; 1
    17c8:	08 f0       	brcs	.+2      	; 0x17cc <__ftoa_engine+0x40>
    17ca:	80 68       	ori	r24, 0x80	; 128
    17cc:	91 1d       	adc	r25, r1
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	1f 93       	push	r17
    17d4:	0f 93       	push	r16
    17d6:	ff 92       	push	r15
    17d8:	ef 92       	push	r14
    17da:	19 2f       	mov	r17, r25
    17dc:	98 7f       	andi	r25, 0xF8	; 248
    17de:	96 95       	lsr	r25
    17e0:	e9 2f       	mov	r30, r25
    17e2:	96 95       	lsr	r25
    17e4:	96 95       	lsr	r25
    17e6:	e9 0f       	add	r30, r25
    17e8:	ff 27       	eor	r31, r31
    17ea:	e6 53       	subi	r30, 0x36	; 54
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	99 27       	eor	r25, r25
    17f0:	33 27       	eor	r19, r19
    17f2:	ee 24       	eor	r14, r14
    17f4:	ff 24       	eor	r15, r15
    17f6:	a7 01       	movw	r20, r14
    17f8:	e7 01       	movw	r28, r14
    17fa:	05 90       	lpm	r0, Z+
    17fc:	08 94       	sec
    17fe:	07 94       	ror	r0
    1800:	28 f4       	brcc	.+10     	; 0x180c <__ftoa_engine+0x80>
    1802:	36 0f       	add	r19, r22
    1804:	e7 1e       	adc	r14, r23
    1806:	f8 1e       	adc	r15, r24
    1808:	49 1f       	adc	r20, r25
    180a:	51 1d       	adc	r21, r1
    180c:	66 0f       	add	r22, r22
    180e:	77 1f       	adc	r23, r23
    1810:	88 1f       	adc	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	06 94       	lsr	r0
    1816:	a1 f7       	brne	.-24     	; 0x1800 <__ftoa_engine+0x74>
    1818:	05 90       	lpm	r0, Z+
    181a:	07 94       	ror	r0
    181c:	28 f4       	brcc	.+10     	; 0x1828 <__ftoa_engine+0x9c>
    181e:	e7 0e       	add	r14, r23
    1820:	f8 1e       	adc	r15, r24
    1822:	49 1f       	adc	r20, r25
    1824:	56 1f       	adc	r21, r22
    1826:	c1 1d       	adc	r28, r1
    1828:	77 0f       	add	r23, r23
    182a:	88 1f       	adc	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	66 1f       	adc	r22, r22
    1830:	06 94       	lsr	r0
    1832:	a1 f7       	brne	.-24     	; 0x181c <__ftoa_engine+0x90>
    1834:	05 90       	lpm	r0, Z+
    1836:	07 94       	ror	r0
    1838:	28 f4       	brcc	.+10     	; 0x1844 <__ftoa_engine+0xb8>
    183a:	f8 0e       	add	r15, r24
    183c:	49 1f       	adc	r20, r25
    183e:	56 1f       	adc	r21, r22
    1840:	c7 1f       	adc	r28, r23
    1842:	d1 1d       	adc	r29, r1
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	66 1f       	adc	r22, r22
    184a:	77 1f       	adc	r23, r23
    184c:	06 94       	lsr	r0
    184e:	a1 f7       	brne	.-24     	; 0x1838 <__ftoa_engine+0xac>
    1850:	05 90       	lpm	r0, Z+
    1852:	07 94       	ror	r0
    1854:	20 f4       	brcc	.+8      	; 0x185e <__ftoa_engine+0xd2>
    1856:	49 0f       	add	r20, r25
    1858:	56 1f       	adc	r21, r22
    185a:	c7 1f       	adc	r28, r23
    185c:	d8 1f       	adc	r29, r24
    185e:	99 0f       	add	r25, r25
    1860:	66 1f       	adc	r22, r22
    1862:	77 1f       	adc	r23, r23
    1864:	88 1f       	adc	r24, r24
    1866:	06 94       	lsr	r0
    1868:	a9 f7       	brne	.-22     	; 0x1854 <__ftoa_engine+0xc8>
    186a:	84 91       	lpm	r24, Z
    186c:	10 95       	com	r17
    186e:	17 70       	andi	r17, 0x07	; 7
    1870:	41 f0       	breq	.+16     	; 0x1882 <__ftoa_engine+0xf6>
    1872:	d6 95       	lsr	r29
    1874:	c7 95       	ror	r28
    1876:	57 95       	ror	r21
    1878:	47 95       	ror	r20
    187a:	f7 94       	ror	r15
    187c:	e7 94       	ror	r14
    187e:	1a 95       	dec	r17
    1880:	c1 f7       	brne	.-16     	; 0x1872 <__ftoa_engine+0xe6>
    1882:	e0 e7       	ldi	r30, 0x70	; 112
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	68 94       	set
    1888:	15 90       	lpm	r1, Z+
    188a:	15 91       	lpm	r17, Z+
    188c:	35 91       	lpm	r19, Z+
    188e:	65 91       	lpm	r22, Z+
    1890:	95 91       	lpm	r25, Z+
    1892:	05 90       	lpm	r0, Z+
    1894:	7f e2       	ldi	r23, 0x2F	; 47
    1896:	73 95       	inc	r23
    1898:	e1 18       	sub	r14, r1
    189a:	f1 0a       	sbc	r15, r17
    189c:	43 0b       	sbc	r20, r19
    189e:	56 0b       	sbc	r21, r22
    18a0:	c9 0b       	sbc	r28, r25
    18a2:	d0 09       	sbc	r29, r0
    18a4:	c0 f7       	brcc	.-16     	; 0x1896 <__ftoa_engine+0x10a>
    18a6:	e1 0c       	add	r14, r1
    18a8:	f1 1e       	adc	r15, r17
    18aa:	43 1f       	adc	r20, r19
    18ac:	56 1f       	adc	r21, r22
    18ae:	c9 1f       	adc	r28, r25
    18b0:	d0 1d       	adc	r29, r0
    18b2:	7e f4       	brtc	.+30     	; 0x18d2 <__ftoa_engine+0x146>
    18b4:	70 33       	cpi	r23, 0x30	; 48
    18b6:	11 f4       	brne	.+4      	; 0x18bc <__ftoa_engine+0x130>
    18b8:	8a 95       	dec	r24
    18ba:	e6 cf       	rjmp	.-52     	; 0x1888 <__ftoa_engine+0xfc>
    18bc:	e8 94       	clt
    18be:	01 50       	subi	r16, 0x01	; 1
    18c0:	30 f0       	brcs	.+12     	; 0x18ce <__ftoa_engine+0x142>
    18c2:	08 0f       	add	r16, r24
    18c4:	0a f4       	brpl	.+2      	; 0x18c8 <__ftoa_engine+0x13c>
    18c6:	00 27       	eor	r16, r16
    18c8:	02 17       	cp	r16, r18
    18ca:	08 f4       	brcc	.+2      	; 0x18ce <__ftoa_engine+0x142>
    18cc:	20 2f       	mov	r18, r16
    18ce:	23 95       	inc	r18
    18d0:	02 2f       	mov	r16, r18
    18d2:	7a 33       	cpi	r23, 0x3A	; 58
    18d4:	28 f0       	brcs	.+10     	; 0x18e0 <__ftoa_engine+0x154>
    18d6:	79 e3       	ldi	r23, 0x39	; 57
    18d8:	7d 93       	st	X+, r23
    18da:	2a 95       	dec	r18
    18dc:	e9 f7       	brne	.-6      	; 0x18d8 <__ftoa_engine+0x14c>
    18de:	10 c0       	rjmp	.+32     	; 0x1900 <__ftoa_engine+0x174>
    18e0:	7d 93       	st	X+, r23
    18e2:	2a 95       	dec	r18
    18e4:	89 f6       	brne	.-94     	; 0x1888 <__ftoa_engine+0xfc>
    18e6:	06 94       	lsr	r0
    18e8:	97 95       	ror	r25
    18ea:	67 95       	ror	r22
    18ec:	37 95       	ror	r19
    18ee:	17 95       	ror	r17
    18f0:	17 94       	ror	r1
    18f2:	e1 18       	sub	r14, r1
    18f4:	f1 0a       	sbc	r15, r17
    18f6:	43 0b       	sbc	r20, r19
    18f8:	56 0b       	sbc	r21, r22
    18fa:	c9 0b       	sbc	r28, r25
    18fc:	d0 09       	sbc	r29, r0
    18fe:	98 f0       	brcs	.+38     	; 0x1926 <__ftoa_engine+0x19a>
    1900:	23 95       	inc	r18
    1902:	7e 91       	ld	r23, -X
    1904:	73 95       	inc	r23
    1906:	7a 33       	cpi	r23, 0x3A	; 58
    1908:	08 f0       	brcs	.+2      	; 0x190c <__ftoa_engine+0x180>
    190a:	70 e3       	ldi	r23, 0x30	; 48
    190c:	7c 93       	st	X, r23
    190e:	20 13       	cpse	r18, r16
    1910:	b8 f7       	brcc	.-18     	; 0x1900 <__ftoa_engine+0x174>
    1912:	7e 91       	ld	r23, -X
    1914:	70 61       	ori	r23, 0x10	; 16
    1916:	7d 93       	st	X+, r23
    1918:	30 f0       	brcs	.+12     	; 0x1926 <__ftoa_engine+0x19a>
    191a:	83 95       	inc	r24
    191c:	71 e3       	ldi	r23, 0x31	; 49
    191e:	7d 93       	st	X+, r23
    1920:	70 e3       	ldi	r23, 0x30	; 48
    1922:	2a 95       	dec	r18
    1924:	e1 f7       	brne	.-8      	; 0x191e <__ftoa_engine+0x192>
    1926:	11 24       	eor	r1, r1
    1928:	ef 90       	pop	r14
    192a:	ff 90       	pop	r15
    192c:	0f 91       	pop	r16
    192e:	1f 91       	pop	r17
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	99 27       	eor	r25, r25
    1936:	87 fd       	sbrc	r24, 7
    1938:	90 95       	com	r25
    193a:	08 95       	ret

0000193c <strnlen_P>:
    193c:	fc 01       	movw	r30, r24
    193e:	05 90       	lpm	r0, Z+
    1940:	61 50       	subi	r22, 0x01	; 1
    1942:	70 40       	sbci	r23, 0x00	; 0
    1944:	01 10       	cpse	r0, r1
    1946:	d8 f7       	brcc	.-10     	; 0x193e <strnlen_P+0x2>
    1948:	80 95       	com	r24
    194a:	90 95       	com	r25
    194c:	8e 0f       	add	r24, r30
    194e:	9f 1f       	adc	r25, r31
    1950:	08 95       	ret

00001952 <strnlen>:
    1952:	fc 01       	movw	r30, r24
    1954:	61 50       	subi	r22, 0x01	; 1
    1956:	70 40       	sbci	r23, 0x00	; 0
    1958:	01 90       	ld	r0, Z+
    195a:	01 10       	cpse	r0, r1
    195c:	d8 f7       	brcc	.-10     	; 0x1954 <strnlen+0x2>
    195e:	80 95       	com	r24
    1960:	90 95       	com	r25
    1962:	8e 0f       	add	r24, r30
    1964:	9f 1f       	adc	r25, r31
    1966:	08 95       	ret

00001968 <fputc>:
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	fb 01       	movw	r30, r22
    1972:	23 81       	ldd	r18, Z+3	; 0x03
    1974:	21 fd       	sbrc	r18, 1
    1976:	03 c0       	rjmp	.+6      	; 0x197e <fputc+0x16>
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	9f ef       	ldi	r25, 0xFF	; 255
    197c:	2c c0       	rjmp	.+88     	; 0x19d6 <fputc+0x6e>
    197e:	22 ff       	sbrs	r18, 2
    1980:	16 c0       	rjmp	.+44     	; 0x19ae <fputc+0x46>
    1982:	46 81       	ldd	r20, Z+6	; 0x06
    1984:	57 81       	ldd	r21, Z+7	; 0x07
    1986:	24 81       	ldd	r18, Z+4	; 0x04
    1988:	35 81       	ldd	r19, Z+5	; 0x05
    198a:	42 17       	cp	r20, r18
    198c:	53 07       	cpc	r21, r19
    198e:	44 f4       	brge	.+16     	; 0x19a0 <fputc+0x38>
    1990:	a0 81       	ld	r26, Z
    1992:	b1 81       	ldd	r27, Z+1	; 0x01
    1994:	9d 01       	movw	r18, r26
    1996:	2f 5f       	subi	r18, 0xFF	; 255
    1998:	3f 4f       	sbci	r19, 0xFF	; 255
    199a:	31 83       	std	Z+1, r19	; 0x01
    199c:	20 83       	st	Z, r18
    199e:	8c 93       	st	X, r24
    19a0:	26 81       	ldd	r18, Z+6	; 0x06
    19a2:	37 81       	ldd	r19, Z+7	; 0x07
    19a4:	2f 5f       	subi	r18, 0xFF	; 255
    19a6:	3f 4f       	sbci	r19, 0xFF	; 255
    19a8:	37 83       	std	Z+7, r19	; 0x07
    19aa:	26 83       	std	Z+6, r18	; 0x06
    19ac:	14 c0       	rjmp	.+40     	; 0x19d6 <fputc+0x6e>
    19ae:	8b 01       	movw	r16, r22
    19b0:	ec 01       	movw	r28, r24
    19b2:	fb 01       	movw	r30, r22
    19b4:	00 84       	ldd	r0, Z+8	; 0x08
    19b6:	f1 85       	ldd	r31, Z+9	; 0x09
    19b8:	e0 2d       	mov	r30, r0
    19ba:	09 95       	icall
    19bc:	89 2b       	or	r24, r25
    19be:	e1 f6       	brne	.-72     	; 0x1978 <fputc+0x10>
    19c0:	d8 01       	movw	r26, r16
    19c2:	16 96       	adiw	r26, 0x06	; 6
    19c4:	8d 91       	ld	r24, X+
    19c6:	9c 91       	ld	r25, X
    19c8:	17 97       	sbiw	r26, 0x07	; 7
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	17 96       	adiw	r26, 0x07	; 7
    19ce:	9c 93       	st	X, r25
    19d0:	8e 93       	st	-X, r24
    19d2:	16 97       	sbiw	r26, 0x06	; 6
    19d4:	ce 01       	movw	r24, r28
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	08 95       	ret

000019e0 <printf>:
    19e0:	a0 e0       	ldi	r26, 0x00	; 0
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e6 ef       	ldi	r30, 0xF6	; 246
    19e6:	fc e0       	ldi	r31, 0x0C	; 12
    19e8:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__prologue_saves__+0x20>
    19ec:	ae 01       	movw	r20, r28
    19ee:	4b 5f       	subi	r20, 0xFB	; 251
    19f0:	5f 4f       	sbci	r21, 0xFF	; 255
    19f2:	fa 01       	movw	r30, r20
    19f4:	61 91       	ld	r22, Z+
    19f6:	71 91       	ld	r23, Z+
    19f8:	af 01       	movw	r20, r30
    19fa:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <__iob+0x2>
    19fe:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <__iob+0x3>
    1a02:	0e 94 12 08 	call	0x1024	; 0x1024 <vfprintf>
    1a06:	e2 e0       	ldi	r30, 0x02	; 2
    1a08:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__epilogue_restores__+0x20>

00001a0c <putchar>:
    1a0c:	60 91 44 03 	lds	r22, 0x0344	; 0x800344 <__iob+0x2>
    1a10:	70 91 45 03 	lds	r23, 0x0345	; 0x800345 <__iob+0x3>
    1a14:	0e 94 b4 0c 	call	0x1968	; 0x1968 <fputc>
    1a18:	08 95       	ret

00001a1a <__ultoa_invert>:
    1a1a:	fa 01       	movw	r30, r20
    1a1c:	aa 27       	eor	r26, r26
    1a1e:	28 30       	cpi	r18, 0x08	; 8
    1a20:	51 f1       	breq	.+84     	; 0x1a76 <__ultoa_invert+0x5c>
    1a22:	20 31       	cpi	r18, 0x10	; 16
    1a24:	81 f1       	breq	.+96     	; 0x1a86 <__ultoa_invert+0x6c>
    1a26:	e8 94       	clt
    1a28:	6f 93       	push	r22
    1a2a:	6e 7f       	andi	r22, 0xFE	; 254
    1a2c:	6e 5f       	subi	r22, 0xFE	; 254
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	8f 4f       	sbci	r24, 0xFF	; 255
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	af 4f       	sbci	r26, 0xFF	; 255
    1a36:	b1 e0       	ldi	r27, 0x01	; 1
    1a38:	3e d0       	rcall	.+124    	; 0x1ab6 <__ultoa_invert+0x9c>
    1a3a:	b4 e0       	ldi	r27, 0x04	; 4
    1a3c:	3c d0       	rcall	.+120    	; 0x1ab6 <__ultoa_invert+0x9c>
    1a3e:	67 0f       	add	r22, r23
    1a40:	78 1f       	adc	r23, r24
    1a42:	89 1f       	adc	r24, r25
    1a44:	9a 1f       	adc	r25, r26
    1a46:	a1 1d       	adc	r26, r1
    1a48:	68 0f       	add	r22, r24
    1a4a:	79 1f       	adc	r23, r25
    1a4c:	8a 1f       	adc	r24, r26
    1a4e:	91 1d       	adc	r25, r1
    1a50:	a1 1d       	adc	r26, r1
    1a52:	6a 0f       	add	r22, r26
    1a54:	71 1d       	adc	r23, r1
    1a56:	81 1d       	adc	r24, r1
    1a58:	91 1d       	adc	r25, r1
    1a5a:	a1 1d       	adc	r26, r1
    1a5c:	20 d0       	rcall	.+64     	; 0x1a9e <__ultoa_invert+0x84>
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <__ultoa_invert+0x48>
    1a60:	68 94       	set
    1a62:	3f 91       	pop	r19
    1a64:	2a e0       	ldi	r18, 0x0A	; 10
    1a66:	26 9f       	mul	r18, r22
    1a68:	11 24       	eor	r1, r1
    1a6a:	30 19       	sub	r19, r0
    1a6c:	30 5d       	subi	r19, 0xD0	; 208
    1a6e:	31 93       	st	Z+, r19
    1a70:	de f6       	brtc	.-74     	; 0x1a28 <__ultoa_invert+0xe>
    1a72:	cf 01       	movw	r24, r30
    1a74:	08 95       	ret
    1a76:	46 2f       	mov	r20, r22
    1a78:	47 70       	andi	r20, 0x07	; 7
    1a7a:	40 5d       	subi	r20, 0xD0	; 208
    1a7c:	41 93       	st	Z+, r20
    1a7e:	b3 e0       	ldi	r27, 0x03	; 3
    1a80:	0f d0       	rcall	.+30     	; 0x1aa0 <__ultoa_invert+0x86>
    1a82:	c9 f7       	brne	.-14     	; 0x1a76 <__ultoa_invert+0x5c>
    1a84:	f6 cf       	rjmp	.-20     	; 0x1a72 <__ultoa_invert+0x58>
    1a86:	46 2f       	mov	r20, r22
    1a88:	4f 70       	andi	r20, 0x0F	; 15
    1a8a:	40 5d       	subi	r20, 0xD0	; 208
    1a8c:	4a 33       	cpi	r20, 0x3A	; 58
    1a8e:	18 f0       	brcs	.+6      	; 0x1a96 <__ultoa_invert+0x7c>
    1a90:	49 5d       	subi	r20, 0xD9	; 217
    1a92:	31 fd       	sbrc	r19, 1
    1a94:	40 52       	subi	r20, 0x20	; 32
    1a96:	41 93       	st	Z+, r20
    1a98:	02 d0       	rcall	.+4      	; 0x1a9e <__ultoa_invert+0x84>
    1a9a:	a9 f7       	brne	.-22     	; 0x1a86 <__ultoa_invert+0x6c>
    1a9c:	ea cf       	rjmp	.-44     	; 0x1a72 <__ultoa_invert+0x58>
    1a9e:	b4 e0       	ldi	r27, 0x04	; 4
    1aa0:	a6 95       	lsr	r26
    1aa2:	97 95       	ror	r25
    1aa4:	87 95       	ror	r24
    1aa6:	77 95       	ror	r23
    1aa8:	67 95       	ror	r22
    1aaa:	ba 95       	dec	r27
    1aac:	c9 f7       	brne	.-14     	; 0x1aa0 <__ultoa_invert+0x86>
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	61 05       	cpc	r22, r1
    1ab2:	71 05       	cpc	r23, r1
    1ab4:	08 95       	ret
    1ab6:	9b 01       	movw	r18, r22
    1ab8:	ac 01       	movw	r20, r24
    1aba:	0a 2e       	mov	r0, r26
    1abc:	06 94       	lsr	r0
    1abe:	57 95       	ror	r21
    1ac0:	47 95       	ror	r20
    1ac2:	37 95       	ror	r19
    1ac4:	27 95       	ror	r18
    1ac6:	ba 95       	dec	r27
    1ac8:	c9 f7       	brne	.-14     	; 0x1abc <__ultoa_invert+0xa2>
    1aca:	62 0f       	add	r22, r18
    1acc:	73 1f       	adc	r23, r19
    1ace:	84 1f       	adc	r24, r20
    1ad0:	95 1f       	adc	r25, r21
    1ad2:	a0 1d       	adc	r26, r0
    1ad4:	08 95       	ret

00001ad6 <_exit>:
    1ad6:	f8 94       	cli

00001ad8 <__stop_program>:
    1ad8:	ff cf       	rjmp	.-2      	; 0x1ad8 <__stop_program>
