
controller_software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000762  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036b  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  000013a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037a  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008d  00000000  00000000  000017be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000184b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  78:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_14>:
/*** Delay Header ***/
#include <util/delay.h>

/*** Interrupt Service Routine Definitions ***/
/* Timer 0 Overflow Interrupt */
ISR(TIMER0_COMPA_vect){
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
	// Timer 0 Cycle is Complete... Ready to take in new OCR0A
	// change OCR0A value here...
	// OCR0A = new_OCR0A; // uncomment this
	#ifdef TIMER_TESTING_MODE
		PORTC &= ~(1 << PC1);
  8a:	41 98       	cbi	0x08, 1	; 8
	#endif
}
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <__vector_16>:

ISR(TIMER0_OVF_vect){
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
	
	#ifdef TIMER_TESTING_MODE
		PORTC |= (1 << PC1);
  a0:	41 9a       	sbi	0x08, 1	; 8
	#endif
	
}
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <__vector_21>:

/*** Analog to Digital Conversion Complete Interrupt ***/
ISR(ADC_vect){
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
	// Analog to Digital Conversion is complete...
}
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:
int main(void){
	
	/*** Run Once Code ***/
	/* PIN I/O Setup */
	// Set all pins to output. Change mode to input when necessary
	DDRB = 0xff;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;
  c4:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xff;
  c6:	8a b9       	out	0x0a, r24	; 10
	
	// Set ADC Input Gates...
	DDRC &= ~(1 << PC0); // ADC Channel 0... left hall effect sensor
  c8:	38 98       	cbi	0x07, 0	; 7
	DDRC &= ~(1 << PC2); // ADC Channel 2... Coil Voltage Shunt
  ca:	3a 98       	cbi	0x07, 2	; 7
	DDRC &= ~(1 << PC3); // ADC Channel 3... Coil Current Shunt
  cc:	3b 98       	cbi	0x07, 3	; 7
	DDRC &= ~(1 << PC5); // ADC Channel 5... Right hall effect sensor
  ce:	3d 98       	cbi	0x07, 5	; 7
	
	// Timer Flag Testing
	#ifdef TIMER_TESTING_MODE
		DDRC &= ~(1 << PC1); // To check if Timer ISR is working.
  d0:	39 98       	cbi	0x07, 1	; 7
	/* Global Variable Definitions */
	// Remove double slashes to activate...
	
	/* ATMEGA328P Module Initialization */
	// Remove double slashes to activate...
	timer_init();	// Set up Timer and Pulse Width Modulation.
  d2:	0e 94 6d 00 	call	0xda	; 0xda <timer_init>
	
	sei();
  d6:	78 94       	sei
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <main+0x18>

000000da <timer_init>:

void timer_init(){
	
	/*** TCCR0A: Timer/Counter Control Register A ***/
	/*** Compare Match Output A Mode ***/
	TCCR0A |=  (1 << COM0A1);		// Clear OC0A on Compare Match, set OC0A at BOTTOM. (inverting)
  da:	84 b5       	in	r24, 0x24	; 36
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	84 bd       	out	0x24, r24	; 36
	TCCR0A |=  (1 << COM0A0);
  e0:	84 b5       	in	r24, 0x24	; 36
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	84 bd       	out	0x24, r24	; 36
	
	/*** Compare Match Output B Mode ***/
	TCCR0A &= ~(1 << COM0B1);		// OC0B on compare match 'off'.
  e6:	84 b5       	in	r24, 0x24	; 36
  e8:	8f 7d       	andi	r24, 0xDF	; 223
  ea:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << COM0B0);
  ec:	84 b5       	in	r24, 0x24	; 36
  ee:	8f 7e       	andi	r24, 0xEF	; 239
  f0:	84 bd       	out	0x24, r24	; 36
	
	/*** Waveform Generation Mode ***/
	TCCR0B |=  (1<< WGM02);			// Fast PWM Mode On. TOP is set at OCR0A.
  f2:	85 b5       	in	r24, 0x25	; 37
  f4:	88 60       	ori	r24, 0x08	; 8
  f6:	85 bd       	out	0x25, r24	; 37
	TCCR0B |=  (1<< WGM01);
  f8:	85 b5       	in	r24, 0x25	; 37
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	85 bd       	out	0x25, r24	; 37
	TCCR0B |=  (1<< WGM00);
  fe:	85 b5       	in	r24, 0x25	; 37
 100:	81 60       	ori	r24, 0x01	; 1
 102:	85 bd       	out	0x25, r24	; 37
	
	/*** TCCR0B: Timer/Counter Control Reigster B ***/
	/** Force Output Compare A ***/
	TCCR0B &= ~(1 << FOC0A);		// Force Output Compare A 'off'.
 104:	85 b5       	in	r24, 0x25	; 37
 106:	8f 77       	andi	r24, 0x7F	; 127
 108:	85 bd       	out	0x25, r24	; 37
	
	/*** Force Output Compare B ***/
	TCCR0B &= ~(1 << FOC0B);		// Force Output Compare B 'off'.
 10a:	85 b5       	in	r24, 0x25	; 37
 10c:	8f 7b       	andi	r24, 0xBF	; 191
 10e:	85 bd       	out	0x25, r24	; 37
	
	/*** Clock Select Bits ***/
	// NOTES: CHANGE PRESCALER VALUE IF WE WANT TO PRODUCE SMALLER COUNT
	TCCR0B |=  (1 << CS02);			// Pre-scaler 256
 110:	85 b5       	in	r24, 0x25	; 37
 112:	84 60       	ori	r24, 0x04	; 4
 114:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS01);			// 8MHz / 256 = 31.25 KHz
 116:	85 b5       	in	r24, 0x25	; 37
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS00);
 11c:	85 b5       	in	r24, 0x25	; 37
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	85 bd       	out	0x25, r24	; 37
	// 625 - 512  - 1 = 112
	// TCNT0 = 112 = 0x70

	/*** OCR0A: Output Compare Register A ***/
	#ifdef TIMER_TESTING_MODE
		OCR0A = 127;
 122:	8f e7       	ldi	r24, 0x7F	; 127
 124:	87 bd       	out	0x27, r24	; 39
	// A match between OCR0B and TCNT0 will call interrupt, or generate waveform output on OC0B pin
	//OCR0B = 'NEED VALUE';
	
	/*** TIMSK0: Timer / Counter 0 Mask Register (Actuator) ***/
	/*** Timer / Counter 0 Output Compare Match A Interrupt ***/
	TIMSK0 |=  (1 << OCIE0A);						// Interrupt when TCNT0 = OCR0A 'On'
 126:	ee e6       	ldi	r30, 0x6E	; 110
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24
	/*** Timer / Counter 0 Output Compare Match B Interrupt ***/
	TIMSK0 &= ~(1 << OCIE0B);						// Interrupt when TCNT0 = OCR0B 'Off'
 130:	80 81       	ld	r24, Z
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	80 83       	st	Z, r24
	/*** Timer / Counter 0 Overflow Interrupt Enable ***/
	TIMSK0 =  (1 << TOIE0);							// Interrupt when Overflow On
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 83       	st	Z, r24
 13a:	08 95       	ret

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
